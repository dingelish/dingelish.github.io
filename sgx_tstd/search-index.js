var searchIndex = {};
searchIndex["sgx_alloc"] = {"doc":"liballoc crate for Rust SGX SDK","items":[[3,"System","sgx_alloc","",null,null],[11,"alloc","","",0,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"generics":["allocerr"],"name":"result"}}],[11,"alloc_zeroed","","",0,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"generics":["allocerr"],"name":"result"}}],[11,"dealloc","","",0,null],[11,"realloc","","",0,null],[11,"oom","","",0,null],[11,"usable_size","","",0,null],[11,"alloc_excess","","",0,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"generics":["excess","allocerr"],"name":"result"}}],[11,"realloc_excess","","",0,null],[11,"grow_in_place","","",0,null],[11,"shrink_in_place","","",0,null]],"paths":[[3,"System"]]};
searchIndex["sgx_tprotected_fs"] = {"doc":"Intel Protected File System Library","items":[[3,"SgxFileStream","sgx_tprotected_fs","",null,null],[4,"SeekFrom","","Enumeration of possible methods to seek within an I/O object.",null,null],[13,"Start","","Set the offset to the provided number of bytes.",0,null],[13,"End","","Set the offset to the size of this object plus the specified number of bytes.",0,null],[13,"Current","","Set the offset to the current position plus the specified number of bytes.",0,null],[5,"remove","","The remove function deletes a file from the file system.",null,{"inputs":[{"name":"cstr"}],"output":{"name":"syserror"}}],[5,"export_auto_key","","The export_auto_key function is used for exporting the latest key used for the file encryption.",null,{"inputs":[{"name":"cstr"}],"output":{"generics":["sgx_key_128bit_t"],"name":"sysresult"}}],[5,"import_auto_key","","The import_auto_key function is used for importing a Protected FS auto key file created on a different enclave or platform.",null,{"inputs":[{"name":"cstr"},{"name":"sgx_key_128bit_t"}],"output":{"name":"syserror"}}],[11,"open","","The open function creates or opens a protected file.",1,{"inputs":[{"name":"cstr"},{"name":"cstr"},{"name":"sgx_key_128bit_t"}],"output":{"generics":["sgxfilestream"],"name":"sysresult"}}],[11,"open_auto_key","","The open_auto_key function creates or opens a protected file.",1,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"generics":["sgxfilestream"],"name":"sysresult"}}],[11,"read","","The read function reads the requested amount of data from the file, and extends the file pointer by that amount.",1,null],[11,"write","","The write function writes the given amount of data to the file, and extends the file pointer by that amount.",1,null],[11,"tell","","The tell function obtains the current value of the file position indicator for the stream pointed to by stream.",1,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"sysresult"}}],[11,"seek","","The seek function sets the current value of the position indicator of the file.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"seekfrom"}],"output":{"name":"syserror"}}],[11,"flush","","The flush function forces a cache flush, and if it returns successfully, it is guaranteed that your changes are committed to a file on the disk.",1,{"inputs":[{"name":"self"}],"output":{"name":"syserror"}}],[11,"error","","The error function returns the latest operation error code.",1,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"is_eof","","The is_eof function tells the caller if the file's position indicator hit the end of the file in a previous read operation.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clearerr","","The clearerr function attempts to repair a bad file status, and also clears the end-of-file flag.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_cache","","The clear_cache function is used for clearing the internal file cache. The function scrubs all the data from the cache, and releases all the allocated cache memory.",1,{"inputs":[{"name":"self"}],"output":{"name":"syserror"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"seekfrom"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"SeekFrom"],[3,"SgxFileStream"]]};
searchIndex["sgx_trts"] = {"doc":"Trusted Runtime System","items":[[0,"veh","sgx_trts","",null,null],[5,"rsgx_register_exception_handler","sgx_trts::veh","rsgx_register_exception_handler registers an exception handler.",null,{"inputs":[{"name":"u32"},{"name":"sgx_exception_handler_t"}],"output":{"generics":["exception_handle"],"name":"option"}}],[5,"rsgx_unregister_exception_handler","","rsgx_unregister_exception_handler is used to unregister a custom exception handler.",null,{"inputs":[{"name":"exception_handle"}],"output":{"name":"bool"}}],[6,"exception_handle","","",null,null],[0,"trts","sgx_trts","",null,null],[5,"rsgx_read_rand","sgx_trts::trts","rsgx_read_rand function is used to generate a random number inside the enclave.",null,null],[5,"rsgx_data_is_within_enclave","","rsgx_data_is_within_enclave checks whether a given address is within enclave memory.",null,{"inputs":[{"name":"t"}],"output":{"name":"bool"}}],[5,"rsgx_slice_is_within_enclave","","rsgx_slice_is_within_enclave checks whether a given address is within enclave memory.",null,null],[5,"rsgx_raw_is_within_enclave","","rsgx_raw_is_within_enclave checks whether a given address is within enclave memory.",null,null],[5,"rsgx_data_is_outside_enclave","","rsgx_data_is_outside_enclave checks whether a given address is outside enclave memory.",null,{"inputs":[{"name":"t"}],"output":{"name":"bool"}}],[5,"rsgx_slice_is_outside_enclave","","rsgx_slice_is_outside_enclave checks whether a given address is outside enclave memory.",null,null],[5,"rsgx_raw_is_outside_enclave","","rsgx_raw_is_outside_enclave checks whether a given address is outside enclave memory.",null,null],[5,"rsgx_abort","","",null,null],[5,"rsgx_atexit","","",null,{"inputs":[{"name":"exit_function_t"}],"output":{"name":"bool"}}],[5,"abort","","",null,null],[5,"atexit","","",null,null],[6,"exit_function_t","","",null,null],[0,"enclave","sgx_trts","Get the metadata of the current enclave.",null,null],[3,"SgxGlobalData","sgx_trts::enclave","",null,null],[3,"SgxThreadData","","",null,null],[4,"SgxThreadPolicy","","",null,null],[13,"Bound","","",0,null],[13,"Unbound","","",0,null],[5,"rsgx_get_thread_data","","rsgx_get_thread_data is to get TD base address per thread.",null,null],[5,"rsgx_get_enclave_base","","rsgx_get_enclave_base is to get enclave image base address.",null,null],[5,"rsgx_get_enclave_size","","rsgx_get_enclave_size is to get enclave image size.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"rsgx_get_heap_base","","rsgx_get_heap_base is to get enclave heap base address.",null,null],[5,"rsgx_get_heap_offset","","rsgx_get_heap_offset is to get enclave heap offset.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"rsgx_get_heap_size","","rsgx_get_heap_size is to get enclave heap size.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"rsgx_get_thread_policy","","rsgx_get_thread_policy is to get TCS management policy.",null,{"inputs":[],"output":{"name":"sgxthreadpolicy"}}],[5,"get_thread_data","","",null,null],[5,"get_enclave_base","","",null,null],[5,"get_heap_base","","",null,null],[5,"get_heap_size","","",null,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"sgxglobaldata"}}],[11,"new","","get global_data.",1,{"inputs":[],"output":{"name":"self"}}],[11,"enclave_base","","enclave_base is to get enclave map base address.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"enclave_size","","enclave_size is to get enclave map size.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_base","","heap_base is to get heap base address.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_offset","","heap_offset is to get heap offset.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_size","","heap_size is to get heap size.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"thread_policy","","thread_policy is to get TCS policy.",1,{"inputs":[{"name":"self"}],"output":{"name":"sgxthreadpolicy"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"sgxthreaddata"}}],[11,"new","","get thread_data per thread.",2,{"inputs":[],"output":{"name":"self"}}],[11,"td_base","","td_base is to get TD base address per thread.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"stack_base","","stack_base is to get stack base address per thread.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"stack_limit","","stack_limit is to get stack limit per thread.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"tls_base","","tls_base is to get tls base address per thread.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last_error","","last_error is to get last error per thread.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"exception_flag","","exception_flag is to get exception flag per thread.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"sgxthreadpolicy"}}],[0,"memeq","sgx_trts","Comparing buffer contents in constant time.",null,null],[8,"ConsttimeMemEq","sgx_trts::memeq","",null,null],[10,"consttime_memeq","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"consttime_memne","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[0,"oom","sgx_trts","",null,null],[5,"rsgx_oom","sgx_trts::oom","",null,null],[5,"set_panic_handler","","Set a custom handler for out-of-memory conditions",null,null],[0,"error","sgx_trts","",null,null],[5,"errno","sgx_trts::error","Get the last error number.",null,{"inputs":[],"output":{"name":"i32"}}],[5,"set_errno","","Set the last error number.",null,{"inputs":[{"name":"i32"}],"output":null}],[5,"error_string","","Gets a detailed string description for the given error number.",null,null],[0,"libc","sgx_trts","This mod provides the interface connecting Rust's memory management system to the Intel's SGX SDK's malloc system.",null,null],[6,"int8_t","sgx_trts::libc","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[4,"c_void","","",null,null],[6,"c_schar","","",null,null],[6,"c_char","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"c_ulong","","",null,null],[6,"c_long","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",4,null],[12,"st_ino","","",4,null],[12,"st_nlink","","",4,null],[12,"st_mode","","",4,null],[12,"st_uid","","",4,null],[12,"st_gid","","",4,null],[12,"st_rdev","","",4,null],[12,"st_size","","",4,null],[12,"st_blksize","","",4,null],[12,"st_blocks","","",4,null],[12,"st_atime","","",4,null],[12,"st_atime_nsec","","",4,null],[12,"st_mtime","","",4,null],[12,"st_mtime_nsec","","",4,null],[12,"st_ctime","","",4,null],[12,"st_ctime_nsec","","",4,null],[3,"stat64","","",null,null],[12,"st_dev","","",5,null],[12,"st_ino","","",5,null],[12,"st_nlink","","",5,null],[12,"st_mode","","",5,null],[12,"st_uid","","",5,null],[12,"st_gid","","",5,null],[12,"st_rdev","","",5,null],[12,"st_size","","",5,null],[12,"st_blksize","","",5,null],[12,"st_blocks","","",5,null],[12,"st_atime","","",5,null],[12,"st_atime_nsec","","",5,null],[12,"st_mtime","","",5,null],[12,"st_mtime_nsec","","",5,null],[12,"st_ctime","","",5,null],[12,"st_ctime_nsec","","",5,null],[3,"timeval","","",null,null],[12,"tv_sec","","",6,null],[12,"tv_usec","","",6,null],[3,"timespec","","",null,null],[12,"tv_sec","","",7,null],[12,"tv_nsec","","",7,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",8,null],[12,"sa_data","","",8,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",9,null],[12,"sin_port","","",9,null],[12,"sin_addr","","",9,null],[12,"sin_zero","","",9,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",10,null],[12,"sin6_port","","",10,null],[12,"sin6_flowinfo","","",10,null],[12,"sin6_addr","","",10,null],[12,"sin6_scope_id","","",10,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",11,null],[12,"sun_path","","",11,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",12,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",13,null],[12,"ai_family","","",13,null],[12,"ai_socktype","","",13,null],[12,"ai_protocol","","",13,null],[12,"ai_addrlen","","",13,null],[12,"ai_addr","","",13,null],[12,"ai_canonname","","",13,null],[12,"ai_next","","",13,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",14,null],[12,"nl_pid","","",14,null],[12,"nl_groups","","",14,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",15,null],[12,"sll_protocol","","",15,null],[12,"sll_ifindex","","",15,null],[12,"sll_hatype","","",15,null],[12,"sll_pkttype","","",15,null],[12,"sll_halen","","",15,null],[12,"sll_addr","","",15,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",16,null],[12,"tm_min","","",16,null],[12,"tm_hour","","",16,null],[12,"tm_mday","","",16,null],[12,"tm_mon","","",16,null],[12,"tm_year","","",16,null],[12,"tm_wday","","",16,null],[12,"tm_yday","","",16,null],[12,"tm_isdst","","",16,null],[12,"tm_gmtoff","","",16,null],[12,"tm_zone","","",16,null],[3,"in_addr","","",null,null],[12,"s_addr","","",17,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",18,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",19,null],[12,"imr_interface","","",19,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",20,null],[12,"ipv6mr_interface","","",20,null],[3,"hostent","","",null,null],[12,"h_name","","",21,null],[12,"h_aliases","","",21,null],[12,"h_addrtype","","",21,null],[12,"h_length","","",21,null],[12,"h_addr_list","","",21,null],[3,"iovec","","",null,null],[12,"iov_base","","",22,null],[12,"iov_len","","",22,null],[3,"pollfd","","",null,null],[12,"fd","","",23,null],[12,"events","","",23,null],[12,"revents","","",23,null],[3,"winsize","","",null,null],[12,"ws_row","","",24,null],[12,"ws_col","","",24,null],[12,"ws_xpixel","","",24,null],[12,"ws_ypixel","","",24,null],[3,"linger","","",null,null],[12,"l_onoff","","",25,null],[12,"l_linger","","",25,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",26,null],[5,"memchr","","",null,null],[5,"memrchr","","",null,null],[5,"strlen","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"posix_memalign","","",null,null],[5,"malloc_usable_size","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"socklen_t","","",null,null],[6,"off64_t","","",null,null],[6,"time_t","","",null,null],[6,"clockid_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"mode_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"blksize_t","","",null,null],[6,"ino_t","","",null,null],[6,"nlink_t","","",null,null],[6,"off_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"ino64_t","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_PATH","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_DCCP","","",null,null],[17,"SOCK_PACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",null,null],[17,"DCCP_SOCKOPT_SERVICE","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_L","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_R","","",null,null],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",null,null],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",null,null],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",null,null],[17,"DCCP_SOCKOPT_CCID","","",null,null],[17,"DCCP_SOCKOPT_TX_CCID","","",null,null],[17,"DCCP_SOCKOPT_RX_CCID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",null,null],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",null,null],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",null,null],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_CANCELLK","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"F_ADD_SEALS","","",null,null],[17,"F_GET_SEALS","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_DCCP","","DCCP",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_MTP","","",null,null],[17,"IPPROTO_BEETPH","","",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_PIM","","Protocol indep. multicast",null,null],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_MH","","",null,null],[17,"IPPROTO_UDPLITE","","",null,null],[17,"IPPROTO_MPLS","","",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EDOTDOT","","",null,null],[17,"EBADMSG","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"ERFKILL","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ENOTSUP","","",null,null],[17,"ESGX","","",null,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"stat64"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[0,"memchr","sgx_trts","",null,null],[5,"memchr","sgx_trts::memchr","",null,null],[5,"memrchr","","",null,null],[0,"ascii","sgx_trts","Operations on ASCII strings and characters.",null,null],[3,"EscapeDefault","sgx_trts::ascii","An iterator over the escaped version of a byte.",null,null],[5,"escape_default","","Returns an iterator that produces an escaped version of a `u8`.",null,{"inputs":[{"name":"u8"}],"output":{"name":"escapedefault"}}],[8,"AsciiExt","","Extension methods for ASCII-subset only operations.",null,null],[16,"Owned","","Container type for copied ASCII characters.",28,null],[10,"is_ascii","","Checks if the value is within the ASCII range.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"to_ascii_uppercase","","Makes a copy of the value in its ASCII upper case equivalent.",28,null],[10,"to_ascii_lowercase","","Makes a copy of the value in its ASCII lower case equivalent.",28,null],[10,"eq_ignore_ascii_case","","Checks that two values are an ASCII case-insensitive match.",28,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"make_ascii_uppercase","","Converts this type to its ASCII upper case equivalent in-place.",28,{"inputs":[{"name":"self"}],"output":null}],[10,"make_ascii_lowercase","","Converts this type to its ASCII lower case equivalent in-place.",28,{"inputs":[{"name":"self"}],"output":null}],[11,"is_ascii_alphabetic","","Checks if the value is an ASCII alphabetic character: U+0041 'A' ... U+005A 'Z' or U+0061 'a' ... U+007A 'z'. For strings, true if all characters in the string are ASCII alphabetic.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_uppercase","","Checks if the value is an ASCII uppercase character: U+0041 'A' ... U+005A 'Z'. For strings, true if all characters in the string are ASCII uppercase.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_lowercase","","Checks if the value is an ASCII lowercase character: U+0061 'a' ... U+007A 'z'. For strings, true if all characters in the string are ASCII lowercase.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_alphanumeric","","Checks if the value is an ASCII alphanumeric character: U+0041 'A' ... U+005A 'Z', U+0061 'a' ... U+007A 'z', or U+0030 '0' ... U+0039 '9'. For strings, true if all characters in the string are ASCII alphanumeric.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_digit","","Checks if the value is an ASCII decimal digit: U+0030 '0' ... U+0039 '9'. For strings, true if all characters in the string are ASCII digits.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_hexdigit","","Checks if the value is an ASCII hexadecimal digit: U+0030 '0' ... U+0039 '9', U+0041 'A' ... U+0046 'F', or U+0061 'a' ... U+0066 'f'. For strings, true if all characters in the string are ASCII hex digits.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_punctuation","","Checks if the value is an ASCII punctuation character:",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_graphic","","Checks if the value is an ASCII graphic character: U+0021 '@' ... U+007E '~'. For strings, true if all characters in the string are ASCII punctuation.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_whitespace","","Checks if the value is an ASCII whitespace character: U+0020 SPACE, U+0009 HORIZONTAL TAB, U+000A LINE FEED, U+000C FORM FEED, or U+000D CARRIAGE RETURN. For strings, true if all characters in the string are ASCII whitespace.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_control","","Checks if the value is an ASCII control character: U+0000 NUL ... U+001F UNIT SEPARATOR, or U+007F DELETE. Note that most ASCII whitespace characters are control characters, but SPACE is not.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"size_hint","","",29,null],[11,"next_back","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"c_str","sgx_trts","",null,null],[3,"CString","sgx_trts::c_str","A type representing an owned C-compatible string",null,null],[3,"CStr","","Representation of a borrowed C string.",null,null],[3,"NulError","","An error returned from `CString::new` to indicate that a nul byte was found in the vector provided.",null,null],[3,"FromBytesWithNulError","","An error returned from `CStr::from_bytes_with_nul` to indicate that a nul byte was found too early in the slice provided or one wasn't found at all.",null,null],[3,"IntoStringError","","An error returned from `CString::into_string` to indicate that a UTF-8 error was encountered during the conversion.",null,null],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",30,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"le","","",30,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"gt","","",30,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ge","","",30,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"cmp","","",30,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"ordering"}}],[11,"hash","","",30,null],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"cstring"}}],[11,"hash","","",31,null],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"nulerror"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"frombyteswithnulerror"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"frombyteswithnulerror"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"frombyteswithnulerror"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"__description","","",33,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"intostringerror"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new C-compatible string from a container of bytes.",30,{"inputs":[{"name":"t"}],"output":{"generics":["cstring","nulerror"],"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for interior 0 bytes.",30,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_raw","","Retakes ownership of a `CString` that was transferred to C.",30,null],[11,"into_raw","","Transfers ownership of the string to a C caller.",30,null],[11,"into_string","","Converts the `CString` into a `String` if it contains valid Unicode data.",30,{"inputs":[{"name":"self"}],"output":{"generics":["string","intostringerror"],"name":"result"}}],[11,"into_bytes","","Returns the underlying byte buffer.",30,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"into_bytes_with_nul","","Equivalent to the `into_bytes` function except that the returned vector includes the trailing nul byte.",30,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",30,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice includes the trailing nul byte.",30,null],[11,"as_c_str","","Extracts a `CStr` slice containing the entire string.",30,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"into_boxed_c_str","","Converts this `CString` into a boxed `CStr`.",30,{"inputs":[{"name":"self"}],"output":{"generics":["cstr"],"name":"box"}}],[11,"drop","","",30,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",30,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Creates an empty `CString`.",30,{"inputs":[],"output":{"name":"cstring"}}],[11,"borrow","","",30,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"from","","",30,{"inputs":[{"generics":["cstr"],"name":"box"}],"output":{"name":"cstring"}}],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to `CString::new`.",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which generated the error in the first place.",32,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_cstring","","Consumes this error, returning original `CString` which generated the error.",34,{"inputs":[{"name":"self"}],"output":{"name":"cstring"}}],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of this error.",34,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"__description","","",34,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"__cause","","",34,{"inputs":[{"name":"self"}],"output":{"generics":["utf8error"],"name":"option"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",31,null],[11,"from_bytes_with_nul","","",31,null],[11,"from_bytes_with_nul_unchecked","","",31,null],[11,"as_ptr","","",31,null],[11,"to_bytes","","",31,null],[11,"to_bytes_with_nul","","",31,null],[11,"to_str","","",31,{"inputs":[{"name":"self"}],"output":{"generics":["str","utf8error"],"name":"result"}}],[11,"to_string_lossy","","",31,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"cow"}}],[11,"into_c_string","","",31,{"inputs":[{"generics":["cstr"],"name":"box"}],"output":{"name":"cstring"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"cstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"self"},{"name":"cstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",31,{"inputs":[{"name":"self"},{"name":"cstr"}],"output":{"name":"ordering"}}],[11,"to_owned","","",31,{"inputs":[{"name":"self"}],"output":{"name":"cstring"}}],[11,"from","","",30,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"index","","",30,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"cstr"}}],[11,"as_ref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"as_ref","","",30,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[14,"global_ctors_object","sgx_trts","global_ctors_object is the base macro of implementing constructors.",null,null],[14,"global_dtors_object","","",null,null]],"paths":[[4,"SgxThreadPolicy"],[3,"SgxGlobalData"],[3,"SgxThreadData"],[8,"ConsttimeMemEq"],[3,"stat"],[3,"stat64"],[3,"timeval"],[3,"timespec"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"fd_set"],[8,"AsciiExt"],[3,"EscapeDefault"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"FromBytesWithNulError"],[3,"IntoStringError"]]};
searchIndex["sgx_tstd"] = {"doc":"The Rust SGX SDK Standard Library","items":[[0,"any","sgx_tstd","This module implements the `Any` trait, which enables dynamic typing of any `'static` type through runtime reflection.",null,null],[8,"Any","sgx_tstd::any","A type to emulate dynamic typing.",null,null],[10,"get_type_id","","Gets the `TypeId` of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[3,"TypeId","","A `TypeId` represents a globally unique identifier for a type.",null,null],[0,"cell","sgx_tstd","Shareable mutable containers.",null,null],[3,"Cell","sgx_tstd::cell","A mutable memory location.",null,null],[3,"RefCell","","A mutable memory location with dynamically checked borrow rules",null,null],[3,"BorrowError","","An error returned by `RefCell::try_borrow`.",null,null],[3,"BorrowMutError","","An error returned by `RefCell::try_borrow_mut`.",null,null],[3,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box. A wrapper type for an immutably borrowed value from a `RefCell<T>`.",null,null],[3,"RefMut","","A wrapper type for a mutably borrowed value from a `RefCell<T>`.",null,null],[3,"UnsafeCell","","The core primitive for interior mutability in Rust.",null,null],[0,"clone","sgx_tstd","The `Clone` trait for types that cannot be 'implicitly copied'.",null,null],[8,"Clone","sgx_tstd::clone","A common trait for the ability to explicitly duplicate an object.",null,null],[10,"clone","","Returns a copy of the value.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",1,null],[0,"cmp","sgx_tstd","Functionality for ordering and comparison.",null,null],[8,"PartialEq","sgx_tstd::cmp","Trait for equality comparisons which are partial equivalence relations.",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used by `==`.",2,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",2,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Eq","","Trait for equality comparisons which are equivalence relations.",null,null],[4,"Ordering","","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",3,null],[13,"Equal","","An ordering where a compared value is equal [to another].",3,null],[13,"Greater","","An ordering where a compared value is greater [than another].",3,null],[3,"Reverse","","A helper struct for reverse ordering.",null,null],[12,"0","","",4,null],[8,"Ord","","Trait for types that form a total order.",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"max","","Compares and returns the maximum of two values.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"min","","Compares and returns the minimum of two values.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[5,"min","","Compares and returns the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compares and returns the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"convert","sgx_tstd","Traits for conversions between types.",null,null],[4,"Infallible","sgx_tstd::convert","A type used as the error type for implementations of fallible conversion traits in cases where conversions cannot actually fail.",null,null],[8,"AsRef","","A cheap reference-to-reference conversion. Used to convert a value to a reference value within generic code.",null,null],[10,"as_ref","","Performs the conversion.",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive. The reciprocal of [`From`][From].",null,null],[10,"into","","Performs the conversion.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"From","","Simple and safe type conversions in to `Self`. It is the reciprocal of `Into`.",null,null],[10,"from","","Performs the conversion.",10,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"TryInto","","An attempted conversion that consumes `self`, which may or may not be expensive.",null,null],[16,"Error","","The type returned in the event of a conversion error.",11,null],[10,"try_into","","Performs the conversion.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"TryFrom","","Attempt to construct `Self` via a conversion.",null,null],[16,"Error","","The type returned in the event of a conversion error.",12,null],[10,"try_from","","Performs the conversion.",12,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[0,"default","sgx_tstd","The `Default` trait for types which may have meaningful default values.",null,null],[8,"Default","sgx_tstd::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the \"default value\" for a type.",13,{"inputs":[],"output":{"name":"self"}}],[0,"hash","sgx_tstd","Generic hashing support.",null,null],[8,"Hash","sgx_tstd::hash","A hashable type.",null,null],[10,"hash","","Feeds this value into the given [`Hasher`].",14,null],[11,"hash_slice","","Feeds a slice of this type into the given [`Hasher`].",14,null],[8,"Hasher","","A trait for hashing an arbitrary stream of bytes.",null,null],[10,"finish","","Returns the hash value for the values written so far.",15,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"write","","Writes some data into this `Hasher`.",15,null],[11,"write_u8","","Writes a single `u8` into this hasher.",15,null],[11,"write_u16","","Writes a single `u16` into this hasher.",15,null],[11,"write_u32","","Writes a single `u32` into this hasher.",15,null],[11,"write_u64","","Writes a single `u64` into this hasher.",15,null],[11,"write_u128","","Writes a single `u128` into this hasher.",15,null],[11,"write_usize","","Writes a single `usize` into this hasher.",15,null],[11,"write_i8","","Writes a single `i8` into this hasher.",15,null],[11,"write_i16","","Writes a single `i16` into this hasher.",15,null],[11,"write_i32","","Writes a single `i32` into this hasher.",15,null],[11,"write_i64","","Writes a single `i64` into this hasher.",15,null],[11,"write_i128","","Writes a single `i128` into this hasher.",15,null],[11,"write_isize","","Writes a single `isize` into this hasher.",15,null],[8,"BuildHasher","","A trait for creating instances of [`Hasher`].",null,null],[16,"Hasher","","Type of the hasher that will be created.",16,null],[10,"build_hasher","","Creates a new hasher.",16,null],[3,"BuildHasherDefault","","Used to create a default [`BuildHasher`] instance for types that implement [`Hasher`] and [`Default`].",null,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[3,"SipHasher24","","An implementation of SipHash 2-4.",null,null],[3,"SipHasher13","","An implementation of SipHash 1-3.",null,null],[0,"intrinsics","sgx_tstd","rustc compiler intrinsics.",null,null],[5,"atomic_cxchg","sgx_tstd::intrinsics","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_acq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Acquire` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_rel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Release` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_acqrel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_relaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Relaxed` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_failacq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_acq_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Acquire` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_acqrel_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchgweak","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_acq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Acquire` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_rel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Release` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_acqrel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_relaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Relaxed` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_failacq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_acq_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Acquire` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_acqrel_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_load","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::load`.",null,null],[5,"atomic_load_acq","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::load`.",null,null],[5,"atomic_load_relaxed","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::load`.",null,null],[5,"atomic_load_unordered","","",null,null],[5,"atomic_store","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::store`.",null,null],[5,"atomic_store_rel","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::store`.",null,null],[5,"atomic_store_relaxed","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::store`.",null,null],[5,"atomic_store_unordered","","",null,null],[5,"atomic_xchg","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_acq","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_rel","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_acqrel","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_relaxed","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xadd","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_acq","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_rel","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Release` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_acqrel","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_relaxed","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xsub","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_acq","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_rel","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Release` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_acqrel","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_relaxed","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_and","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_acq","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_rel","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_acqrel","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_relaxed","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_nand","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_acq","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_rel","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_acqrel","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_relaxed","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_or","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_acq","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_rel","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_acqrel","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_relaxed","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_xor","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_acq","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_rel","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_acqrel","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_relaxed","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_max","","",null,null],[5,"atomic_max_acq","","",null,null],[5,"atomic_max_rel","","",null,null],[5,"atomic_max_acqrel","","",null,null],[5,"atomic_max_relaxed","","",null,null],[5,"atomic_min","","",null,null],[5,"atomic_min_acq","","",null,null],[5,"atomic_min_rel","","",null,null],[5,"atomic_min_acqrel","","",null,null],[5,"atomic_min_relaxed","","",null,null],[5,"atomic_umin","","",null,null],[5,"atomic_umin_acq","","",null,null],[5,"atomic_umin_rel","","",null,null],[5,"atomic_umin_acqrel","","",null,null],[5,"atomic_umin_relaxed","","",null,null],[5,"atomic_umax","","",null,null],[5,"atomic_umax_acq","","",null,null],[5,"atomic_umax_rel","","",null,null],[5,"atomic_umax_acqrel","","",null,null],[5,"atomic_umax_relaxed","","",null,null],[5,"prefetch_read_data","","The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction if supported; otherwise, it is a noop. Prefetches have no effect on the behavior of the program but can change its performance characteristics.",null,null],[5,"prefetch_write_data","","The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction if supported; otherwise, it is a noop. Prefetches have no effect on the behavior of the program but can change its performance characteristics.",null,null],[5,"prefetch_read_instruction","","The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction if supported; otherwise, it is a noop. Prefetches have no effect on the behavior of the program but can change its performance characteristics.",null,null],[5,"prefetch_write_instruction","","The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction if supported; otherwise, it is a noop. Prefetches have no effect on the behavior of the program but can change its performance characteristics.",null,null],[5,"atomic_fence","","",null,null],[5,"atomic_fence_acq","","",null,null],[5,"atomic_fence_rel","","",null,null],[5,"atomic_fence_acqrel","","",null,null],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",null,null],[5,"atomic_singlethreadfence_acq","","",null,null],[5,"atomic_singlethreadfence_rel","","",null,null],[5,"atomic_singlethreadfence_acqrel","","",null,null],[5,"rustc_peek","","Magic intrinsic that derives its meaning from attributes attached to the function.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abort","","Aborts the execution of the process.",null,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable, enabling further optimizations.",null,null],[5,"assume","","Informs the optimizer that a condition is always true. If the condition is false, the behavior is undefined.",null,null],[5,"likely","","Hints to the compiler that branch condition is likely to be true. Returns the value passed to it.",null,{"inputs":[{"name":"bool"}],"output":{"name":"bool"}}],[5,"unlikely","","Hints to the compiler that branch condition is likely to be false. Returns the value passed to it.",null,{"inputs":[{"name":"bool"}],"output":{"name":"bool"}}],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",null,null],[5,"size_of","","The size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"move_val_init","","Moves a value to an uninitialized memory location.",null,null],[5,"min_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"pref_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","The size of the referenced value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"type_name","","Gets a static string slice containing the name of a type.",null,{"inputs":[],"output":{"name":"str"}}],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This function will return the same value for a type regardless of whichever crate it is invoked in.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"init","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninit","","Creates an uninitialized value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"transmute","","Reinterprets the bits of a value of one type as another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires drop glue; returns `false` if the actual type provided for `T` implements `Copy`.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"offset","","Calculates the offset from a pointer.",null,null],[5,"arith_offset","","Calculates the offset from a pointer, potentially wrapping.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source and destination may not overlap.",null,null],[5,"copy","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source and destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::<T>()` bytes of memory starting at `dst` to `val`.",null,null],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`",null,null],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`",null,null],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`.",null,null],[5,"volatile_load","","Perform a volatile load from the `src` pointer. The stabilized version of this intrinsic is `std::ptr::read_volatile`.",null,null],[5,"volatile_store","","Perform a volatile store to the `dst` pointer. The stabilized version of this intrinsic is `std::ptr::write_volatile`.",null,null],[5,"sqrtf32","","Returns the square root of an `f32`",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sqrtf64","","Returns the square root of an `f64`",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powif32","","Raises an `f32` to an integer power.",null,{"inputs":[{"name":"f32"},{"name":"i32"}],"output":{"name":"f32"}}],[5,"powif64","","Raises an `f64` to an integer power.",null,{"inputs":[{"name":"f64"},{"name":"i32"}],"output":{"name":"f64"}}],[5,"sinf32","","Returns the sine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sinf64","","Returns the sine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"cosf32","","Returns the cosine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"cosf64","","Returns the cosine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powf32","","Raises an `f32` to an `f32` power.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"powf64","","Raises an `f64` to an `f64` power.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"expf32","","Returns the exponential of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"expf64","","Returns the exponential of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"exp2f32","","Returns 2 raised to the power of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"exp2f64","","Returns 2 raised to the power of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"logf32","","Returns the natural logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"logf64","","Returns the natural logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log10f32","","Returns the base 10 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log10f64","","Returns the base 10 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log2f32","","Returns the base 2 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log2f64","","Returns the base 2 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fmaf32","","Returns `a * b + c` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"fmaf64","","Returns `a * b + c` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"fabsf32","","Returns the absolute value of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"fabsf64","","Returns the absolute value of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"truncf32","","Returns the integer part of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"truncf64","","Returns the integer part of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception if the argument is not an integer.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception if the argument is not an integer.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"nearbyintf32","","Returns the nearest integer to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"nearbyintf64","","Returns the nearest integer to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fadd_fast","","Float addition that allows optimizations based on algebraic rules. May assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fsub_fast","","Float subtraction that allows optimizations based on algebraic rules. May assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fmul_fast","","Float multiplication that allows optimizations based on algebraic rules. May assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fdiv_fast","","Float division that allows optimizations based on algebraic rules. May assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"frem_fast","","Float remainder that allows optimizations based on algebraic rules. May assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"ctpop","","Returns the number of bits set in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"ctlz","","Returns the number of leading unset bits (zeroes) in an integer type `T`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"ctlz_nonzero","","Like `ctlz`, but extra-unsafe as it returns `undef` when given an `x` with value `0`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"cttz","","Returns the number of trailing unset bits (zeroes) in an integer type `T`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"cttz_nonzero","","Like `cttz`, but extra-unsafe as it returns `undef` when given an `x` with value `0`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"bswap","","Reverses the bytes in an integer type `T`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"add_with_overflow","","Performs checked integer addition. The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_add` method. For example, `std::u32::overflowing_add`",null,null],[5,"sub_with_overflow","","Performs checked integer subtraction The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_sub` method. For example, `std::u32::overflowing_sub`",null,null],[5,"mul_with_overflow","","Performs checked integer multiplication The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_mul` method. For example, `std::u32::overflowing_mul`",null,null],[5,"unchecked_div","","Performs an unchecked division, resulting in undefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"unchecked_rem","","Returns the remainder of an unchecked division, resulting in undefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"unchecked_shl","","Performs an unchecked left shift, resulting in undefined behavior when y < 0 or y >= N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"unchecked_shr","","Performs an unchecked right shift, resulting in undefined behavior when y < 0 or y >= N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_add","","Returns (a + b) mod 2N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_add` method. For example, `std::u32::wrapping_add`",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_sub","","Returns (a - b) mod 2N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_sub` method. For example, `std::u32::wrapping_sub`",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_mul","","Returns (a * b) mod 2N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_mul` method. For example, `std::u32::wrapping_mul`",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"discriminant_value","","Returns the value of the discriminant for the variant in 'v', cast to a `u64`; if `T` has no discriminant, returns 0.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"try","","Rust's \"try catch\" construct which invokes the function pointer `f` with the data pointer `data`.",null,null],[5,"align_offset","","Computes the byte offset that needs to be applied to `ptr` in order to make it aligned to `align`. If it is not possible to align `ptr`, the implementation returns `usize::max_value()`.",null,null],[5,"nontemporal_store","","Emits a `!nontemporal` store according to LLVM (see their docs). Probably will never become stable.",null,null],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[0,"iter","sgx_tstd","Composable external iteration.",null,null],[3,"Rev","sgx_tstd::iter","A double-ended iterator with the direction inverted.",null,null],[3,"Cloned","","An iterator that clones the elements of an underlying iterator.",null,null],[3,"Cycle","","An iterator that repeats endlessly.",null,null],[3,"StepBy","","An iterator for stepping iterators by a custom amount.",null,null],[3,"Chain","","An iterator that strings two iterators together.",null,null],[3,"Zip","","An iterator that iterates two other iterators simultaneously.",null,null],[3,"Map","","An iterator that maps the values of `iter` with `f`.",null,null],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`.",null,null],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`.",null,null],[3,"Enumerate","","An iterator that yields the current count and the element during iteration.",null,null],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next element.",null,null],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true.",null,null],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true.",null,null],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",null,null],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`.",null,null],[3,"Scan","","An iterator to maintain state while iterating another iterator.",null,null],[3,"FlatMap","","An iterator that maps each element to an iterator, and yields the elements of the produced iterators.",null,null],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator yields `None` once.",null,null],[3,"Inspect","","An iterator that calls a function with a reference to each element before yielding it.",null,null],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",17,null],[8,"Product","","Trait to represent types that can be created by multiplying elements of an iterator.",null,null],[10,"product","","Method which takes an iterator and generates `Self` from the elements by multiplying the items.",18,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[5,"once","","Creates an iterator that yields an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",19,null],[10,"next","","Advances the iterator and returns the next value.",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",19,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","Returns the `n`th element of the iterator.",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"step_by","","Creates an iterator starting at the same point, but stepping by the given amount at each iteration.",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stepby"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",19,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",19,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each element.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"for_each","","Calls a closure on each element of an iterator.",19,null],[11,"filter","","Creates an iterator which uses a closure to determine if an element should be yielded.",19,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as the next value.",19,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of the iterator without consuming it.",19,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip`]s elements based on a predicate.",19,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",19,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold`] that holds internal state and produces a new iterator.",19,{"inputs":[{"name":"self"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first [`None`].",19,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",19,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",19,null],[11,"try_fold","","An iterator method that applies a function as long as it returns successfully, producing a single, final value.",19,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","An iterator method that applies a function, producing a single, final value.",19,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",19,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",19,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its index.",19,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the specified function.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max_by","","Returns the element that gives the maximum value with respect to the specified comparison function.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the specified function.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by","","Returns the element that gives the minimum value with respect to the specified comparison function.",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator's direction.",19,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",19,null],[11,"cloned","","Creates an iterator which [`clone`]s all of its elements.",19,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",19,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",19,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",19,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",19,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",19,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of another.",19,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of another.",19,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically less than those of another.",19,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically less or equal to those of another.",19,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically greater than those of another.",19,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically greater than or equal to those of another.",19,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[3,"Repeat","","An iterator that repeats an element endlessly.",null,null],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[5,"empty","","Creates an iterator that yields nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[3,"Once","","An iterator that yields an element exactly once.",null,null],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the iterator is empty.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Sum","","Trait to represent types that can be created by summing up an iterator.",null,null],[10,"sum","","Method which takes an iterator and generates `Self` from the elements by \"summing up\" the items.",21,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[8,"TrustedLen","","An iterator that reports an accurate length using size_hint.",null,null],[3,"Empty","","An iterator that yields nothing.",null,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","Removes and returns an element from the end of the iterator.",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","This is the reverse version of [`try_fold()`]: it takes elements starting from the back of the iterator.",22,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","An iterator method that reduces the iterator's elements to a single, final value, starting from the back.",22,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"rfind","","Searches for an element of an iterator from the right that satisfies a predicate.",22,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Creates a value from an iterator.",23,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"steps_between","","Returns the number of steps between two step objects. The count is inclusive of `start` and exclusive of `end`.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[10,"replace_one","","Replaces this step with `1`, returning itself",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"replace_zero","","Replaces this step with `0`, returning itself",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"add_one","","Adds one to this step, returning the result",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sub_one","","Subtracts one to this step, returning the result",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"add_usize","","Add an usize, returning None on overflow",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[8,"FusedIterator","","An iterator that always continues to yield `None` when exhausted.",null,null],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",25,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",25,null],[10,"into_iter","","Creates an iterator from a value.",25,null],[0,"marker","sgx_tstd","Primitive traits and types representing basic properties of types.",null,null],[8,"Send","sgx_tstd::marker","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile time.",null,null],[8,"Unsize","","Types that can be \"unsized\" to a dynamically-sized type.",null,null],[8,"Copy","","Types whose values can be duplicated simply by copying bits.",null,null],[8,"Sync","","Types for which it is safe to share references between threads.",null,null],[3,"PhantomData","","Zero-sized type used to mark things that \"act like\" they own a `T`.",null,null],[0,"mem","sgx_tstd","Basic functions for dealing with memory.",null,null],[5,"forget","sgx_tstd::mem","Leaks a value: takes ownership and \"forgets\" about the value without running its destructor.",null,null],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the pointed-to value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the [ABI]-required minimum alignment of a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the [ABI]-required minimum alignment of a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"needs_drop","","Returns whether dropping values of type `T` matters.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"zeroed","","Creates a value whose bytes are all zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust's normal memory-initialization checks by pretending to produce a value of type `T`, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swaps the values at two mutable locations, without deinitializing either one.",null,null],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without deinitializing either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,null],[5,"transmute_copy","","Interprets `src` as having type `&U`, and then reads `src` without moving the contained value.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[3,"Discriminant","","Opaque type representing the discriminant of an enum.",null,null],[5,"discriminant","","Returns a value uniquely identifying the enum variant in `v`.",null,{"inputs":[{"name":"t"}],"output":{"name":"discriminant"}}],[19,"ManuallyDrop","","A wrapper to inhibit compiler from automatically calling `T`’s destructor.",null,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable, enabling further optimizations.",null,null],[5,"transmute","","Reinterprets the bits of a value of one type as another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[0,"ops","sgx_tstd","Overloadable operators.",null,null],[8,"Add","sgx_tstd::ops","The addition operator `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator.",26,null],[10,"add","","Performs the `+` operation.",26,null],[8,"BitOr","","The bitwise OR operator `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator.",27,null],[10,"bitor","","Performs the `|` operation.",27,null],[8,"Mul","","The multiplication operator `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator.",28,null],[10,"mul","","Performs the `*` operation.",28,null],[8,"Neg","","The unary negation operator `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator.",29,null],[10,"neg","","Performs the unary `-` operation.",29,null],[3,"Range","","A (half-open) range bounded inclusively below and exclusively above (`start..end`).",null,null],[12,"start","","The lower bound of the range (inclusive).",30,null],[12,"end","","The upper bound of the range (exclusive).",30,null],[8,"Try","","A trait for customizing the behavior of the `?` operator.",null,null],[16,"Ok","","The type of this value when viewed as successful.",31,null],[16,"Error","","The type of this value when viewed as failed.",31,null],[10,"into_result","","Applies the \"?\" operator. A return of `Ok(t)` means that the execution should continue normally, and the result of `?` is the value `t`. A return of `Err(e)` means that execution should branch to the innermost enclosing `catch`, or return from the function.",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"from_error","","Wrap an error value to construct the composite result. For example, `Result::Err(x)` and `Result::from_error(x)` are equivalent.",31,null],[10,"from_ok","","Wrap an OK value to construct the composite result. For example, `Result::Ok(x)` and `Result::from_ok(x)` are equivalent.",31,null],[3,"RangeToInclusive","","A range only bounded inclusively above (`..=end`).",null,null],[12,"end","","The upper bound of the range (inclusive)",32,null],[8,"RemAssign","","The remainder assignment operator `%=`.",null,null],[10,"rem_assign","","Performs the `%=` operation.",33,null],[8,"InPlace","","Specialization of `Place` trait supporting `PLACE <- EXPR`.",null,null],[16,"Owner","","`Owner` is the type of the end value of `PLACE <- EXPR`",34,null],[10,"finalize","","Converts self into the final value, shifting deallocation/cleanup responsibilities (if any remain), over to the returned instance of `Owner` and forgetting self.",34,null],[8,"BitAnd","","The bitwise AND operator `&`.",null,null],[16,"Output","","The resulting type after applying the `&` operator.",35,null],[10,"bitand","","Performs the `&` operation.",35,null],[8,"Sub","","The subtraction operator `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator.",36,null],[10,"sub","","Performs the `-` operation.",36,null],[8,"ShlAssign","","The left shift assignment operator `<<=`.",null,null],[10,"shl_assign","","Performs the `<<=` operation.",37,null],[8,"ShrAssign","","The right shift assignment operator `>>=`.",null,null],[10,"shr_assign","","Performs the `>>=` operation.",38,null],[8,"FnMut","","The version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","Performs the call operation.",39,null],[8,"FnOnce","","The version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",40,null],[10,"call_once","","Performs the call operation.",40,null],[8,"IndexMut","","Used for indexing operations (`container[index]`) in mutable contexts.",null,null],[10,"index_mut","","Performs the mutable indexing (`container[index]`) operation.",41,null],[8,"Placer","","Interface to implementations of  `PLACE <- EXPR`.",null,null],[16,"Place","","`Place` is the intermediate agent guarding the uninitialized state for `Data`.",42,null],[10,"make_place","","Creates a fresh place from `self`.",42,null],[8,"Shl","","The left shift operator `<<`.",null,null],[16,"Output","","The resulting type after applying the `<<` operator.",43,null],[10,"shl","","Performs the `<<` operation.",43,null],[8,"DivAssign","","The division assignment operator `/=`.",null,null],[10,"div_assign","","Performs the `/=` operation.",44,null],[3,"RangeTo","","A range only bounded exclusively above (`..end`).",null,null],[12,"end","","The upper bound of the range (exclusive).",45,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one, where unsizing can be performed on the pointee.",null,null],[8,"Generator","","The trait implemented by builtin generator types.",null,null],[16,"Yield","","The type of value this generator yields.",46,null],[16,"Return","","The type of value this generator returns.",46,null],[10,"resume","","Resumes the execution of this generator.",46,{"inputs":[{"name":"self"}],"output":{"name":"generatorstate"}}],[8,"SubAssign","","The subtraction assignment operator `-=`.",null,null],[10,"sub_assign","","Performs the `-=` operation.",47,null],[8,"BitXorAssign","","The bitwise XOR assignment operator `^=`.",null,null],[10,"bitxor_assign","","Performs the `^=` operation.",48,null],[8,"DerefMut","","Used for mutable dereferencing operations, like in `*v = 1;`.",null,null],[10,"deref_mut","","Mutably dereferences the value.",49,null],[3,"RangeInclusive","","An range bounded inclusively below and above (`start..=end`).",null,null],[12,"start","","The lower bound of the range (inclusive).",50,null],[12,"end","","The upper bound of the range (inclusive).",50,null],[8,"BitOrAssign","","The bitwise OR assignment operator `|=`.",null,null],[10,"bitor_assign","","Performs the `|=` operation.",51,null],[8,"Place","","Both `PLACE <- EXPR` and `box EXPR` desugar into expressions that allocate an intermediate \"place\" that holds uninitialized state.  The desugaring evaluates EXPR, and writes the result at the address returned by the `pointer` method of this trait.",null,null],[10,"pointer","","Returns the address where the input value will be written. Note that the data at this address is generally uninitialized, and thus one should use `ptr::write` for initializing it.",52,null],[8,"Index","","Used for indexing operations (`container[index]`) in immutable contexts.",null,null],[16,"Output","","The returned type after indexing.",53,null],[10,"index","","Performs the indexing (`container[index]`) operation.",53,null],[8,"MulAssign","","The multiplication assignment operator `*=`.",null,null],[10,"mul_assign","","Performs the `*=` operation.",54,null],[8,"AddAssign","","The addition assignment operator `+=`.",null,null],[10,"add_assign","","Performs the `+=` operation.",55,null],[4,"GeneratorState","","The result of a generator resumption.",null,null],[13,"Yielded","","The generator suspended with a value.",56,null],[13,"Complete","","The generator completed with a return value.",56,null],[8,"BitAndAssign","","The bitwise AND assignment operator `&=`.",null,null],[10,"bitand_assign","","Performs the `&=` operation.",57,null],[3,"RangeFull","","An unbounded range (`..`).",null,null],[8,"BoxPlace","","Specialization of `Place` trait supporting `box EXPR`.",null,null],[10,"make_place","","Creates a globally fresh place.",58,{"inputs":[],"output":{"name":"self"}}],[8,"Fn","","The version of the call operator that takes an immutable receiver.",null,null],[10,"call","","Performs the call operation.",59,null],[8,"Deref","","Used for immutable dereferencing operations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing.",60,null],[10,"deref","","Dereferences the value.",60,null],[8,"Not","","The unary logical negation operator `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator.",61,null],[10,"not","","Performs the unary `!` operation.",61,null],[8,"Rem","","The remainder operator `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator.",62,null],[10,"rem","","Performs the `%` operation.",62,null],[8,"Drop","","Used to run some code when a value goes out of scope. This is sometimes called a 'destructor'.",null,null],[10,"drop","","Executes the destructor for this type.",63,null],[3,"RangeFrom","","A range only bounded inclusively below (`start..`).",null,null],[12,"start","","The lower bound of the range (inclusive).",64,null],[8,"Div","","The division operator `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator.",65,null],[10,"div","","Performs the `/` operation.",65,null],[8,"Shr","","The right shift operator `>>`.",null,null],[16,"Output","","The resulting type after applying the `>>` operator.",66,null],[10,"shr","","Performs the `>>` operation.",66,null],[8,"Boxed","","Core trait for the `box EXPR` form.",null,null],[16,"Data","","The kind of data that is stored in this kind of box.",67,null],[16,"Place","","The place that will negotiate the storage of the data.",67,null],[10,"finalize","","Converts filled place into final owning value, shifting deallocation/cleanup responsibilities (if any remain), over to returned instance of `Self` and forgetting `filled`.",67,null],[8,"BitXor","","The bitwise XOR operator `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator.",68,null],[10,"bitxor","","Performs the `^` operation.",68,null],[0,"ptr","sgx_tstd","Raw, unsafe pointers, `*const T`, and `*mut T`.",null,null],[5,"drop_in_place","sgx_tstd::ptr","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"null","","Creates a null raw pointer.",null,null],[5,"null_mut","","Creates a null mutable raw pointer.",null,null],[5,"swap","","Swaps the values at two mutable locations of the same type, without deinitializing either.",null,null],[5,"swap_nonoverlapping","","Swaps a sequence of values at two mutable locations of the same type.",null,null],[5,"replace","","Replaces the value at `dest` with `src`, returning the old value, without dropping either.",null,null],[5,"read","","Reads the value from `src` without moving it. This leaves the memory in `src` unchanged.",null,null],[5,"read_unaligned","","Reads the value from `src` without moving it. This leaves the memory in `src` unchanged.",null,null],[5,"write","","Overwrites a memory location with the given value without reading or dropping the old value.",null,null],[5,"write_unaligned","","Overwrites a memory location with the given value without reading or dropping the old value.",null,null],[5,"read_volatile","","Performs a volatile read of the value from `src` without moving it. This leaves the memory in `src` unchanged.",null,null],[5,"write_volatile","","Performs a volatile write of a memory location with the given value without reading or dropping the old value.",null,null],[5,"eq","","Compare raw pointers for equality.",null,null],[3,"Unique","","A wrapper around a raw non-null `*mut T` that indicates that the possessor of this wrapper owns the referent. Useful for building abstractions like `Box<T>`, `Vec<T>`, `String`, and `HashMap<K, V>`.",null,null],[6,"Shared","","Previous name of `NonNull`.",null,null],[3,"NonNull","","`*mut T` but non-zero and covariant.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::<T>()` bytes of memory starting at `dst` to `val`.",null,null],[5,"copy","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source and destination may overlap.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source and destination may not overlap.",null,null],[0,"raw","sgx_tstd","Contains struct definitions for the layout of compiler built-in types.",null,null],[3,"TraitObject","sgx_tstd::raw","The representation of a trait object like `&SomeTrait`.",null,null],[12,"data","","",69,null],[12,"vtable","","",69,null],[0,"result","sgx_tstd","Error handling with the `Result` type.",null,null],[4,"Result","sgx_tstd::result","`Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).",null,null],[13,"Ok","","Contains the success value",70,null],[13,"Err","","Contains the error value",70,null],[3,"Iter","","An iterator over a reference to the [`Ok`] variant of a [`Result`].",null,null],[3,"IterMut","","An iterator over a mutable reference to the [`Ok`] variant of a [`Result`].",null,null],[3,"IntoIter","","An iterator over the value in a [`Ok`] variant of a [`Result`].",null,null],[0,"option","sgx_tstd","Optional values.",null,null],[4,"Option","sgx_tstd::option","The `Option` type. See the module level documentation for more.",null,null],[13,"None","","No value",71,null],[13,"Some","","Some value `T`",71,null],[3,"Iter","","An iterator over a reference to the [`Some`] variant of an [`Option`].",null,null],[3,"IterMut","","An iterator over a mutable reference to the [`Some`] variant of an [`Option`].",null,null],[3,"IntoIter","","An iterator over the value in [`Some`] variant of an [`Option`].",null,null],[3,"NoneError","","The error type that results from applying the try operator (`?`) to a `None` value. If you wish to allow `x?` (where `x` is an `Option<T>`) to be converted into your error type, you can implement `impl From<NoneError>` for `YourErrorType`. In that case, `x?` within a function that returns `Result<_, YourErrorType>` will translate a `None` value into an `Err` result.",null,null],[0,"isize","sgx_tstd","The pointer-sized signed integer type.",null,null],[17,"MIN","sgx_tstd::isize","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i8","sgx_tstd","The 8-bit signed integer type.",null,null],[17,"MIN","sgx_tstd::i8","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i16","sgx_tstd","The 16-bit signed integer type.",null,null],[17,"MIN","sgx_tstd::i16","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i32","sgx_tstd","The 32-bit signed integer type.",null,null],[17,"MIN","sgx_tstd::i32","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i64","sgx_tstd","The 64-bit signed integer type.",null,null],[17,"MIN","sgx_tstd::i64","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i128","sgx_tstd","The 128-bit signed integer type.",null,null],[17,"MIN","sgx_tstd::i128","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"usize","sgx_tstd","The pointer-sized unsigned integer type.",null,null],[17,"MIN","sgx_tstd::usize","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u8","sgx_tstd","The 8-bit unsigned integer type.",null,null],[17,"MIN","sgx_tstd::u8","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u16","sgx_tstd","The 16-bit unsigned integer type.",null,null],[17,"MIN","sgx_tstd::u16","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u32","sgx_tstd","The 32-bit unsigned integer type.",null,null],[17,"MIN","sgx_tstd::u32","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u64","sgx_tstd","The 64-bit unsigned integer type.",null,null],[17,"MIN","sgx_tstd::u64","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u128","sgx_tstd","The 128-bit unsigned integer type.",null,null],[17,"MIN","sgx_tstd::u128","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"boxed","sgx_tstd","A pointer type for heap allocation.",null,null],[17,"HEAP","sgx_tstd::boxed","A value that represents the heap. This is the default place that the `box` keyword allocates into when no place is supplied.",null,null],[3,"ExchangeHeapSingleton","","This the singleton type used solely for `boxed::HEAP`.",null,null],[3,"Box","","A pointer type for heap allocation.",null,null],[3,"IntermediateBox","","`IntermediateBox` represents uninitialized backing storage for `Box`.",null,null],[8,"FnBox","","`FnBox` is a version of the `FnOnce` intended for use with boxed closure objects. The idea is that where one would normally store a `Box<FnOnce()>` in a data structure, you should use `Box<FnBox()>`. The two traits behave essentially the same, except that a `FnBox` closure can only be called if it is boxed. (Note that `FnBox` may be deprecated in the future if `Box<FnOnce()>` closures become directly usable.)",null,null],[16,"Output","","",72,null],[10,"call_box","","",72,null],[0,"rc","sgx_tstd","Single-threaded reference-counting pointers. 'Rc' stands for 'Reference Counted'.",null,null],[3,"Rc","sgx_tstd::rc","A single-threaded reference-counting pointer. 'Rc' stands for 'Reference Counted'.",null,null],[3,"Weak","","`Weak` is a version of [`Rc`] that holds a non-owning reference to the managed value. The value is accessed by calling [`upgrade`] on the `Weak` pointer, which returns an [`Option`]`<`[`Rc`]`<T>>`.",null,null],[0,"borrow","sgx_tstd","A module for working with borrowed data.",null,null],[8,"ToOwned","sgx_tstd::borrow","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","",73,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",73,null],[11,"clone_into","","Uses borrowed data to replace owned data, usually by cloning.",73,null],[4,"Cow","","A clone-on-write smart pointer.",null,null],[13,"Borrowed","","Borrowed data.",74,null],[13,"Owned","","Owned data.",74,null],[8,"Borrow","","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",75,{"inputs":[{"name":"self"}],"output":{"name":"borrowed"}}],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",76,{"inputs":[{"name":"self"}],"output":{"name":"borrowed"}}],[0,"fmt","sgx_tstd","Utilities for formatting and printing `String`s.",null,null],[5,"format","sgx_tstd::fmt","The `format` function takes an [`Arguments`] struct and returns the resulting formatted string.",null,{"inputs":[{"name":"arguments"}],"output":{"name":"string"}}],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they should be formatted. A mutable version of this is passed to all formatting traits.",null,null],[8,"Octal","","`o` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"LowerHex","","`x` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[8,"LowerExp","","`e` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[3,"Arguments","","This structure represents a safely precompiled version of a format string and its arguments. This cannot be generated at runtime because it cannot safely be done, so no constructors are given and the fields are private to prevent modification.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[6,"Result","","The type returned by formatter methods.",null,null],[8,"Debug","","`?` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write succeeded.",81,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_char","","Writes a [`char`] into this writer, returning whether the write succeeded.",81,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_fmt","","Glue for usage of the [`write!`] macro with implementors of this trait.",81,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[5,"write","","The `write` function takes an output stream, and an `Arguments` struct that can be precompiled with the `format_args!` macro.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[8,"UpperHex","","`X` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Pointer","","`p` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Binary","","`b` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[8,"UpperExp","","`E` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[0,"slice","sgx_tstd","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[8,"SliceConcatExt","sgx_tstd::slice","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",87,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",87,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a given separator between each.",87,null],[10,"connect","","",87,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable slice is returned.",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size` elements at a time). When the slice len is not evenly divided by the chunk size, the last slice of the iteration will be the remainder.",null,null],[8,"SliceIndex","","A helper trait used for indexing operations.",null,null],[16,"Output","","The output type returned by methods.",88,null],[10,"get","","Returns a shared reference to the output at this location, if in bounds.",88,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[10,"get_mut","","Returns a mutable reference to the output at this location, if in bounds.",88,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[10,"get_unchecked","","Returns a shared reference to the output at this location, without performing any bounds checking.",88,null],[10,"get_unchecked_mut","","Returns a mutable reference to the output at this location, without performing any bounds checking.",88,null],[10,"index","","Returns a shared reference to the output at this location, panicking if out of bounds.",88,null],[10,"index_mut","","Returns a mutable reference to the output at this location, panicking if out of bounds.",88,null],[3,"RSplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`, starting from the end of the slice.",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`.",null,null],[3,"RSplit","","An iterator over subslices separated by elements that match a predicate function, starting from the end of the slice.",null,null],[5,"from_ref","","Converts a reference to T into a slice of length 1 (without copying).",null,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[3,"ExactChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size` elements at a time). When the slice len is not evenly divided by the chunk size, the last up to `chunk_size-1` elements will be omitted.",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[3,"ExactChunks","","An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a time).",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a time).",null,null],[5,"from_ref_mut","","Converts a reference to T into a slice of length 1 (without copying).",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"Iter","","Immutable slice iterator",null,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate function.",null,null],[0,"str","sgx_tstd","Unicode string slices.",null,null],[3,"EncodeUtf16","sgx_tstd::str","An iterator of [`u16`] over the string encoded as UTF-16.",null,null],[5,"from_boxed_utf8_unchecked","","Converts a boxed slice of bytes to a boxed string slice without checking that the string contains valid UTF-8.",null,{"inputs":[{"name":"box"}],"output":{"generics":["str"],"name":"box"}}],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","sgx_tstd::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",89,null],[10,"into_searcher","","Constructs the associated searcher from `self` and the `haystack` to search in.",89,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",89,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",89,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",89,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at `haystack[a..b]`.",90,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match of the pattern.",90,null],[13,"Done","","Expresses that every byte of the haystack has been visited, ending the iteration.",90,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlying string to be searched in",91,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",91,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()` and `next_match()`",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",92,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",92,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",92,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher` can be used for a `DoubleEndedIterator` implementation.",null,null],[3,"CharSearcher","","Associated type for `<char as Pattern<'a>>::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",null,null],[5,"from_utf8_unchecked_mut","sgx_tstd::str","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8; mutable version.",null,null],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a string.",null,null],[16,"Err","","The associated error which can be returned from parsing.",93,null],[10,"from_str","","Parses a string `s` to return a value of this type.",93,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[3,"Chars","","An iterator over the [`char`]s of a string slice.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8.",null,null],[3,"RSplitN","","Created with the method [`rsplitn`].",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator`].",null,null],[3,"RSplit","","Created with the method [`rsplit`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices`].",null,null],[3,"SplitN","","Created with the method [`splitn`].",null,null],[3,"LinesAny","","Created with the method [`lines_any`].",null,null],[5,"from_utf8_mut","","Converts a mutable slice of bytes to a mutable string slice.",null,null],[3,"RMatches","","Created with the method [`rmatches`].",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[3,"Bytes","","An iterator over the bytes of a string slice.",null,null],[3,"Matches","","Created with the method [`matches`].",null,null],[3,"SplitWhitespace","","An iterator over the non-whitespace substrings of a string, separated by any amount of whitespace.",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator`].",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices`].",null,null],[3,"Lines","","An iterator over the lines of a string, as string slices.",null,null],[3,"CharIndices","","An iterator over the [`char`]s of a string slice, and their positions.",null,null],[3,"Split","","Created with the method [`split`].",null,null],[3,"ParseBoolError","","An error returned when parsing a `bool` using [`from_str`] fails",null,null],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of [`u8`] as a string.",null,null],[0,"string","sgx_tstd","A UTF-8 encoded, growable string.",null,null],[3,"String","sgx_tstd::string","A UTF-8 encoded, growable string.",null,null],[3,"FromUtf8Error","","A possible error value when converting a `String` from a UTF-8 byte vector.",null,null],[3,"FromUtf16Error","","A possible error value when converting a `String` from a UTF-16 byte slice.",null,null],[4,"ParseError","","An error when parsing a `String`.",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",94,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[3,"Drain","","A draining iterator for `String`.",null,null],[0,"vec","sgx_tstd","A contiguous growable array type with heap-allocated contents, written `Vec<T>`.",null,null],[3,"Vec","sgx_tstd::vec","A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.",null,null],[3,"IntoIter","","An iterator that moves out of a vector.",null,null],[3,"Drain","","A draining iterator for `Vec<T>`.",null,null],[3,"PlaceBack","","A place for insertion at the back of a `Vec`.",null,null],[3,"Splice","","A splicing iterator for `Vec`.",null,null],[3,"DrainFilter","","An iterator produced by calling `drain_filter` on Vec.",null,null],[0,"char","sgx_tstd","A character type.",null,null],[3,"ToLowercase","sgx_tstd::char","Returns an iterator that yields the lowercase equivalent of a `char`.",null,null],[3,"ToUppercase","","Returns an iterator that yields the uppercase equivalent of a `char`.",null,null],[3,"DecodeUtf16","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[3,"DecodeUtf16Error","","An error that can be returned when decoding UTF-16 code points.",null,null],[5,"decode_utf16","","Create an iterator over the UTF-16 encoded code points in `iter`, returning unpaired surrogates as `Err`s.",null,{"inputs":[{"name":"i"}],"output":{"name":"decodeutf16"}}],[17,"REPLACEMENT_CHARACTER","","`U+FFFD REPLACEMENT CHARACTER` (�) is used in Unicode to represent a decoding error.",null,null],[3,"DecodeUtf8","","An iterator over an iterator of bytes of the characters the bytes represent as UTF-8",null,null],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,{"inputs":[{"name":"u32"}],"output":{"name":"char"}}],[5,"from_u32","","Converts a `u32` to a `char`.",null,{"inputs":[{"name":"u32"}],"output":{"generics":["char"],"name":"option"}}],[3,"EscapeDefault","","An iterator that yields the literal escape code of a `char`.",null,null],[17,"UNICODE_VERSION","","The version of Unicode that the Unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on.",null,null],[3,"ParseCharError","","An error which can be returned when parsing a char.",null,null],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"generics":["char"],"name":"option"}}],[3,"EscapeDebug","","An iterator that yields the literal escape code of a `char`.",null,null],[3,"CharTryFromError","","The error type returned when a conversion from u32 to char fails.",null,null],[3,"EscapeUnicode","","Returns an iterator that yields the hexadecimal Unicode escape of a character, as `char`s.",null,null],[3,"UnicodeVersion","","Represents a Unicode Version.",null,null],[12,"major","","Major version.",95,null],[12,"minor","","Minor version.",95,null],[12,"micro","","Micro (or Update) version.",95,null],[5,"decode_utf8","","Decodes an `Iterator` of bytes as UTF-8.",null,{"inputs":[{"name":"i"}],"output":{"name":"decodeutf8"}}],[17,"MAX","","The highest valid code point a `char` can have.",null,null],[5,"rsgx_cpuid","sgx_tstd","The rsgx_cpuid function performs the equivalent of a cpuid() function call or intrinisic which executes the CPUID instruction to query the host processor for the information about supported features.",null,{"inputs":[{"name":"i32"}],"output":{"generics":["sgx_cpuinfo_t"],"name":"sgxresult"}}],[5,"rsgx_cpuidex","","The rsgx_cpuidex function performs the equivalent of a cpuid_ex() function call or intrinisic which executes the CPUID instruction to query the host processor for the information about supported features.",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"generics":["sgx_cpuinfo_t"],"name":"sgxresult"}}],[0,"prelude","","",null,null],[0,"v1","sgx_tstd::prelude","",null,null],[0,"f32","sgx_tstd","This module provides constants which are specific to the implementation of the `f32` floating point data type.",null,null],[17,"RADIX","sgx_tstd::f32","The radix or base of the internal representation of `f32`.",null,null],[17,"MANTISSA_DIGITS","","Number of significant digits in base 2.",null,null],[17,"DIGITS","","Approximate number of significant digits in base 10.",null,null],[17,"EPSILON","","Difference between `1.0` and the next largest representable number.",null,null],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2 exponent.",null,null],[17,"MAX_EXP","","Maximum possible power of 2 exponent.",null,null],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent.",null,null],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent.",null,null],[17,"NAN","","Not a Number (NaN).",null,null],[17,"INFINITY","","Infinity (∞).",null,null],[17,"NEG_INFINITY","","Negative infinity (-∞).",null,null],[17,"MIN","","Smallest finite `f32` value.",null,null],[17,"MIN_POSITIVE","","Smallest positive normal `f32` value.",null,null],[17,"MAX","","Largest finite `f32` value.",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","sgx_tstd::f32::consts","Archimedes' constant (π)",null,null],[17,"FRAC_PI_2","","π/2",null,null],[17,"FRAC_PI_3","","π/3",null,null],[17,"FRAC_PI_4","","π/4",null,null],[17,"FRAC_PI_6","","π/6",null,null],[17,"FRAC_PI_8","","π/8",null,null],[17,"FRAC_1_PI","","1/π",null,null],[17,"FRAC_2_PI","","2/π",null,null],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",null,null],[17,"SQRT_2","","sqrt(2)",null,null],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",null,null],[17,"E","","Euler's number (e)",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2)",null,null],[17,"LN_10","","ln(10)",null,null],[0,"f64","sgx_tstd","This module provides constants which are specific to the implementation of the `f64` floating point data type.",null,null],[17,"RADIX","sgx_tstd::f64","The radix or base of the internal representation of `f64`.",null,null],[17,"MANTISSA_DIGITS","","Number of significant digits in base 2.",null,null],[17,"DIGITS","","Approximate number of significant digits in base 10.",null,null],[17,"EPSILON","","Difference between `1.0` and the next largest representable number.",null,null],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2 exponent.",null,null],[17,"MAX_EXP","","Maximum possible power of 2 exponent.",null,null],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent.",null,null],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent.",null,null],[17,"NAN","","Not a Number (NaN).",null,null],[17,"INFINITY","","Infinity (∞).",null,null],[17,"NEG_INFINITY","","Negative infinity (-∞).",null,null],[17,"MIN","","Smallest finite `f64` value.",null,null],[17,"MIN_POSITIVE","","Smallest positive normal `f64` value.",null,null],[17,"MAX","","Largest finite `f64` value.",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","sgx_tstd::f64::consts","Archimedes' constant (π)",null,null],[17,"FRAC_PI_2","","π/2",null,null],[17,"FRAC_PI_3","","π/3",null,null],[17,"FRAC_PI_4","","π/4",null,null],[17,"FRAC_PI_6","","π/6",null,null],[17,"FRAC_PI_8","","π/8",null,null],[17,"FRAC_1_PI","","1/π",null,null],[17,"FRAC_2_PI","","2/π",null,null],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",null,null],[17,"SQRT_2","","sqrt(2)",null,null],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",null,null],[17,"E","","Euler's number (e)",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2)",null,null],[17,"LN_10","","ln(10)",null,null],[0,"thread","sgx_tstd","Native threads.",null,null],[3,"LocalKey","sgx_tstd::thread","",null,null],[3,"LocalKeyInner","","",null,null],[3,"AccessError","","",null,null],[3,"SgxThreadId","","A unique identifier for a running thread.",null,null],[3,"SgxThread","","A handle to a thread.",null,null],[4,"LocalKeyState","","Indicator of the state of a thread local storage key.",null,null],[13,"Uninitialized","","All keys are in this state whenever a thread starts. Keys will transition to the `Valid` state once the first call to [`with`] happens and the initialization expression succeeds.",96,null],[13,"Valid","","Once a key has been accessed successfully, it will enter the `Valid` state. Keys in the `Valid` state will remain so until the thread exits, at which point the destructor will be run and the key will enter the `Destroyed` state.",96,null],[13,"Error","","if TLS data needs to be destructed, TCS policy must be Bound, The key will  enter the 'Error' state.",96,null],[5,"rsgx_thread_self","","The rsgx_thread_self function returns the unique thread identification.",null,{"inputs":[],"output":{"name":"sgx_thread_t"}}],[5,"rsgx_thread_equal","","The rsgx_thread_equal function compares two thread identifiers.",null,{"inputs":[{"name":"sgx_thread_t"},{"name":"sgx_thread_t"}],"output":{"name":"bool"}}],[5,"current","","Gets a handle to the thread that invokes it.",null,{"inputs":[],"output":{"name":"sgxthread"}}],[5,"panicking","","Determines whether the current thread is unwinding because of panic.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"park","","Blocks unless or until the current thread's token is made available.",null,{"inputs":[],"output":null}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"localkeystate"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",97,null],[11,"with","","Acquires a reference to the value in this TLS key.",97,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"state","","Query the current state of this key.",97,{"inputs":[{"name":"self"}],"output":{"name":"localkeystate"}}],[11,"try_with","","Acquires a reference to the value in this TLS key.",97,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["accesserror"],"name":"result"}}],[11,"new","","",99,{"inputs":[],"output":{"name":"localkeyinner"}}],[11,"get","","",99,{"inputs":[{"name":"self"}],"output":{"generics":["unsafecell"],"name":"option"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"sgxthreadid"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"self"},{"name":"sgxthreadid"}],"output":{"name":"bool"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"sgxthreadid"}}],[11,"new","","Generate a new unique thread ID.",100,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"sgxthread"}}],[11,"id","","Gets the thread's unique identifier.",101,{"inputs":[{"name":"self"}],"output":{"name":"sgxthreadid"}}],[11,"unpark","","Atomically makes the handle's token available if it is not already.",101,{"inputs":[{"name":"self"}],"output":null}],[0,"ascii","sgx_tstd","",null,null],[0,"collections","","Collection types.",null,null],[4,"Bound","sgx_tstd::collections","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",102,null],[13,"Excluded","","An exclusive bound.",102,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",102,null],[3,"BinaryHeap","","A priority queue implemented with a binary heap.",null,null],[3,"BTreeMap","","A map based on a B-Tree.",null,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[3,"LinkedList","","A doubly-linked list with owned nodes.",null,null],[3,"VecDeque","","A double-ended queue implemented with a growable ring buffer.",null,null],[0,"binary_heap","","A priority queue implemented with a binary heap.",null,null],[3,"BinaryHeap","sgx_tstd::collections::binary_heap","A priority queue implemented with a binary heap.",null,null],[3,"PeekMut","","Structure wrapping a mutable reference to the greatest item on a `BinaryHeap`.",null,null],[3,"Iter","","An iterator over the elements of a `BinaryHeap`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `BinaryHeap`.",null,null],[3,"Drain","","A draining iterator over the elements of a `BinaryHeap`.",null,null],[3,"BinaryHeapPlace","","",null,null],[0,"btree_map","sgx_tstd::collections","A map based on a B-Tree.",null,null],[3,"VacantEntry","sgx_tstd::collections::btree_map","A view into a vacant entry in a `BTreeMap`. It is part of the [`Entry`] enum.",null,null],[3,"Keys","","An iterator over the keys of a `BTreeMap`.",null,null],[3,"IterMut","","A mutable iterator over the entries of a `BTreeMap`.",null,null],[3,"Iter","","An iterator over the entries of a `BTreeMap`.",null,null],[3,"ValuesMut","","A mutable iterator over the values of a `BTreeMap`.",null,null],[3,"Values","","An iterator over the values of a `BTreeMap`.",null,null],[3,"OccupiedEntry","","A view into an occupied entry in a `BTreeMap`. It is part of the [`Entry`] enum.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant entry.",103,null],[13,"Occupied","","An occupied entry.",103,null],[3,"RangeMut","","A mutable iterator over a sub-range of entries in a `BTreeMap`.",null,null],[3,"IntoIter","","An owning iterator over the entries of a `BTreeMap`.",null,null],[3,"BTreeMap","","A map based on a B-Tree.",null,null],[3,"Range","","An iterator over a sub-range of entries in a `BTreeMap`.",null,null],[0,"btree_set","sgx_tstd::collections","A set based on a B-Tree.",null,null],[3,"Difference","sgx_tstd::collections::btree_set","A lazy iterator producing elements in the difference of `BTreeSet`s.",null,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[3,"Intersection","","A lazy iterator producing elements in the intersection of `BTreeSet`s.",null,null],[3,"Iter","","An iterator over the items of a `BTreeSet`.",null,null],[3,"Union","","A lazy iterator producing elements in the union of `BTreeSet`s.",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the symmetric difference of `BTreeSet`s.",null,null],[3,"IntoIter","","An owning iterator over the items of a `BTreeSet`.",null,null],[3,"Range","","An iterator over a sub-range of items in a `BTreeSet`.",null,null],[0,"linked_list","sgx_tstd::collections","A doubly-linked list with owned nodes.",null,null],[3,"LinkedList","sgx_tstd::collections::linked_list","A doubly-linked list with owned nodes.",null,null],[3,"Iter","","An iterator over the elements of a `LinkedList`.",null,null],[3,"IterMut","","A mutable iterator over the elements of a `LinkedList`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `LinkedList`.",null,null],[3,"DrainFilter","","An iterator produced by calling `drain_filter` on LinkedList.",null,null],[3,"FrontPlace","","A place for insertion at the front of a `LinkedList`.",null,null],[3,"BackPlace","","A place for insertion at the back of a `LinkedList`.",null,null],[0,"vec_deque","sgx_tstd::collections","A double-ended queue implemented with a growable ring buffer.",null,null],[3,"VecDeque","sgx_tstd::collections::vec_deque","A double-ended queue implemented with a growable ring buffer.",null,null],[3,"Iter","","An iterator over the elements of a `VecDeque`.",null,null],[3,"IterMut","","A mutable iterator over the elements of a `VecDeque`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `VecDeque`.",null,null],[3,"Drain","","A draining iterator over the elements of a `VecDeque`.",null,null],[3,"PlaceBack","","A place for insertion at the back of a `VecDeque`.",null,null],[3,"PlaceFront","","A place for insertion at the front of a `VecDeque`.",null,null],[0,"range","sgx_tstd::collections","Range syntax.",null,null],[8,"RangeArgument","sgx_tstd::collections::range","`RangeArgument` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[10,"start","","Start index bound.",104,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[10,"end","","End index bound.",104,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[3,"HashMap","sgx_tstd::collections","A hash map implemented with linear probing and Robin Hood bucket stealing.",null,null],[3,"HashSet","","A hash set implemented as a `HashMap` where the value is `()`.",null,null],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"new","","Creates an empty `HashMap`.",105,{"inputs":[],"output":{"generics":["randomstate"],"name":"hashmap"}}],[11,"with_capacity","","Creates an empty `HashMap` with the specified capacity.",105,{"inputs":[{"name":"usize"}],"output":{"generics":["randomstate"],"name":"hashmap"}}],[11,"with_hasher","","Creates an empty `HashMap` which will use the given hash builder to hash keys.",105,{"inputs":[{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hasher","","Creates an empty `HashMap` with the specified capacity, using `hash_builder` to hash the keys.",105,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"hasher","","Returns a reference to the map's [`BuildHasher`].",105,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",105,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `HashMap`. The collection may reserve more space to avoid frequent reallocations.",105,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",105,{"inputs":[{"name":"self"}],"output":null}],[11,"keys","","An iterator visiting all keys in arbitrary order. The iterator element type is `&'a K`.",105,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order. The iterator element type is `&'a V`.",105,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","An iterator visiting all values mutably in arbitrary order. The iterator element type is `&'a mut V`.",105,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order. The iterator element type is `(&'a K, &'a V)`.",105,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order, with mutable references to the values. The iterator element type is `(&'a K, &'a mut V)`.",105,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",105,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",105,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",105,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the allocated memory for reuse.",105,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory for reuse.",105,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",105,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",105,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",105,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",105,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",105,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"remove_entry","","Removes a key from the map, returning the stored key and value if the key was previously in the map.",105,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"retain","","Retains only the elements specified by the predicate.",105,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Creates an empty `HashMap<K, V, S>`, with the `Default` value for the hasher.",105,{"inputs":[],"output":{"name":"hashmap"}}],[11,"index","","",105,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value pair out of the map in arbitrary order. The map cannot be used after calling this.",105,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",105,{"inputs":[{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",105,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"extend","","",105,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"hashset"}}],[11,"new","","Creates an empty `HashSet`.",106,{"inputs":[],"output":{"generics":["randomstate"],"name":"hashset"}}],[11,"with_capacity","","Creates an empty `HashSet` with the specified capacity.",106,{"inputs":[{"name":"usize"}],"output":{"generics":["randomstate"],"name":"hashset"}}],[11,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash keys.",106,{"inputs":[{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hasher","","Creates an empty `HashSet` with with the specified capacity, using `hasher` to hash the keys.",106,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"hasher","","Returns a reference to the set's [`BuildHasher`].",106,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",106,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `HashSet`. The collection may reserve more space to avoid frequent reallocations.",106,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",106,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","An iterator visiting all elements in arbitrary order. The iterator element type is `&'a T`.",106,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"difference","","Visits the values representing the difference, i.e. the values that are in `self` but not in `other`.",106,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, i.e. the values that are in `self` or in `other` but not in both.",106,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, i.e. the values that are both in `self` and `other`.",106,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, i.e. all the values in `self` or `other`, without duplicates.",106,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",106,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",106,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the set, returning all elements in an iterator.",106,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Clears the set, removing all values.",106,{"inputs":[{"name":"self"}],"output":null}],[11,"contains","","Returns `true` if the set contains a value.",106,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",106,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`. This is equivalent to checking for an empty intersection.",106,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e. `other` contains at least all the values in `self`.",106,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e. `self` contains at least all the values in `other`.",106,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",106,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",106,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",106,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",106,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"retain","","Retains only the elements specified by the predicate.",106,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",106,{"inputs":[{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",106,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",106,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"default","","Creates an empty `HashSet<T, S>` with the `Default` value for the hasher.",106,{"inputs":[],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the set in arbitrary order. The set cannot be used after calling this.",106,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[0,"hash_map","","A hash map implemented with linear probing and Robin Hood bucket stealing.",null,null],[3,"HashMap","sgx_tstd::collections::hash_map","A hash map implemented with linear probing and Robin Hood bucket stealing.",null,null],[3,"Iter","","An iterator over the entries of a `HashMap`.",null,null],[3,"IterMut","","A mutable iterator over the entries of a `HashMap`.",null,null],[3,"IntoIter","","An owning iterator over the entries of a `HashMap`.",null,null],[3,"Keys","","An iterator over the keys of a `HashMap`.",null,null],[3,"Values","","An iterator over the values of a `HashMap`.",null,null],[3,"Drain","","A draining iterator over the entries of a `HashMap`.",null,null],[3,"ValuesMut","","A mutable iterator over the values of a `HashMap`.",null,null],[3,"OccupiedEntry","","A view into an occupied entry in a `HashMap`. It is part of the [`Entry`] enum.",null,null],[3,"VacantEntry","","A view into a vacant entry in a `HashMap`. It is part of the [`Entry`] enum.",null,null],[3,"EntryPlace","","A place for insertion to a `Entry`.",null,null],[3,"RandomState","","`RandomState` is the default state for [`HashMap`] types.",null,null],[3,"DefaultHasher","","The default [`Hasher`] used by [`RandomState`].",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Occupied","","An occupied entry.",107,null],[13,"Vacant","","A vacant entry.",107,null],[0,"hash_set","sgx_tstd::collections","A hash set implemented as a `HashMap` where the value is `()`.",null,null],[3,"HashSet","sgx_tstd::collections::hash_set","A hash set implemented as a `HashMap` where the value is `()`.",null,null],[3,"Iter","","An iterator over the items of a `HashSet`.",null,null],[3,"IntoIter","","An owning iterator over the items of a `HashSet`.",null,null],[3,"Drain","","A draining iterator over the items of a `HashSet`.",null,null],[3,"Intersection","","A lazy iterator producing elements in the intersection of `HashSet`s.",null,null],[3,"Difference","","A lazy iterator producing elements in the difference of `HashSet`s.",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the symmetric difference of `HashSet`s.",null,null],[3,"Union","","A lazy iterator producing elements in the union of `HashSet`s.",null,null],[0,"env","sgx_tstd","Inspection and manipulation of the process's environment.",null,null],[3,"Vars","sgx_tstd::env","An iterator over a snapshot of the environment variables of this process.",null,null],[3,"VarsOs","","An iterator over a snapshot of the environment variables of this process.",null,null],[3,"SplitPaths","","An iterator that splits an environment variable into paths according to platform-specific conventions.",null,null],[3,"JoinPathsError","","The error type for operations on the `PATH` variable. Possibly returned from the [`env::join_paths`] function.",null,null],[4,"VarError","","The error type for operations interacting with environment variables. Possibly returned from the [`env::var`] function.",null,null],[13,"NotPresent","","The specified environment variable was not present in the current process's environment.",108,null],[13,"NotUnicode","","The specified environment variable was found, but it did not contain valid unicode data. The found data is returned as a payload of this variant.",108,null],[5,"vars","","Returns an iterator of (variable, value) pairs of strings, for all the environment variables of the current process.",null,{"inputs":[],"output":{"name":"vars"}}],[5,"vars_os","","Returns an iterator of (variable, value) pairs of OS strings, for all the environment variables of the current process.",null,{"inputs":[],"output":{"name":"varsos"}}],[5,"var","","Fetches the environment variable `key` from the current process.",null,{"inputs":[{"name":"k"}],"output":{"generics":["string","varerror"],"name":"result"}}],[5,"var_os","","Fetches the environment variable `key` from the current process, returning [`None`] if the variable isn't set.",null,{"inputs":[{"name":"k"}],"output":{"generics":["osstring"],"name":"option"}}],[5,"set_var","","Sets the environment variable `k` to the value `v` for the currently running process.",null,{"inputs":[{"name":"k"},{"name":"v"}],"output":null}],[5,"remove_var","","Removes an environment variable from the environment of the currently running process.",null,{"inputs":[{"name":"k"}],"output":null}],[5,"split_paths","","Parses input according to platform conventions for the `PATH` environment variable.",null,{"inputs":[{"name":"t"}],"output":{"name":"splitpaths"}}],[5,"join_paths","","Joins a collection of [`Path`]s appropriately for the `PATH` environment variable.",null,{"inputs":[{"name":"i"}],"output":{"generics":["osstring","joinpathserror"],"name":"result"}}],[0,"consts","","Constants associated with the current target",null,null],[17,"ARCH","sgx_tstd::env::consts","A string describing the architecture of the CPU that is currently in use.",null,null],[17,"FAMILY","","The family of the operating system. Example value is `unix`.",null,null],[17,"OS","","A string describing the specific operating system in use. Example value is `linux`.",null,null],[17,"DLL_PREFIX","","Specifies the filename prefix used for shared libraries on this platform. Example value is `lib`.",null,null],[17,"DLL_SUFFIX","","Specifies the filename suffix used for shared libraries on this platform. Example value is `.so`.",null,null],[17,"DLL_EXTENSION","","Specifies the file extension used for shared libraries on this platform that goes after the dot. Example value is `so`.",null,null],[17,"EXE_SUFFIX","","Specifies the filename suffix used for executable binaries on this platform. Example value is `.exe`.",null,null],[17,"EXE_EXTENSION","","Specifies the file extension, if any, used for executable binaries on this platform. Example value is `exe`.",null,null],[11,"next","sgx_tstd::env","",109,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",110,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"self"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"varerror"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",108,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",111,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"option"}}],[11,"size_hint","","",111,null],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",112,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"error","sgx_tstd","",null,null],[8,"Error","sgx_tstd::error","Base functionality for all errors in Rust.",null,null],[10,"description","","A short description of the error.",113,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","The lower-level cause of this error, if any.",113,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"type_id","","Get the `TypeId` of `self`",113,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[11,"from","sgx_tstd::boxed","",114,{"inputs":[{"name":"e"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",114,{"inputs":[{"name":"e"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",114,{"inputs":[{"name":"string"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",114,{"inputs":[{"name":"string"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",114,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",114,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",114,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",114,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"generics":["error"],"name":"box"}}],[11,"description","sgx_tstd::str","",115,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",116,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","sgx_tstd::string","",117,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",118,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",119,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","sgx_tstd::char","",120,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","sgx_tstd::boxed","",114,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",114,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"description","sgx_tstd::fmt","",121,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","sgx_tstd::cell","",122,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",123,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","sgx_tstd::char","",124,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",125,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","sgx_tstd::convert","",126,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is","sgx_tstd::error","Returns true if the boxed type is the same as `T`",113,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or `None` if it isn't.",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or `None` if it isn't.",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",113,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",113,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",113,{"inputs":[{"name":"box"}],"output":{"generics":["box","box"],"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",113,{"inputs":[{"name":"box"}],"output":{"generics":["box","box"],"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",113,{"inputs":[{"name":"box"}],"output":{"generics":["box","box"],"name":"result"}}],[0,"ffi","sgx_tstd","Utilities related to FFI bindings.",null,null],[3,"CString","sgx_tstd::ffi","A type representing an owned C-compatible string",null,null],[3,"CStr","","Representation of a borrowed C string.",null,null],[3,"NulError","","An error returned from `CString::new` to indicate that a nul byte was found in the vector provided.",null,null],[3,"IntoStringError","","An error returned from `CString::into_string` to indicate that a UTF-8 error was encountered during the conversion.",null,null],[3,"FromBytesWithNulError","","An error returned from `CStr::from_bytes_with_nul` to indicate that a nul byte was found too early in the slice provided or one wasn't found at all.",null,null],[3,"OsString","","A type that can represent owned, mutable platform-native strings, but is cheaply inter-convertible with Rust strings.",null,null],[3,"OsStr","","Slices into OS strings (see [`OsString`]).",null,null],[11,"description","","",127,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",128,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",129,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",129,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"osstring"}}],[11,"new","","Constructs a new empty `OsString`.",130,{"inputs":[],"output":{"name":"osstring"}}],[11,"as_os_str","","Converts to an [`OsStr`] slice.",130,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"into_string","","Converts the `OsString` into a [`String`] if it contains valid Unicode data.",130,{"inputs":[{"name":"self"}],"output":{"generics":["string","osstring"],"name":"result"}}],[11,"push","","Extends the string with the given [`&OsStr`] slice.",130,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"with_capacity","","Creates a new `OsString` with the given capacity.",130,{"inputs":[{"name":"usize"}],"output":{"name":"osstring"}}],[11,"clear","","Truncates the `OsString` to zero length.",130,{"inputs":[{"name":"self"}],"output":null}],[11,"capacity","","Returns the capacity this `OsString` can hold without reallocating.",130,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more capacity to be inserted in the given `OsString`.",130,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more capacity to be inserted in the given `OsString`. Does nothing if the capacity is already sufficient.",130,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the `OsString` to match its length.",130,{"inputs":[{"name":"self"}],"output":null}],[11,"into_boxed_os_str","","Converts this `OsString` into a boxed `OsStr`.",130,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"box"}}],[11,"from","","",130,{"inputs":[{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",130,{"inputs":[{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",130,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"osstr"}}],[11,"deref","","",130,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"default","","Constructs an empty `OsString`.",130,{"inputs":[],"output":{"name":"osstring"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",130,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",130,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",130,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",130,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"le","","",130,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"gt","","",130,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"ge","","",130,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",130,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",130,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"ordering"}}],[11,"hash","","",130,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"new","","Coerces into an `OsStr` slice.",131,{"inputs":[{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a [`&str`] slice if the `OsStr` is valid Unicode.",131,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"to_string_lossy","","Converts an `OsStr` to a [`Cow`]`<`[`str`]`>`.",131,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"cow"}}],[11,"to_os_string","","Copies the slice into an owned [`OsString`].",131,{"inputs":[{"name":"self"}],"output":{"name":"osstring"}}],[11,"is_empty","","Checks whether the `OsStr` is empty.",131,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of this `OsStr`.",131,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_os_string","","Converts a `Box<OsStr>` into an `OsString` without copying or allocating.",131,{"inputs":[{"generics":["osstr"],"name":"box"}],"output":{"name":"osstring"}}],[11,"from","sgx_tstd::boxed","",114,{"inputs":[{"name":"osstr"}],"output":{"generics":["osstr"],"name":"box"}}],[11,"from","sgx_tstd::ffi","",130,{"inputs":[{"generics":["osstr"],"name":"box"}],"output":{"name":"osstring"}}],[11,"from","sgx_tstd::boxed","",114,{"inputs":[{"name":"osstring"}],"output":{"generics":["osstr"],"name":"box"}}],[11,"from","sgx_tstd::rc","",132,{"inputs":[{"name":"osstring"}],"output":{"generics":["osstr"],"name":"rc"}}],[11,"from","","",132,{"inputs":[{"name":"osstr"}],"output":{"generics":["osstr"],"name":"rc"}}],[11,"default","sgx_tstd::boxed","",114,{"inputs":[],"output":{"generics":["osstr"],"name":"box"}}],[11,"eq","sgx_tstd::ffi","",131,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",131,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",131,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"le","","",131,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"gt","","",131,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"ge","","",131,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",131,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",131,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"ordering"}}],[11,"eq","","",130,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",130,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",131,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",130,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",130,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","sgx_tstd::borrow","",74,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::ffi","",131,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","sgx_tstd::borrow","",74,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","sgx_tstd::ffi","",131,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","sgx_tstd::borrow","",74,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",74,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::ffi","",130,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","sgx_tstd::borrow","",74,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","sgx_tstd::ffi","",130,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",131,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",130,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"to_owned","","",131,{"inputs":[{"name":"self"}],"output":{"name":"osstring"}}],[11,"clone_into","","",131,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":null}],[11,"as_ref","","",131,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"as_ref","","",130,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"as_ref","sgx_tstd::string","",133,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[0,"sgxfs","sgx_tstd","Filesystem manipulation operations.",null,null],[3,"SgxFile","sgx_tstd::sgxfs","A reference to an open file on the filesystem.",null,null],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",null,null],[5,"read","","Read the entire contents of a file into a bytes vector.",null,{"inputs":[{"name":"p"}],"output":{"generics":["vec"],"name":"result"}}],[5,"read_string","","Read the entire contents of a file into a string.",null,{"inputs":[{"name":"p"}],"output":{"generics":["string"],"name":"result"}}],[5,"write","","Write a slice as the entire contents of a file.",null,{"inputs":[{"name":"p"},{"name":"c"}],"output":{"name":"result"}}],[5,"remove","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"export_auto_key","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["sgx_key_128bit_t"],"name":"result"}}],[5,"import_auto_key","","",null,{"inputs":[{"name":"p"},{"name":"sgx_key_128bit_t"}],"output":{"name":"result"}}],[5,"copy","","Copies the contents of one file to another.  This function will overwrite the contents of `to`.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"generics":["u64"],"name":"result"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"openoptions"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"open","","Attempts to open a file in read-only mode.",135,{"inputs":[{"name":"p"}],"output":{"generics":["sgxfile"],"name":"result"}}],[11,"create","","Opens a file in write-only mode.",135,{"inputs":[{"name":"p"}],"output":{"generics":["sgxfile"],"name":"result"}}],[11,"open_ex","","",135,{"inputs":[{"name":"p"},{"name":"sgx_key_128bit_t"}],"output":{"generics":["sgxfile"],"name":"result"}}],[11,"create_ex","","",135,{"inputs":[{"name":"p"},{"name":"sgx_key_128bit_t"}],"output":{"generics":["sgxfile"],"name":"result"}}],[11,"is_eof","","",135,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clearerr","","",135,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_cache","","",135,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",135,null],[11,"initializer","","",135,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"write","","",135,null],[11,"flush","","",135,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"seek","","",135,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["u64"],"name":"result"}}],[11,"new","","Creates a blank new set of options ready for configuration.",134,{"inputs":[],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",134,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"write","","Sets the option for write access.",134,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"append","","Sets the option for the append mode.",134,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"update","","Sets the option for update a previous file.",134,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"binary","","Sets the option for binary a file.",134,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"open","","Opens a file at `path` with the options specified by `self`.",134,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["sgxfile"],"name":"result"}}],[11,"open_ex","","",134,{"inputs":[{"name":"self"},{"name":"p"},{"name":"sgx_key_128bit_t"}],"output":{"generics":["sgxfile"],"name":"result"}}],[0,"io","sgx_tstd","",null,null],[3,"BufReader","sgx_tstd::io","The `BufReader` struct adds buffering to any reader.",null,null],[3,"BufWriter","","Wraps a writer and buffers its output.",null,null],[3,"LineWriter","","Wraps a writer and buffers output to it, flushing whenever a newline (`0x0a`, `'\\n'`) is detected.",null,null],[3,"IntoInnerError","","An error returned by `into_inner` which combines an error that happened while writing out the buffer, and the buffered writer object which may be used to recover from the condition.",null,null],[3,"Cursor","","A `Cursor` wraps another type and provides it with a [`Seek`] implementation.",null,null],[3,"Error","","The error type for I/O operations of the `Read`, `Write`, `Seek`, and associated traits.",null,null],[3,"Sink","","A writer which will move data into the void.",null,null],[3,"Empty","","A reader which is always at EOF.",null,null],[3,"Repeat","","A reader which yields one byte over and over and over and over and over and...",null,null],[3,"Lazy","","",null,null],[3,"Stdin","","A handle to the standard input stream of a process.",null,null],[3,"Stdout","","A handle to the global standard output stream of the current process.",null,null],[3,"Stderr","","A handle to the standard error stream of a process.",null,null],[3,"StdoutLock","","A locked reference to the `Stdout` handle.",null,null],[3,"StderrLock","","A locked reference to the `Stderr` handle.",null,null],[3,"StdinLock","","A locked reference to the `Stdin` handle.",null,null],[3,"Initializer","","A type used to conditionally initialize buffers passed to `Read` methods.",null,null],[3,"Chain","","Adaptor to chain together two readers.",null,null],[3,"Take","","Reader adaptor which limits the bytes read from an underlying reader.",null,null],[3,"Bytes","","An iterator over `u8` values of a reader.",null,null],[3,"Chars","","An iterator over the `char`s of a reader.",null,null],[3,"Split","","An iterator over the contents of an instance of `BufRead` split on a particular byte.",null,null],[3,"Lines","","An iterator over the lines of an instance of `BufRead`.",null,null],[4,"ErrorKind","","A list specifying general categories of I/O error.",null,null],[13,"NotFound","","An entity was not found, often a file.",136,null],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",136,null],[13,"ConnectionRefused","","The connection was refused by the remote server.",136,null],[13,"ConnectionReset","","The connection was reset by the remote server.",136,null],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",136,null],[13,"NotConnected","","The network operation failed because it was not connected yet.",136,null],[13,"AddrInUse","","A socket address could not be bound because the address is already in use elsewhere.",136,null],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not local.",136,null],[13,"BrokenPipe","","The operation failed because a pipe was closed.",136,null],[13,"AlreadyExists","","An entity already exists, often a file.",136,null],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was requested to not occur.",136,null],[13,"InvalidInput","","A parameter was incorrect.",136,null],[13,"InvalidData","","Data not valid for the operation were encountered.",136,null],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",136,null],[13,"WriteZero","","An error returned when an operation could not be completed because a call to [`write`] returned [`Ok(0)`].",136,null],[13,"Interrupted","","This operation was interrupted.",136,null],[13,"Other","","Any I/O error not part of this list.",136,null],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely.",136,null],[13,"SgxError","","SGX error status",136,null],[4,"SeekFrom","","Enumeration of possible methods to seek within an I/O object.",null,null],[13,"Start","","Set the offset to the provided number of bytes.",137,null],[13,"End","","Set the offset to the size of this object plus the specified number of bytes.",137,null],[13,"Current","","Set the offset to the current position plus the specified number of bytes.",137,null],[4,"CharsError","","An enumeration of possible errors that can be generated from the `Chars` adapter.",null,null],[13,"NotUtf8","","Variant representing that the underlying stream was read successfully but it did not contain valid utf8 data.",138,null],[13,"Other","","Variant representing that an I/O error occurred.",138,null],[5,"copy","","Copies the entire contents of a reader into a writer.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"generics":["u64"],"name":"result"}}],[5,"sink","","Creates an instance of a writer which will successfully consume all data.",null,{"inputs":[],"output":{"name":"sink"}}],[5,"empty","","Constructs a new handle to an empty reader.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"repeat","","Creates an instance of a reader that infinitely repeats one byte.",null,{"inputs":[{"name":"u8"}],"output":{"name":"repeat"}}],[5,"errno","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"set_errno","","",null,{"inputs":[{"name":"i32"}],"output":null}],[5,"error_string","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"string"}}],[5,"stdin","","Constructs a new handle to the standard input of the current process.",null,{"inputs":[],"output":{"name":"stdin"}}],[5,"stdout","","Constructs a new handle to the standard output of the current process.",null,{"inputs":[],"output":{"name":"stdout"}}],[5,"stderr","","Constructs a new handle to the standard error of the current process.",null,{"inputs":[],"output":{"name":"stderr"}}],[5,"_print","","",null,{"inputs":[{"name":"arguments"}],"output":null}],[0,"prelude","","The I/O Prelude",null,null],[11,"new","","",139,null],[11,"get","","",139,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[11,"new","","Creates a new `BufReader` with a default buffer capacity.",140,{"inputs":[{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity.",140,{"inputs":[{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",140,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Gets a mutable reference to the underlying reader.",140,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"is_empty","","Returns `true` if there are no bytes in the internal buffer.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",140,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"seek_relative","","Seeks relative to the current position. If the new position lies within the buffer, the buffer will not be flushed, allowing for more efficient seeks. This method does not return the location of the underlying reader, so the caller must track this information themselves if it is required.",140,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"read","","",140,null],[11,"initializer","","",140,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"fill_buf","","",140,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",140,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",140,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["u64"],"name":"result"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `BufWriter` with a default buffer capacity.",142,{"inputs":[{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity.",142,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",142,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",142,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",142,{"inputs":[{"name":"self"}],"output":{"generics":["intoinnererror"],"name":"result"}}],[11,"write","","",142,null],[11,"flush","","",142,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",142,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["u64"],"name":"result"}}],[11,"drop","","",142,{"inputs":[{"name":"self"}],"output":null}],[11,"error","","Returns the error which caused the call to `into_inner()` to fail.",141,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"into_inner","","Returns the buffered writer instance which generated the error.",141,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"from","","",143,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","","",141,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `LineWriter`.",144,{"inputs":[{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal buffer.",144,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",144,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",144,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",144,{"inputs":[{"name":"self"}],"output":{"generics":["intoinnererror"],"name":"result"}}],[11,"write","","",144,null],[11,"flush","","",144,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",145,{"inputs":[{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",145,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",145,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",145,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"position","","Returns the current position of this cursor.",145,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"set_position","","Sets the position of this cursor.",145,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"seek","","",145,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read","","",145,null],[11,"read_exact","","",145,null],[11,"initializer","","",145,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"fill_buf","","",145,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",145,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write","","",145,null],[11,"flush","","",145,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",145,null],[11,"flush","","",145,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",145,null],[11,"flush","","",145,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",145,null],[11,"flush","","",145,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",136,null],[11,"cmp","","",136,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"ordering"}}],[11,"eq","","",136,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",136,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"from","","",143,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"from","","",143,{"inputs":[{"name":"sgx_status_t"}],"output":{"name":"error"}}],[11,"new","","Creates a new I/O error from a known kind of error as well as an arbitrary error payload.",143,{"inputs":[{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",143,{"inputs":[],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",143,{"inputs":[{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",143,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[11,"from_sgx_error","","Creates a new instance of an `Error` from a particular SGX error status.",143,{"inputs":[{"name":"sgx_status_t"}],"output":{"name":"error"}}],[11,"raw_sgx_error","","Returns the SGX error that this error represents (if any).",143,{"inputs":[{"name":"self"}],"output":{"generics":["sgx_status_t"],"name":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",143,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error (if any).",143,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",143,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",143,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",143,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",143,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"read","sgx_tstd::boxed","",114,null],[11,"initializer","","",114,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"read_to_end","","",114,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_to_string","","",114,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_exact","","",114,null],[11,"write","","",114,null],[11,"flush","","",114,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_all","","",114,null],[11,"write_fmt","","",114,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"seek","","",114,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["u64"],"name":"result"}}],[11,"fill_buf","","",114,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",114,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"read_until","","",114,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"vec"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_line","","",114,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize"],"name":"result"}}],[11,"write","sgx_tstd::vec","",146,null],[11,"write_all","","",146,null],[11,"flush","","",146,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","sgx_tstd::io","",147,null],[11,"initializer","","",147,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"fill_buf","","",147,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",147,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",148,null],[11,"initializer","","",148,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",149,null],[11,"flush","","",149,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"lock","","Locks this handle to the standard input stream, returning a readable guard.",150,{"inputs":[{"name":"self"}],"output":{"name":"stdinlock"}}],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",150,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize"],"name":"result"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",150,null],[11,"initializer","","",150,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"read_to_end","","",150,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_to_string","","",150,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_exact","","",150,null],[11,"read","","",151,null],[11,"initializer","","",151,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"fill_buf","","",151,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",151,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"lock","","Locks this handle to the standard output stream, returning a writable guard.",152,{"inputs":[{"name":"self"}],"output":{"name":"stdoutlock"}}],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",152,null],[11,"flush","","",152,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_all","","",152,null],[11,"write_fmt","","",152,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",153,null],[11,"flush","","",153,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"lock","","Locks this handle to the standard error stream, returning a writable guard.",154,{"inputs":[{"name":"self"}],"output":{"name":"stderrlock"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",154,null],[11,"flush","","",154,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_all","","",154,null],[11,"write_fmt","","",154,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",155,null],[11,"flush","","",155,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Result","","A specialized `Result` type for I/O operations.",null,null],[8,"Read","","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning how many bytes were read.",156,null],[11,"initializer","","Determines if this `Read`er can work with buffers of uninitialized memory.",156,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",156,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, appending them to `buf`.",156,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",156,null],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",156,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",156,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",156,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",156,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",156,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",157,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered contents reach their destination.",157,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",157,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error encountered.",157,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",157,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Seek","","The `Seek` trait provides a cursor which can be moved within a stream of bytes.",null,null],[10,"seek","","Seek to an offset, in bytes, in a stream.",158,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["u64"],"name":"result"}}],[8,"BufRead","","A `BufRead` is a type of `Read`er which has an internal buffer, allowing it to perform extra ways of reading.",null,null],[10,"fill_buf","","Fills the internal buffer of this object, returning the buffer contents.",159,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from the buffer, so they should no longer be returned in calls to `read`.",159,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"read_until","","Read all bytes into `buf` until the delimiter `byte` or EOF is reached.",159,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"vec"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_line","","Read all bytes until a newline (the 0xA byte) is reached, and append them to the provided buffer.",159,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize"],"name":"result"}}],[11,"split","","Returns an iterator over the contents of this reader split on the byte `byte`.",159,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"split"}}],[11,"lines","","Returns an iterator over the lines of this reader.",159,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"zeroing","","Returns a new `Initializer` which will zero out buffers.",160,{"inputs":[],"output":{"name":"initializer"}}],[11,"nop","","Returns a new `Initializer` which will not zero out buffers.",160,{"inputs":[],"output":{"name":"initializer"}}],[11,"should_initialize","","Indicates if a buffer should be initialized.",160,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"initialize","","Initializes a buffer if necessary.",160,null],[11,"eq","","",137,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"ne","","",137,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"seekfrom"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Consumes the `Chain`, returning the wrapped readers.",161,null],[11,"get_ref","","Gets references to the underlying readers in this `Chain`.",161,null],[11,"get_mut","","Gets mutable references to the underlying readers in this `Chain`.",161,null],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",161,null],[11,"initializer","","",161,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"fill_buf","","",161,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",161,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"limit","","Returns the number of bytes that can be read before this instance will return EOF.",162,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"set_limit","","Sets the number of bytes that can be read before this instance will return EOF. This is the same as constructing a new `Take` instance, so the amount of bytes read and the previous limit value don't matter when calling this method.",162,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"into_inner","","Consumes the `Take`, returning the wrapped reader.",162,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying reader.",162,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying reader.",162,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read","","",162,null],[11,"initializer","","",162,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"fill_buf","","",162,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",162,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",163,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",164,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"description","","",138,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",138,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",165,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",166,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[0,"net","sgx_tstd","Networking primitives for TCP/UDP communication.",null,null],[3,"Ipv4Addr","sgx_tstd::net","An IPv4 address.",null,null],[3,"Ipv6Addr","","An IPv6 address.",null,null],[3,"SocketAddrV4","","An IPv4 socket address.",null,null],[3,"SocketAddrV6","","An IPv6 socket address.",null,null],[3,"AddrParseError","","An error which can be returned when parsing an IP address or a socket address.",null,null],[4,"IpAddr","","An IP address, either IPv4 or IPv6.",null,null],[13,"V4","","An IPv4 address.",167,null],[13,"V6","","An IPv6 address.",167,null],[4,"Ipv6MulticastScope","","",null,null],[13,"InterfaceLocal","","",168,null],[13,"LinkLocal","","",168,null],[13,"RealmLocal","","",168,null],[13,"AdminLocal","","",168,null],[13,"SiteLocal","","",168,null],[13,"OrganizationLocal","","",168,null],[13,"Global","","",168,null],[4,"SocketAddr","","An internet socket address, either IPv4 or IPv6.",null,null],[13,"V4","","An IPv4 socket address.",169,null],[13,"V6","","An IPv6 socket address.",169,null],[4,"Shutdown","","Possible values which can be passed to the [`shutdown`] method of",null,null],[13,"Read","","The reading portion of the [`TcpStream`] should be shut down.",170,null],[13,"Write","","The writing portion of the [`TcpStream`] should be shut down.",170,null],[13,"Both","","Both the reading and the writing portions of the [`TcpStream`] should be shut down.",170,null],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"ipaddr"}}],[11,"eq","","",167,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ne","","",167,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",167,null],[11,"partial_cmp","","",167,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",167,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"le","","",167,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"gt","","",167,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ge","","",167,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"cmp","","",167,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"ordering"}}],[11,"eq","","",168,{"inputs":[{"name":"self"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"ipv6multicastscope"}}],[11,"hash","","",168,null],[11,"fmt","","",168,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_unspecified","","Returns [`true`] for the special 'unspecified' address.",167,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns [`true`] if this is a loopback address.",167,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_global","","Returns [`true`] if the address appears to be globally routable.",167,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns [`true`] if this is a multicast address.",167,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns [`true`] if this address is in a range designated for documentation.",167,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ipv4","","Returns [`true`] if this address is an [IPv4 address], and [`false`] otherwise.",167,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ipv6","","Returns [`true`] if this address is an [IPv6 address], and [`false`] otherwise.",167,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",171,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"localhost","","Creates a new IPv4 address with the address pointing to localhost: 127.0.0.1.",171,{"inputs":[],"output":{"name":"ipv4addr"}}],[11,"unspecified","","Creates a new IPv4 address representing an unspecified address: 0.0.0.0",171,{"inputs":[],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",171,null],[11,"is_unspecified","","Returns [`true`] for the special 'unspecified' address (0.0.0.0).",171,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns [`true`] if this is a loopback address (127.0.0.0/8).",171,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_private","","Returns [`true`] if this is a private address.",171,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_link_local","","Returns [`true`] if the address is link-local (169.254.0.0/16).",171,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_global","","Returns [`true`] if the address appears to be globally routable. See [iana-ipv4-special-registry][ipv4-sr].",171,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns [`true`] if this is a multicast address (224.0.0.0/4).",171,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_broadcast","","Returns [`true`] if this is a broadcast address (255.255.255.255).",171,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns [`true`] if this address is in a range designated for documentation.",171,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible [IPv6 address].",171,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped [IPv6 address].",171,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",167,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipaddr"}}],[11,"from","","",167,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"eq","","",167,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"hash","","",171,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"partial_cmp","","",171,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",167,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",171,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",171,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"ordering"}}],[11,"from","","It performs the conversion in network order (big-endian).",171,{"inputs":[{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"from","","",171,null],[11,"from","","",167,null],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",172,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"localhost","","Creates a new IPv6 address representing localhost: `::1`.",172,{"inputs":[],"output":{"name":"ipv6addr"}}],[11,"unspecified","","Creates a new IPv6 address representing the unspecified address: `::`",172,{"inputs":[],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",172,null],[11,"is_unspecified","","Returns [`true`] for the special 'unspecified' address (::).",172,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns [`true`] if this is a loopback address (::1).",172,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_global","","Returns [`true`] if the address appears to be globally routable.",172,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unique_local","","Returns [`true`] if this is a unique local address (fc00::/7).",172,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unicast_link_local","","Returns [`true`] if the address is unicast and link-local (fe80::/10).",172,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unicast_site_local","","Returns [`true`] if this is a deprecated unicast site-local address (fec0::/10).",172,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns [`true`] if this is an address reserved for documentation (2001:db8::/32).",172,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unicast_global","","Returns [`true`] if the address is a globally routable unicast address.",172,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"multicast_scope","","Returns the address's multicast scope if the address is multicast.",172,{"inputs":[{"name":"self"}],"output":{"generics":["ipv6multicastscope"],"name":"option"}}],[11,"is_multicast","","Returns [`true`] if this is a multicast address (ff00::/8).",172,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ipv4","","Converts this address to an [IPv4 address]. Returns [`None`] if this address is neither IPv4-compatible or IPv4-mapped.",172,{"inputs":[{"name":"self"}],"output":{"generics":["ipv4addr"],"name":"option"}}],[11,"octets","","Returns the sixteen eight-bit integers the IPv6 address consists of.",172,null],[11,"fmt","","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"eq","","",172,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"eq","","",172,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"eq","","",167,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"hash","","",172,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"partial_cmp","","",172,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",167,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",172,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",172,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"name":"ordering"}}],[11,"from","","",172,{"inputs":[{"name":"u128"}],"output":{"name":"ipv6addr"}}],[11,"from","","",172,null],[11,"from","","",172,null],[11,"from","","",167,null],[11,"from","","",167,null],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"socketaddr"}}],[11,"eq","","",169,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"hash","","",169,null],[11,"fmt","","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new socket address from an [IP address] and a port number.",169,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",169,{"inputs":[{"name":"self"}],"output":{"name":"ipaddr"}}],[11,"set_ip","","Changes the IP address associated with this socket address.",169,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":null}],[11,"port","","Returns the port number associated with this socket address.",169,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_port","","Changes the port number associated with this socket address.",169,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"is_ipv4","","Returns [`true`] if the [IP address] in this `SocketAddr` is an [IPv4 address], and [`false`] otherwise.",169,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ipv6","","Returns [`true`] if the [IP address] in this `SocketAddr` is an [IPv6 address], and [`false`] otherwise.",169,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new socket address from an [IPv4 address] and a port number.",173,{"inputs":[{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",173,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"set_ip","","Changes the IP address associated with this socket address.",173,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":null}],[11,"port","","Returns the port number associated with this socket address.",173,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_port","","Changes the port number associated with this socket address.",173,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"new","","Creates a new socket address from an [IPv6 address], a 16-bit port number, and the `flowinfo` and `scope_id` fields.",174,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",174,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"set_ip","","Changes the IP address associated with this socket address.",174,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":null}],[11,"port","","Returns the port number associated with this socket address.",174,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_port","","Changes the port number associated with this socket address.",174,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"flowinfo","","Returns the flow information associated with this address.",174,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_flowinfo","","Changes the flow information associated with this socket address.",174,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"scope_id","","Returns the scope ID associated with this address.",174,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_scope_id","","Change the scope ID associated with this socket address.",174,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"from","","",169,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"socketaddr"}}],[11,"from","","",169,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"socketaddr"}}],[11,"from","","",169,null],[11,"fmt","","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"socketaddrv4"}}],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"socketaddrv6"}}],[11,"eq","","",173,{"inputs":[{"name":"self"},{"name":"socketaddrv4"}],"output":{"name":"bool"}}],[11,"eq","","",174,{"inputs":[{"name":"self"},{"name":"socketaddrv6"}],"output":{"name":"bool"}}],[11,"hash","","",173,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"hash","","",174,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_socket_addrs","","",169,{"inputs":[{"name":"self"}],"output":{"generics":["intoiter"],"name":"result"}}],[11,"to_socket_addrs","","",173,{"inputs":[{"name":"self"}],"output":{"generics":["intoiter"],"name":"result"}}],[11,"to_socket_addrs","","",174,{"inputs":[{"name":"self"}],"output":{"generics":["intoiter"],"name":"result"}}],[11,"to_socket_addrs","sgx_tstd::string","",133,{"inputs":[{"name":"self"}],"output":{"generics":["intoiter"],"name":"result"}}],[11,"from_str","sgx_tstd::net","",167,{"inputs":[{"name":"str"}],"output":{"generics":["ipaddr","addrparseerror"],"name":"result"}}],[11,"from_str","","",171,{"inputs":[{"name":"str"}],"output":{"generics":["ipv4addr","addrparseerror"],"name":"result"}}],[11,"from_str","","",172,{"inputs":[{"name":"str"}],"output":{"generics":["ipv6addr","addrparseerror"],"name":"result"}}],[11,"from_str","","",173,{"inputs":[{"name":"str"}],"output":{"generics":["socketaddrv4","addrparseerror"],"name":"result"}}],[11,"from_str","","",174,{"inputs":[{"name":"str"}],"output":{"generics":["socketaddrv6","addrparseerror"],"name":"result"}}],[11,"from_str","","",169,{"inputs":[{"name":"str"}],"output":{"generics":["socketaddr","addrparseerror"],"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"addrparseerror"}}],[11,"eq","","",175,{"inputs":[{"name":"self"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",175,{"inputs":[{"name":"self"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",175,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[8,"ToSocketAddrs","","A trait for objects which can be converted or resolved to one or more [`SocketAddr`] values.",null,null],[16,"Iter","","Returned iterator over socket addresses which this type may correspond to.",176,null],[10,"to_socket_addrs","","Converts this object to an iterator of resolved `SocketAddr`s.",176,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",170,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"eq","","",170,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"fmt","","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"num","sgx_tstd","Additional functionality for numerics.",null,null],[4,"FpCategory","sgx_tstd::num","A classification of floating point numbers.",null,null],[13,"Nan","","\"Not a Number\", often obtained by dividing by zero.",177,null],[13,"Infinite","","Positive or negative infinity.",177,null],[13,"Zero","","Positive or negative zero.",177,null],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`).",177,null],[13,"Normal","","A regular floating point number.",177,null],[3,"ParseIntError","","An error which can be returned when parsing an integer.",null,null],[3,"ParseFloatError","","An error which can be returned when parsing a float.",null,null],[3,"TryFromIntError","","The error type returned when a checked integral type conversion fails.",null,null],[3,"Wrapping","","Provides intentionally-wrapped arithmetic on `T`.",null,null],[12,"0","","",178,null],[0,"os","sgx_tstd","",null,null],[0,"unix","sgx_tstd::os","",null,null],[0,"io","sgx_tstd::os::unix","Unix-specific extensions to general I/O primitives",null,null],[6,"RawFd","sgx_tstd::os::unix::io","Raw file descriptors.",null,null],[8,"AsRawFd","","A trait to extract the raw unix file descriptor from an underlying object.",null,null],[10,"as_raw_fd","","Extracts the raw file descriptor.",179,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[8,"FromRawFd","","A trait to express the ability to construct an object from a raw file descriptor.",null,null],[10,"from_raw_fd","","Constructs a new instance of `Self` from the given raw file descriptor.",180,{"inputs":[{"name":"rawfd"}],"output":{"name":"self"}}],[8,"IntoRawFd","","A trait to express the ability to consume an object and acquire ownership of its raw file descriptor.",null,null],[10,"into_raw_fd","","Consumes this object, returning the raw underlying file descriptor.",181,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[0,"ffi","sgx_tstd::os::unix","Unix-specific extension to the primitives in the `std::ffi` module",null,null],[8,"OsStringExt","sgx_tstd::os::unix::ffi","Unix-specific extensions to `OsString`.",null,null],[10,"from_vec","","Creates an [`OsString`] from a byte vector.",182,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"self"}}],[10,"into_vec","","Yields the underlying byte vector of this [`OsString`].",182,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[8,"OsStrExt","","Unix-specific extensions to `OsStr`.",null,null],[10,"from_bytes","","Creates an [`OsStr`] from a byte slice.",183,null],[10,"as_bytes","","Gets the underlying byte view of the [`OsStr`] slice.",183,null],[0,"fs","sgx_tstd::os::unix","",null,null],[5,"symlink","sgx_tstd::os::unix::fs","Creates a new symbolic link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[8,"FileExt","","Unix-specific extensions to `File`",null,null],[10,"read_at","","Reads a number of bytes starting from a given offset.",184,null],[10,"write_at","","Writes a number of bytes starting from a given offset.",184,null],[8,"PermissionsExt","","Unix-specific extensions to `Permissions`",null,null],[10,"mode","","Returns the underlying raw `st_mode` bits that contain the standard Unix permissions for this file.",185,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_mode","","Sets the underlying raw bits for this set of permissions.",185,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"from_mode","","Creates a new instance of `Permissions` from the given set of Unix permission bits.",185,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[8,"OpenOptionsExt","","Unix-specific extensions to `OpenOptions`",null,null],[10,"mode","","Sets the mode bits that a new file will be created with.",186,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"custom_flags","","Pass custom flags to the `flags` argument of `open`.",186,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[8,"MetadataExt","","",null,null],[10,"dev","","Returns the ID of the device containing the file.",187,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"ino","","Returns the inode number.",187,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"mode","","Returns the rights applied to this file.",187,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"nlink","","Returns the number of hard links pointing to this file.",187,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"uid","","Returns the user ID of the owner of this file.",187,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"gid","","Returns the group ID of the owner of this file.",187,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rdev","","Returns the device ID of this file (if it is a special one).",187,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"size","","Returns the total size of this file in bytes.",187,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"atime","","Returns the time of the last access to the file.",187,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"atime_nsec","","Returns the time of the last access to the file in nanoseconds.",187,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"mtime","","Returns the time of the last modification of the file.",187,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"mtime_nsec","","Returns the time of the last modification of the file in nanoseconds.",187,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"ctime","","Returns the time of the last status change of the file.",187,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"ctime_nsec","","Returns the time of the last status change of the file in nanoseconds.",187,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"blksize","","Returns the blocksize for filesystem I/O.",187,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"blocks","","Returns the number of blocks allocated to the file, in 512-byte units.",187,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[8,"FileTypeExt","","Add support for special unix types (block/char device, fifo and socket).",null,null],[10,"is_block_device","","Returns whether this file type is a block device.",188,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_char_device","","Returns whether this file type is a char device.",188,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_fifo","","Returns whether this file type is a fifo.",188,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_socket","","Returns whether this file type is a socket.",188,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"prelude","sgx_tstd::os::unix","A prelude for conveniently writing platform-specific code.",null,null],[6,"RawFd","sgx_tstd::os::unix::prelude","Raw file descriptors.",null,null],[8,"AsRawFd","","A trait to extract the raw unix file descriptor from an underlying object.",null,null],[10,"as_raw_fd","","Extracts the raw file descriptor.",179,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[8,"FromRawFd","","A trait to express the ability to construct an object from a raw file descriptor.",null,null],[10,"from_raw_fd","","Constructs a new instance of `Self` from the given raw file descriptor.",180,{"inputs":[{"name":"rawfd"}],"output":{"name":"self"}}],[8,"IntoRawFd","","A trait to express the ability to consume an object and acquire ownership of its raw file descriptor.",null,null],[10,"into_raw_fd","","Consumes this object, returning the raw underlying file descriptor.",181,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[8,"OsStrExt","","Unix-specific extensions to `OsStr`.",null,null],[10,"from_bytes","","Creates an [`OsStr`] from a byte slice.",183,null],[10,"as_bytes","","Gets the underlying byte view of the [`OsStr`] slice.",183,null],[8,"OsStringExt","","Unix-specific extensions to `OsString`.",null,null],[10,"from_vec","","Creates an [`OsString`] from a byte vector.",182,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"self"}}],[10,"into_vec","","Yields the underlying byte vector of this [`OsString`].",182,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[8,"PermissionsExt","","Unix-specific extensions to `Permissions`",null,null],[10,"mode","","Returns the underlying raw `st_mode` bits that contain the standard Unix permissions for this file.",185,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_mode","","Sets the underlying raw bits for this set of permissions.",185,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"from_mode","","Creates a new instance of `Permissions` from the given set of Unix permission bits.",185,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[8,"OpenOptionsExt","","Unix-specific extensions to `OpenOptions`",null,null],[10,"mode","","Sets the mode bits that a new file will be created with.",186,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"custom_flags","","Pass custom flags to the `flags` argument of `open`.",186,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[8,"MetadataExt","","",null,null],[10,"dev","","Returns the ID of the device containing the file.",187,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"ino","","Returns the inode number.",187,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"mode","","Returns the rights applied to this file.",187,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"nlink","","Returns the number of hard links pointing to this file.",187,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"uid","","Returns the user ID of the owner of this file.",187,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"gid","","Returns the group ID of the owner of this file.",187,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rdev","","Returns the device ID of this file (if it is a special one).",187,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"size","","Returns the total size of this file in bytes.",187,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"atime","","Returns the time of the last access to the file.",187,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"atime_nsec","","Returns the time of the last access to the file in nanoseconds.",187,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"mtime","","Returns the time of the last modification of the file.",187,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"mtime_nsec","","Returns the time of the last modification of the file in nanoseconds.",187,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"ctime","","Returns the time of the last status change of the file.",187,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"ctime_nsec","","Returns the time of the last status change of the file in nanoseconds.",187,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"blksize","","Returns the blocksize for filesystem I/O.",187,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"blocks","","Returns the number of blocks allocated to the file, in 512-byte units.",187,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[8,"FileTypeExt","","Add support for special unix types (block/char device, fifo and socket).",null,null],[10,"is_block_device","","Returns whether this file type is a block device.",188,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_char_device","","Returns whether this file type is a char device.",188,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_fifo","","Returns whether this file type is a fifo.",188,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_socket","","Returns whether this file type is a socket.",188,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"FileExt","","Unix-specific extensions to `File`",null,null],[10,"read_at","","Reads a number of bytes starting from a given offset.",184,null],[10,"write_at","","Writes a number of bytes starting from a given offset.",184,null],[0,"raw","sgx_tstd::os","",null,null],[3,"stat","sgx_tstd::os::raw","",null,null],[12,"st_dev","","",189,null],[12,"st_ino","","",189,null],[12,"st_nlink","","",189,null],[12,"st_mode","","",189,null],[12,"st_uid","","",189,null],[12,"st_gid","","",189,null],[12,"__pad0","","",189,null],[12,"st_rdev","","",189,null],[12,"st_size","","",189,null],[12,"st_blksize","","",189,null],[12,"st_blocks","","",189,null],[12,"st_atime","","",189,null],[12,"st_atime_nsec","","",189,null],[12,"st_mtime","","",189,null],[12,"st_mtime_nsec","","",189,null],[12,"st_ctime","","",189,null],[12,"st_ctime_nsec","","",189,null],[12,"__unused","","",189,null],[4,"c_void","","Type used to construct void pointers for use with C.",null,null],[11,"clone","","",189,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[6,"c_char","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"dev_t","","",null,null],[6,"mode_t","","",null,null],[6,"off_t","","",null,null],[6,"ino_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"time_t","","",null,null],[11,"fmt","","",190,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"fs","sgx_tstd::os","",null,null],[8,"MetadataExt","sgx_tstd::os::fs","OS-specific extension methods for `fs::Metadata`",null,null],[10,"as_raw_stat","","Gain a reference to the underlying `stat` structure which contains the raw information returned by the OS.",191,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[10,"st_dev","","Returns the device ID on which this file resides.",191,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"st_ino","","Returns the inode number.",191,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"st_mode","","Returns the file type and mode.",191,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"st_nlink","","Returns the number of hard links to file.",191,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"st_uid","","Returns the user ID of the file owner.",191,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"st_gid","","Returns the group ID of the file owner.",191,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"st_rdev","","Returns the device ID that this file represents. Only relevant for special file.",191,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"st_size","","Returns the size of the file (if it is a regular file or a symbolic link) in bytes.",191,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"st_atime","","Returns the last access time.",191,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"st_atime_nsec","","Returns the last access time, nano seconds part.",191,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"st_mtime","","Returns the last modification time.",191,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"st_mtime_nsec","","Returns the last modification time, nano seconds part.",191,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"st_ctime","","Returns the last status change time.",191,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"st_ctime_nsec","","Returns the last status change time, nano seconds part.",191,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"st_blksize","","Returns the \"preferred\" blocksize for efficient filesystem I/O.",191,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"st_blocks","","Returns the number of blocks allocated to the file, 512-byte units.",191,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[0,"panic","sgx_tstd","Panic support in the standard library",null,null],[3,"PanicInfo","sgx_tstd::panic","A struct providing information about a panic.",null,null],[3,"Location","","A struct containing information about the location of a panic.",null,null],[3,"AssertUnwindSafe","","A simple wrapper around a type to assert that it is unwind safe.",null,null],[12,"0","","",192,null],[5,"set_panic_handler","","Registers a custom panic handler, replacing any that was previously registered.",null,null],[5,"catch_unwind","","Invokes a closure, capturing the cause of an unwinding panic if one occurs.",null,{"inputs":[{"name":"f"}],"output":{"generics":["box"],"name":"result"}}],[5,"resume_unwind","","Triggers a panic without invoking the panic hook.",null,null],[8,"UnwindSafe","","A marker trait which represents \"panic safe\" types in Rust.",null,null],[8,"RefUnwindSafe","","A marker trait representing types where a shared reference is considered unwind safe.",null,null],[11,"deref","","",192,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",192,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"call_once","","",192,null],[11,"fmt","","",192,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"path","sgx_tstd","Cross-platform path manipulation.",null,null],[3,"PrefixComponent","sgx_tstd::path","A structure wrapping a Windows path prefix as well as its unparsed string representation.",null,null],[3,"Components","","An interator over the [`Component`]s of a [`Path`].",null,null],[3,"Iter","","An iterator over the [`Component`]s of a [`Path`], as [`OsStr`] slices.",null,null],[3,"PathBuf","","An owned, mutable path (akin to [`String`]).",null,null],[3,"Path","","A slice of a path (akin to [`str`]).",null,null],[3,"StripPrefixError","","An error returned from [`Path::strip_prefix`][`strip_prefix`] if the prefix was not found.",null,null],[3,"Display","","Helper struct for safely printing paths with [`format!`] and `{}`.",null,null],[4,"Prefix","","Windows path prefixes, e.g. `C:` or `\\\\server\\share`.",null,null],[13,"Verbatim","","Verbatim prefix, e.g. `\\\\?\\cat_pics`.",193,null],[13,"VerbatimUNC","","Verbatim prefix using Windows' Uniform Naming Convention, e.g. `\\\\?\\UNC\\server\\share`.",193,null],[13,"VerbatimDisk","","Verbatim disk prefix, e.g. `\\\\?\\C:\\`.",193,null],[13,"DeviceNS","","Device namespace prefix, e.g. `\\\\.\\COM42`.",193,null],[13,"UNC","","Prefix using Windows' Uniform Naming Convention, e.g. `\\\\server\\share`.",193,null],[13,"Disk","","Prefix `C:` for the given disk drive.",193,null],[4,"Component","","A single component of a path.",null,null],[13,"Prefix","","A Windows path prefix, e.g. `C:` or `\\\\server\\share`.",194,null],[13,"RootDir","","The root directory component, appears after any prefix and before anything else.",194,null],[13,"CurDir","","A reference to the current directory, i.e. `.`. ",194,null],[13,"ParentDir","","A reference to the parent directory, i.e. `..`. ",194,null],[13,"Normal","","A normal component, e.g. `a` and `b` in `a/b`.",194,null],[5,"is_separator","","Determines whether the character is one of the permitted path separators for the current platform.",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"MAIN_SEPARATOR","","The primary separator of path components for the current platform.",null,null],[11,"clone","","",193,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"fmt","","",193,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",193,null],[11,"partial_cmp","","",193,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",193,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"le","","",193,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"gt","","",193,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ge","","",193,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"cmp","","",193,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"ordering"}}],[11,"eq","","",193,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ne","","",193,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\\\?\\`.",193,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",195,{"inputs":[{"name":"self"}],"output":{"name":"prefixcomponent"}}],[11,"fmt","","",195,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kind","","Returns the parsed prefix data.",195,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"as_os_str","","Returns the raw [`OsStr`] slice for this prefix.",195,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"eq","","",195,{"inputs":[{"name":"self"},{"name":"prefixcomponent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",195,{"inputs":[{"name":"self"},{"name":"prefixcomponent"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",195,{"inputs":[{"name":"self"},{"name":"prefixcomponent"}],"output":{"name":"ordering"}}],[11,"hash","","",195,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",194,{"inputs":[{"name":"self"}],"output":{"name":"component"}}],[11,"eq","","",194,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ne","","",194,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",194,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",194,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"le","","",194,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"gt","","",194,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ge","","",194,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"cmp","","",194,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"ordering"}}],[11,"hash","","",194,null],[11,"fmt","","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_os_str","","Extracts the underlying [`OsStr`] slice.",194,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"as_ref","","",194,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"as_ref","","",194,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"clone","","",196,{"inputs":[{"name":"self"}],"output":{"name":"components"}}],[11,"clone","","",197,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"fmt","","",196,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",196,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",196,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",196,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"fmt","","",197,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",197,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",197,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",197,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"next","","",197,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"next_back","","",197,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"next","","",196,{"inputs":[{"name":"self"}],"output":{"generics":["component"],"name":"option"}}],[11,"next_back","","",196,{"inputs":[{"name":"self"}],"output":{"generics":["component"],"name":"option"}}],[11,"eq","","",196,{"inputs":[{"name":"self"},{"name":"components"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",196,{"inputs":[{"name":"self"},{"name":"components"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",196,{"inputs":[{"name":"self"},{"name":"components"}],"output":{"name":"ordering"}}],[11,"clone","","",198,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"new","","Allocates an empty `PathBuf`.",198,{"inputs":[],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a [`Path`] slice.",198,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"push","","Extends `self` with `path`.",198,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"pop","","Truncate `self` to [`self.parent`].",198,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_file_name","","Updates [`self.file_name`] to `file_name`.",198,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"set_extension","","Updates [`self.extension`] to `extension`.",198,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"bool"}}],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal [`OsString`] storage.",198,{"inputs":[{"name":"self"}],"output":{"name":"osstring"}}],[11,"into_boxed_path","","Converts this `PathBuf` into a [boxed][`Box`] [`Path`].",198,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"box"}}],[11,"from","sgx_tstd::boxed","",114,{"inputs":[{"name":"path"}],"output":{"generics":["path"],"name":"box"}}],[11,"from","sgx_tstd::path","",198,{"inputs":[{"generics":["path"],"name":"box"}],"output":{"name":"pathbuf"}}],[11,"from","sgx_tstd::boxed","",114,{"inputs":[{"name":"pathbuf"}],"output":{"generics":["path"],"name":"box"}}],[11,"from","sgx_tstd::path","",198,{"inputs":[{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",198,{"inputs":[{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","sgx_tstd::ffi","",130,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"from","sgx_tstd::path","",198,{"inputs":[{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",198,{"inputs":[{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",198,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"fmt","","",198,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",198,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"borrow","","",198,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"default","","",198,{"inputs":[],"output":{"name":"self"}}],[11,"from","sgx_tstd::borrow","",74,{"inputs":[{"name":"path"}],"output":{"generics":["path"],"name":"cow"}}],[11,"from","","",74,{"inputs":[{"name":"pathbuf"}],"output":{"generics":["path"],"name":"cow"}}],[11,"from","sgx_tstd::rc","",132,{"inputs":[{"name":"pathbuf"}],"output":{"generics":["path"],"name":"rc"}}],[11,"from","","",132,{"inputs":[{"name":"path"}],"output":{"generics":["path"],"name":"rc"}}],[11,"to_owned","sgx_tstd::path","",199,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"clone_into","","",199,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":null}],[11,"eq","","",198,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"hash","","",198,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"partial_cmp","","",198,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",198,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"ordering"}}],[11,"as_ref","","",198,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"fmt","","",200,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",200,{"inputs":[{"name":"self"}],"output":{"name":"stripprefixerror"}}],[11,"eq","","",200,{"inputs":[{"name":"self"},{"name":"stripprefixerror"}],"output":{"name":"bool"}}],[11,"ne","","",200,{"inputs":[{"name":"self"},{"name":"stripprefixerror"}],"output":{"name":"bool"}}],[11,"new","","Directly wraps a string slice as a `Path` slice.",199,{"inputs":[{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying [`OsStr`] slice.",199,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a [`&str`] slice if the `Path` is valid unicode.",199,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"to_string_lossy","","Converts a `Path` to a [`Cow<str>`].",199,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"cow"}}],[11,"to_path_buf","","Converts a `Path` to an owned [`PathBuf`].",199,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"is_absolute","","Returns `true` if the `Path` is absolute, i.e. if it is independent of the current directory.",199,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_relative","","Return `false` if the `Path` is relative, i.e. not absolute.",199,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_root","","Returns `true` if the `Path` has a root.",199,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"parent","","Returns the `Path` without its final component, if there is one.",199,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"file_name","","Returns the final component of the `Path`, if there is one.",199,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"strip_prefix","","Returns a path that, when joined onto `base`, yields `self`.",199,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["path","stripprefixerror"],"name":"result"}}],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",199,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",199,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"file_stem","","Extracts the stem (non-extension) portion of [`self.file_name`].",199,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"extension","","Extracts the extension of [`self.file_name`], if possible.",199,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"join","","Creates an owned [`PathBuf`] with `path` adjoined to `self`.",199,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"pathbuf"}}],[11,"with_file_name","","Creates an owned [`PathBuf`] like `self` but with the given file name.",199,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","Creates an owned [`PathBuf`] like `self` but with the given extension.",199,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"components","","Produces an iterator over the [`Component`]s of the path.",199,{"inputs":[{"name":"self"}],"output":{"name":"components"}}],[11,"iter","","Produces an iterator over the path's components viewed as [`OsStr`] slices.",199,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"display","","Returns an object that implements [`Display`] for safely printing paths that may contain non-Unicode data.",199,{"inputs":[{"name":"self"}],"output":{"name":"display"}}],[11,"into_path_buf","","Converts a [`Box<Path>`][`Box`] into a [`PathBuf`] without copying or allocating.",199,{"inputs":[{"generics":["path"],"name":"box"}],"output":{"name":"pathbuf"}}],[11,"as_ref","","",199,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"fmt","","",199,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",201,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",201,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",199,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",199,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"partial_cmp","","",199,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",199,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"ordering"}}],[11,"as_ref","","",199,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","sgx_tstd::ffi","",131,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","sgx_tstd::borrow","",74,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","sgx_tstd::ffi","",130,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","sgx_tstd::string","",133,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","sgx_tstd::path","",198,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",198,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",199,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",198,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",199,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",198,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",198,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","sgx_tstd::borrow","",74,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::path","",199,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","sgx_tstd::borrow","",74,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","sgx_tstd::path","",199,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","sgx_tstd::borrow","",74,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",74,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::path","",198,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","sgx_tstd::borrow","",74,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","sgx_tstd::path","",198,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",198,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::ffi","",131,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","sgx_tstd::path","",198,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","sgx_tstd::ffi","",131,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","sgx_tstd::path","",198,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",198,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",198,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::borrow","",74,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","sgx_tstd::path","",198,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","sgx_tstd::borrow","",74,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","sgx_tstd::path","",198,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::ffi","",130,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","sgx_tstd::path","",198,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","sgx_tstd::ffi","",130,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","sgx_tstd::path","",199,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::ffi","",131,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","sgx_tstd::path","",199,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","sgx_tstd::ffi","",131,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","sgx_tstd::path","",199,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",199,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",199,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::borrow","",74,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","sgx_tstd::path","",199,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","sgx_tstd::borrow","",74,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","sgx_tstd::path","",199,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::ffi","",130,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","sgx_tstd::path","",199,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","sgx_tstd::ffi","",130,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",131,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","sgx_tstd::borrow","",74,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",74,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","sgx_tstd::ffi","",130,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",130,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","sgx_tstd::borrow","",74,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::ffi","",131,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","sgx_tstd::borrow","",74,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","sgx_tstd::ffi","",131,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","sgx_tstd::borrow","",74,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",74,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::ffi","",130,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","sgx_tstd::borrow","",74,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","sgx_tstd::ffi","",130,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","sgx_tstd::path","",200,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",200,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"sync","sgx_tstd","The Intel(R) Software Guard Extensions SDK already supports mutex and conditional  variable synchronization mechanisms by means of the following APIand data types  defined in the Types and Enumerations section. Some functions included in the  trusted Thread Synchronization library may make calls outside the enclave (OCALLs). If you use any of the APIs below, you must first import the needed OCALL functions from sgx_tstdc.edl. Otherwise, you will get a linker error when the enclave is being built; see Calling Functions outside the Enclave for additional details.  The table below illustrates the primitives that the Intel(R) SGX Thread  Synchronization library supports, as well as the OCALLs that each API function needs.",null,null],[3,"Arc","sgx_tstd::sync","A thread-safe reference-counting pointer. 'Arc' stands for 'Atomically Reference Counted'.",null,null],[3,"Weak","","`Weak` is a version of [`Arc`] that holds a non-owning reference to the managed value. The value is accessed by calling [`upgrade`] on the `Weak` pointer, which returns an [`Option`]`<`[`Arc`]`<T>>`.",null,null],[0,"atomic","","Atomic types",null,null],[5,"spin_loop_hint","sgx_tstd::sync::atomic","Save power or switch hyperthreads in a busy-wait spin-loop.",null,null],[3,"AtomicBool","","A boolean type which can be safely shared between threads.",null,null],[3,"AtomicPtr","","A raw pointer type which can be safely shared between threads.",null,null],[4,"Ordering","","Atomic memory orderings",null,null],[13,"Relaxed","","No ordering constraints, only atomic operations.",202,null],[13,"Release","","When coupled with a store, all previous writes become visible to the other threads that perform a load with [`Acquire`] ordering on the same value.",202,null],[13,"Acquire","","When coupled with a load, all subsequent loads will see data written before a store with [`Release`] ordering on the same value in other threads.",202,null],[13,"AcqRel","","When coupled with a load, uses [`Acquire`] ordering, and with a store [`Release`] ordering.",202,null],[13,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all sequentially consistent operations in the same order.",202,null],[17,"ATOMIC_BOOL_INIT","","An [`AtomicBool`] initialized to `false`.",null,null],[3,"AtomicI8","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I8_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU8","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U8_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI16","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I16_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU16","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U16_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI32","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I32_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU32","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U32_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI64","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I64_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU64","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U64_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicIsize","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_ISIZE_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicUsize","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_USIZE_INIT","","An atomic integer initialized to `0`.",null,null],[5,"fence","","An atomic fence.",null,null],[5,"compiler_fence","","A compiler memory fence.",null,null],[3,"Barrier","sgx_tstd::sync","A barrier enables multiple threads to synchronize the beginning of some computation.",null,null],[3,"BarrierWaitResult","","A `BarrierWaitResult` is returned by [`wait`] when all threads in the [`Barrier`] have rendezvoused.",null,null],[3,"SgxCondvar","","A Condition Variable",null,null],[3,"SgxThreadCondvar","","The structure of sgx condition.",null,null],[3,"SgxMutex","","A mutual exclusion primitive useful for protecting shared data",null,null],[3,"SgxMutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",null,null],[3,"SgxThreadMutex","","The structure of sgx mutex.",null,null],[3,"SgxReentrantMutex","","A re-entrant mutual exclusion",null,null],[3,"SgxReentrantMutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",null,null],[3,"SgxReentrantThreadMutex","","The structure of sgx mutex.",null,null],[3,"Once","","A synchronization primitive which can be used to run a one-time global initialization. Useful for one-time initialization for FFI or related functionality. This type can only be constructed with the [`ONCE_INIT`] value.",null,null],[3,"OnceState","","State yielded to the [`call_once_force`] method which can be used to query whether the [`Once`] was previously poisoned or not.",null,null],[3,"SgxRwLock","","A reader-writer lock",null,null],[3,"SgxRwLockReadGuard","","RAII structure used to release the shared read access of a lock when dropped.",null,null],[3,"SgxRwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when dropped.",null,null],[3,"SgxThreadRwLock","","An OS-based reader-writer lock.",null,null],[3,"SgxSpinlock","","",null,null],[3,"SgxSpinlockGuard","","",null,null],[3,"SgxThreadSpinlock","","",null,null],[3,"PoisonError","","A type of error which can be returned whenever a lock is acquired.",null,null],[4,"TryLockError","","An enumeration of possible errors which can occur while calling the [`try_lock`] method.",null,null],[13,"Poisoned","","The lock could not be acquired because another thread failed while holding the lock.",203,null],[13,"WouldBlock","","The lock could not be acquired at this time because the operation would otherwise block.",203,null],[11,"fmt","","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new barrier that can block a given number of threads.",204,{"inputs":[{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads have rendezvoused here.",204,{"inputs":[{"name":"self"}],"output":{"name":"barrierwaitresult"}}],[11,"fmt","","",205,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_leader","","Returns whether this thread from [`wait`] is the \"leader thread\".",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","The function initializes a trusted condition variable within the enclave.",206,{"inputs":[],"output":{"name":"self"}}],[11,"wait","","The function waits on a condition variable within an enclave.",206,{"inputs":[{"name":"self"},{"name":"sgxthreadmutex"}],"output":{"name":"syserror"}}],[11,"signal","","The function wakes a pending thread waiting on the condition variable.",206,{"inputs":[{"name":"self"}],"output":{"name":"syserror"}}],[11,"broadcast","","The function wakes all pending threads waiting on the condition variable.",206,{"inputs":[{"name":"self"}],"output":{"name":"syserror"}}],[11,"destroy","","The function destroys a trusted condition variable within an enclave.",206,{"inputs":[{"name":"self"}],"output":{"name":"syserror"}}],[11,"get_raw","","Get the pointer of sgx_thread_cond_t in SgxThreadCondvar.",206,{"inputs":[{"name":"self"}],"output":{"name":"sgx_thread_cond_t"}}],[11,"new","","Creates a new condition variable which is ready to be waited on and notified.",207,{"inputs":[],"output":{"name":"self"}}],[11,"wait","","Blocks the current thread until this condition variable receives a notification.",207,{"inputs":[{"name":"self"},{"name":"sgxmutexguard"}],"output":{"generics":["sgxmutexguard"],"name":"lockresult"}}],[11,"signal","","Wakes up one blocked thread on this condvar.",207,{"inputs":[{"name":"self"}],"output":null}],[11,"broadcast","","Wakes up all blocked threads on this condvar.",207,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Creates a `Condvar` which is ready to be waited on and notified.",207,{"inputs":[],"output":{"name":"self"}}],[11,"drop","","",207,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","The function initializes a trusted mutex object within the enclave.",208,{"inputs":[],"output":{"name":"self"}}],[11,"lock","","The function locks a trusted mutex object within an enclave.",208,{"inputs":[{"name":"self"}],"output":{"name":"syserror"}}],[11,"try_lock","","The function tries to lock a trusted mutex object within an enclave.",208,{"inputs":[{"name":"self"}],"output":{"name":"syserror"}}],[11,"unlock","","The function unlocks a trusted mutex object within an enclave.",208,{"inputs":[{"name":"self"}],"output":{"name":"syserror"}}],[11,"destroy","","The function destroys a trusted mutex object within an enclave.",208,{"inputs":[{"name":"self"}],"output":{"name":"syserror"}}],[11,"get_raw","","Get the pointer of sgx_thread_mutex_t in SgxThreadMutex.",208,{"inputs":[{"name":"self"}],"output":{"name":"sgx_thread_mutex_t"}}],[11,"new","","Creates a new mutex in an unlocked state ready for use.",209,{"inputs":[{"name":"t"}],"output":{"name":"sgxmutex"}}],[11,"lock","","The function locks a trusted mutex object within an enclave.",209,{"inputs":[{"name":"self"}],"output":{"generics":["sgxmutexguard"],"name":"lockresult"}}],[11,"try_lock","","The function tries to lock a trusted mutex object within an enclave.",209,{"inputs":[{"name":"self"}],"output":{"generics":["sgxmutexguard"],"name":"trylockresult"}}],[11,"is_poisoned","","Determines whether the mutex is poisoned.",209,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",209,{"inputs":[{"name":"self"}],"output":{"name":"lockresult"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",209,{"inputs":[{"name":"self"}],"output":{"name":"lockresult"}}],[11,"drop","","",209,{"inputs":[{"name":"self"}],"output":null}],[11,"from","","Creates a new mutex in an unlocked state ready for use. This is equivalent to [`Mutex::new`].",209,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"default","","Creates a `SgxMutex<T>`, with the `Default` value for T.",209,{"inputs":[],"output":{"name":"sgxmutex"}}],[11,"fmt","","",209,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",210,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",210,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",210,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","The function initializes a trusted mutex object within the enclave.",211,{"inputs":[],"output":{"name":"self"}}],[11,"lock","","The function locks a trusted mutex object within an enclave.",211,{"inputs":[{"name":"self"}],"output":{"name":"syserror"}}],[11,"try_lock","","The function tries to lock a trusted mutex object within an enclave.",211,{"inputs":[{"name":"self"}],"output":{"name":"syserror"}}],[11,"unlock","","The function unlocks a trusted mutex object within an enclave.",211,{"inputs":[{"name":"self"}],"output":{"name":"syserror"}}],[11,"destroy","","The function destroys a trusted mutex object within an enclave.",211,{"inputs":[{"name":"self"}],"output":{"name":"syserror"}}],[11,"get_raw","","Get the pointer of sgx_thread_mutex_t in SgxThreadMutex.",211,{"inputs":[{"name":"self"}],"output":{"name":"sgx_thread_mutex_t"}}],[11,"new","","Creates a new reentrant mutex in an unlocked state.",212,{"inputs":[{"name":"t"}],"output":{"name":"sgxreentrantmutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",212,{"inputs":[{"name":"self"}],"output":{"generics":["sgxreentrantmutexguard"],"name":"lockresult"}}],[11,"try_lock","","Attempts to acquire this lock.",212,{"inputs":[{"name":"self"}],"output":{"generics":["sgxreentrantmutexguard"],"name":"trylockresult"}}],[11,"drop","","",212,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",212,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",213,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",213,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",214,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Once` value.",215,{"inputs":[],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure will be executed if this is the first time `call_once` has been called, and otherwise the routine will not be invoked.",215,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"call_once_force","","Performs the same function as [`call_once`] except ignores poisoning.",215,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fmt","","",215,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poisoned","","Returns whether the associated [`Once`] has been poisoned.",214,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new reader-writer lock for use.",216,{"inputs":[],"output":{"name":"self"}}],[11,"read","","Acquires shared access to the underlying lock, blocking the current thread to do so.",216,{"inputs":[{"name":"self"}],"output":{"name":"syserror"}}],[11,"try_read","","Attempts to acquire shared access to this lock, returning whether it succeeded or not.",216,{"inputs":[{"name":"self"}],"output":{"name":"syserror"}}],[11,"write","","Acquires write access to the underlying lock, blocking the current thread to do so.",216,{"inputs":[{"name":"self"}],"output":{"name":"syserror"}}],[11,"try_write","","Attempts to acquire exclusive access to this lock, returning whether it succeeded or not.",216,{"inputs":[{"name":"self"}],"output":{"name":"syserror"}}],[11,"read_unlock","","Unlocks previously acquired shared access to this lock.",216,{"inputs":[{"name":"self"}],"output":{"name":"syserror"}}],[11,"write_unlock","","Unlocks previously acquired exclusive access to this lock.",216,{"inputs":[{"name":"self"}],"output":{"name":"syserror"}}],[11,"destroy","","Destroys OS-related resources with this RWLock.",216,{"inputs":[{"name":"self"}],"output":{"name":"syserror"}}],[11,"new","","Creates a new instance of an `RwLock<T>` which is unlocked.",217,{"inputs":[{"name":"t"}],"output":{"name":"sgxrwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",217,{"inputs":[{"name":"self"}],"output":{"generics":["sgxrwlockreadguard"],"name":"lockresult"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",217,{"inputs":[{"name":"self"}],"output":{"generics":["sgxrwlockreadguard"],"name":"trylockresult"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current thread until it can be acquired.",217,{"inputs":[{"name":"self"}],"output":{"generics":["sgxrwlockwriteguard"],"name":"lockresult"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",217,{"inputs":[{"name":"self"}],"output":{"generics":["sgxrwlockwriteguard"],"name":"trylockresult"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",217,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",217,{"inputs":[{"name":"self"}],"output":{"name":"lockresult"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",217,{"inputs":[{"name":"self"}],"output":{"name":"lockresult"}}],[11,"drop","","",217,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",217,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Creates a new `RwLock<T>`, with the `Default` value for T.",217,{"inputs":[],"output":{"name":"sgxrwlock"}}],[11,"from","","Creates a new instance of an `RwLock<T>` which is unlocked. This is equivalent to [`RwLock::new`].",217,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",218,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",218,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",219,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",219,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",218,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",219,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",219,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",218,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",219,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",220,{"inputs":[],"output":{"name":"self"}}],[11,"lock","","",220,{"inputs":[{"name":"self"}],"output":null}],[11,"unlock","","",220,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",221,{"inputs":[],"output":{"name":"self"}}],[11,"lock","","",221,{"inputs":[{"name":"self"}],"output":{"name":"sgxspinlockguard"}}],[11,"default","","",221,{"inputs":[],"output":{"name":"sgxspinlock"}}],[11,"drop","","",222,{"inputs":[{"name":"self"}],"output":null}],[6,"TryLockResult","","A type alias for the result of a nonblocking locking method.",null,null],[6,"LockResult","","A type alias for the result of a lock method which can be poisoned.",null,null],[17,"ONCE_INIT","","Initialization value for static [`Once`] values.",null,null],[0,"time","sgx_tstd","Temporal quantification.",null,null],[3,"Duration","sgx_tstd::time","A `Duration` type to represent a span of time, typically used for system timeouts.",null,null],[3,"Instant","","A measurement of a monotonically nondecreasing clock. Opaque and useful only with `Duration`.",null,null],[3,"SystemTime","","A measurement of the system clock, useful for talking to external entities like the file system or other processes.",null,null],[3,"SystemTimeError","","An error returned from the `duration_since` and `elapsed` methods on `SystemTime`, used to learn how far in the opposite direction a system time lies.",null,null],[11,"clone","","",223,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"eq","","",223,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",223,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",223,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",223,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",223,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",223,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",223,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"cmp","","",223,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"fmt","","",223,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",223,null],[11,"default","","",223,{"inputs":[],"output":{"name":"duration"}}],[11,"new","","Creates a new `Duration` from the specified number of whole seconds and additional nanoseconds.",223,{"inputs":[{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of whole seconds.",223,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",223,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_micros","","Creates a new `Duration` from the specified number of microseconds.",223,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_nanos","","Creates a new `Duration` from the specified number of nanoseconds.",223,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds contained by this `Duration`.",223,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"subsec_millis","","Returns the fractional part of this `Duration`, in milliseconds.",223,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"subsec_micros","","Returns the fractional part of this `Duration`, in microseconds.",223,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"subsec_nanos","","Returns the fractional part of this `Duration`, in nanoseconds.",223,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"checked_add","","Checked `Duration` addition. Computes `self + other`, returning [`None`] if overflow occurred.",223,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"checked_sub","","Checked `Duration` subtraction. Computes `self - other`, returning [`None`] if the result would be negative or if overflow occurred.",223,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"checked_mul","","Checked `Duration` multiplication. Computes `self * other`, returning [`None`] if overflow occurred.",223,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["duration"],"name":"option"}}],[11,"checked_div","","Checked `Duration` division. Computes `self / other`, returning [`None`] if `other == 0`.",223,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["duration"],"name":"option"}}],[11,"add","","",223,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"add_assign","","",223,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"sub","","",223,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub_assign","","",223,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"mul","","",223,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"mul_assign","","",223,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"div","","",223,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"div_assign","","",223,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"sum","","",223,{"inputs":[{"name":"i"}],"output":{"name":"duration"}}],[11,"sum","","",223,{"inputs":[{"name":"i"}],"output":{"name":"duration"}}],[17,"UNIX_EPOCH","","An anchor in time which can be used to create new `SystemTime` instances or learn about where in time a `SystemTime` lies.",null,null],[11,"clone","","",224,{"inputs":[{"name":"self"}],"output":{"name":"instant"}}],[11,"eq","","",224,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ne","","",224,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",224,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",224,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"le","","",224,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"gt","","",224,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ge","","",224,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"cmp","","",224,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"ordering"}}],[11,"hash","","",224,null],[11,"clone","","",225,{"inputs":[{"name":"self"}],"output":{"name":"systemtime"}}],[11,"eq","","",225,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ne","","",225,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",225,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",225,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"le","","",225,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"gt","","",225,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ge","","",225,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"cmp","","",225,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"ordering"}}],[11,"hash","","",225,null],[11,"clone","","",226,{"inputs":[{"name":"self"}],"output":{"name":"systemtimeerror"}}],[11,"fmt","","",226,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"duration_since","","Returns the amount of time elapsed from another instant to this one.",224,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"add","","",224,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"add_assign","","",224,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"sub","","",224,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"sub_assign","","",224,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"sub","","",224,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"fmt","","",224,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"duration_since","","Returns the amount of time elapsed from an earlier point in time.",225,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"generics":["duration","systemtimeerror"],"name":"result"}}],[11,"add","","",225,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"add_assign","","",225,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"sub","","",225,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"sub_assign","","",225,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"fmt","","",225,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"duration","","Returns the positive duration which represents how far forward the second system time was from the first.",226,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"description","","",226,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",226,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"heap","sgx_tstd","",null,null],[3,"Heap","sgx_tstd::heap","",null,null],[8,"Alloc","","An implementation of `Alloc` can allocate, reallocate, and deallocate arbitrary blocks of data described via `Layout`.",null,null],[10,"alloc","","Returns a pointer meeting the size and alignment guarantees of `layout`.",227,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"generics":["allocerr"],"name":"result"}}],[10,"dealloc","","Deallocate the memory referenced by `ptr`.",227,null],[11,"oom","","Allocator-specific method for signaling an out-of-memory condition.",227,null],[11,"usable_size","","Returns bounds on the guaranteed usable size of a successful allocation created with the specified `layout`.",227,null],[11,"realloc","","Returns a pointer suitable for holding data described by `new_layout`, meeting its size and alignment guarantees. To accomplish this, this may extend or shrink the allocation referenced by `ptr` to fit `new_layout`.",227,null],[11,"alloc_zeroed","","Behaves like `alloc`, but also ensures that the contents are set to zero before being returned.",227,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"generics":["allocerr"],"name":"result"}}],[11,"alloc_excess","","Behaves like `alloc`, but also returns the whole size of the returned block. For some `layout` inputs, like arrays, this may include extra storage usable for additional data.",227,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"generics":["excess","allocerr"],"name":"result"}}],[11,"realloc_excess","","Behaves like `realloc`, but also returns the whole size of the returned block. For some `layout` inputs, like arrays, this may include extra storage usable for additional data.",227,null],[11,"grow_in_place","","Attempts to extend the allocation referenced by `ptr` to fit `new_layout`.",227,null],[11,"shrink_in_place","","Attempts to shrink the allocation referenced by `ptr` to fit `new_layout`.",227,null],[11,"alloc_one","","Allocates a block suitable for holding an instance of `T`.",227,{"inputs":[{"name":"self"}],"output":{"generics":["nonnull","allocerr"],"name":"result"}}],[11,"dealloc_one","","Deallocates a block suitable for holding an instance of `T`.",227,null],[11,"alloc_array","","Allocates a block suitable for holding `n` instances of `T`.",227,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["nonnull","allocerr"],"name":"result"}}],[11,"realloc_array","","Reallocates a block previously suitable for holding `n_old` instances of `T`, returning a block suitable for holding `n_new` instances of `T`.",227,{"inputs":[{"name":"self"},{"name":"nonnull"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["nonnull","allocerr"],"name":"result"}}],[11,"dealloc_array","","Deallocates a block suitable for holding `n` instances of `T`.",227,{"inputs":[{"name":"self"},{"name":"nonnull"},{"name":"usize"}],"output":{"generics":["allocerr"],"name":"result"}}],[3,"Layout","","Layout of a block of memory.",null,null],[3,"Excess","","Represents the combination of a starting address and a total capacity of the returned block.",null,null],[12,"0","","",228,null],[12,"1","","",228,null],[3,"CannotReallocInPlace","","The `CannotReallocInPlace` error is used when `grow_in_place` or `shrink_in_place` were unable to reuse the given memory block for a requested layout.",null,null],[4,"AllocErr","","The `AllocErr` error specifies whether an allocation failure is specifically due to resource exhaustion or if it is due to something wrong when combining the given input arguments with this allocator.",null,null],[13,"Exhausted","","Error due to hitting some resource limit or otherwise running out of memory. This condition strongly implies that some series of deallocations would allow a subsequent reissuing of the original allocation request to succeed.",229,null],[12,"request","sgx_tstd::heap::AllocErr","",229,null],[13,"Unsupported","sgx_tstd::heap","Error due to allocator being fundamentally incapable of satisfying the original request. This condition implies that such an allocation request will never succeed on the given allocator, regardless of environment, memory pressure, or other contextual conditions.",229,null],[12,"details","sgx_tstd::heap::AllocErr","",229,null],[3,"System","sgx_tstd::heap","",null,null],[0,"enclave","sgx_tstd","",null,null],[4,"SgxThreadPolicy","sgx_tstd::enclave","",null,null],[13,"Bound","","",230,null],[13,"Unbound","","",230,null],[5,"get_enclave_base","","get_enclave_base is to get enclave map base address.",null,null],[5,"get_enclave_size","","get_enclave_size is to get enclave map size.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"get_heap_base","","get_heap_base is to get heap base address.",null,null],[5,"get_heap_size","","get_heap_size is to get heap size.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"get_thread_policy","","get_thread_policy is to get TCS policy.",null,{"inputs":[],"output":{"name":"sgxthreadpolicy"}}],[5,"get_enclave_id","","get_enclave_id is to get enclave ID.",null,{"inputs":[],"output":{"name":"sgx_enclave_id_t"}}],[5,"set_enclave_id","","set_enclave_id is to set enclave ID.",null,{"inputs":[{"name":"sgx_enclave_id_t"}],"output":null}],[5,"get_enclave_path","","get_enclave_path is to get the path or name of the enclave.",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"set_enclave_path","","set_enclave_path is to set the path or name of the enclave.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[0,"untrusted","sgx_tstd","",null,null],[0,"fs","sgx_tstd::untrusted","Filesystem manipulation operations.",null,null],[3,"File","sgx_tstd::untrusted::fs","A reference to an open file on the filesystem.",null,null],[3,"Metadata","","Metadata information about a file.",null,null],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",null,null],[3,"Permissions","","Representation of the various permissions on a file.",null,null],[3,"FileType","","A structure representing a type of file with accessors for each file type. It is returned by [`Metadata::file_type`] method.",null,null],[5,"read","","Read the entire contents of a file into a bytes vector.",null,{"inputs":[{"name":"p"}],"output":{"generics":["vec"],"name":"result"}}],[5,"read_string","","Read the entire contents of a file into a string.",null,{"inputs":[{"name":"p"}],"output":{"generics":["string"],"name":"result"}}],[5,"write","","Write a slice as the entire contents of a file.",null,{"inputs":[{"name":"p"},{"name":"c"}],"output":{"name":"result"}}],[5,"remove_file","","Removes a file from the filesystem.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"metadata","","Given a path, query the file system to get information about a file, directory, etc.",null,{"inputs":[{"name":"p"}],"output":{"generics":["metadata"],"name":"result"}}],[5,"symlink_metadata","","Query the metadata about a file without following symlinks.",null,{"inputs":[{"name":"p"}],"output":{"generics":["metadata"],"name":"result"}}],[5,"rename","","Rename a file or directory to a new name, replacing the original file if `to` already exists.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"copy","","Copies the contents of one file to another. This function will also copy the permission bits of the original file to the destination file.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"generics":["u64"],"name":"result"}}],[5,"hard_link","","Creates a new hard link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"soft_link","","Creates a new symbolic link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"read_link","","Reads a symbolic link, returning the file that the link points to.",null,{"inputs":[{"name":"p"}],"output":{"generics":["pathbuf"],"name":"result"}}],[5,"canonicalize","","Returns the canonical form of a path with all intermediate components normalized and symbolic links resolved.",null,{"inputs":[{"name":"p"}],"output":{"generics":["pathbuf"],"name":"result"}}],[5,"set_permissions","","Changes the permissions found on a file or a directory.",null,{"inputs":[{"name":"p"},{"name":"permissions"}],"output":{"name":"result"}}],[0,"path","sgx_tstd::untrusted","",null,null],[8,"PathEx","sgx_tstd::untrusted::path","",null,null],[10,"metadata","","",231,{"inputs":[{"name":"self"}],"output":{"generics":["metadata"],"name":"result"}}],[10,"symlink_metadata","","",231,{"inputs":[{"name":"self"}],"output":{"generics":["metadata"],"name":"result"}}],[10,"canonicalize","","",231,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"result"}}],[10,"read_link","","",231,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"result"}}],[10,"exists","","",231,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_file","","",231,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_dir","","",231,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"metadata","sgx_tstd::path","Queries the file system to get information about a file, directory, etc.",199,{"inputs":[{"name":"self"}],"output":{"generics":["metadata"],"name":"result"}}],[11,"symlink_metadata","","Queries the metadata about a file without following symlinks.",199,{"inputs":[{"name":"self"}],"output":{"generics":["metadata"],"name":"result"}}],[11,"canonicalize","","Returns the canonical form of the path with all intermediate components normalized and symbolic links resolved.",199,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"result"}}],[11,"read_link","","Reads a symbolic link, returning the file that the link points to.",199,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"result"}}],[11,"exists","","Returns whether the path points at an existing entity.",199,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_file","","Returns whether the path exists on disk and is pointing at a regular file.",199,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_dir","","Returns whether the path exists on disk and is pointing at a directory.",199,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"time","sgx_tstd::untrusted","",null,null],[8,"InstantEx","sgx_tstd::untrusted::time","",null,null],[10,"now","","",232,{"inputs":[],"output":{"name":"instant"}}],[10,"elapsed","","",232,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[8,"SystemTimeEx","","",null,null],[10,"now","","",233,{"inputs":[],"output":{"name":"systemtime"}}],[10,"elapsed","","",233,{"inputs":[{"name":"self"}],"output":{"generics":["duration","systemtimeerror"],"name":"result"}}],[11,"now","sgx_tstd::time","Returns an instant corresponding to \"now\".",224,{"inputs":[],"output":{"name":"instant"}}],[11,"elapsed","","Returns the amount of time elapsed since this instant was created.",224,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"now","","Returns the system time corresponding to \"now\".",225,{"inputs":[],"output":{"name":"systemtime"}}],[11,"elapsed","","Returns the amount of time elapsed since this system time was created.",225,{"inputs":[{"name":"self"}],"output":{"generics":["duration","systemtimeerror"],"name":"result"}}],[11,"fmt","sgx_tstd::sync","",234,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",234,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",234,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","Creates a `PoisonError`.",234,{"inputs":[{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the underlying guard to allow access regardless.",234,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a reference to the underlying guard to allow access regardless.",234,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a mutable reference to the underlying guard to allow access regardless.",234,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",203,{"inputs":[{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",203,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",203,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",203,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",203,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"as_raw_fd","sgx_tstd::untrusted::fs","",235,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",235,{"inputs":[{"name":"rawfd"}],"output":{"name":"file"}}],[11,"into_raw_fd","","",235,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","sgx_tstd::io","",150,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",152,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",154,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_vec","sgx_tstd::ffi","",130,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",130,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"from_bytes","","",131,null],[11,"as_bytes","","",131,null],[11,"read_at","sgx_tstd::untrusted::fs","",235,null],[11,"write_at","","",235,null],[11,"mode","","",236,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_mode","","",236,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"from_mode","","",236,{"inputs":[{"name":"u32"}],"output":{"name":"permissions"}}],[11,"mode","","",237,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"openoptions"}}],[11,"custom_flags","","",237,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"openoptions"}}],[11,"dev","","",238,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"ino","","",238,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"mode","","",238,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nlink","","",238,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"uid","","",238,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"gid","","",238,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rdev","","",238,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"size","","",238,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"atime","","",238,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"atime_nsec","","",238,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"mtime","","",238,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"mtime_nsec","","",238,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"ctime","","",238,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"ctime_nsec","","",238,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"blksize","","",238,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"blocks","","",238,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_block_device","","",239,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_char_device","","",239,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_fifo","","",239,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_socket","","",239,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","sgx_tstd::panic","",240,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"payload","","Returns the payload associated with the panic.",240,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"location","","Returns information about the location from which the panic originated, if available.",240,{"inputs":[{"name":"self"}],"output":{"generics":["location"],"name":"option"}}],[11,"fmt","","",241,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"file","","Returns the name of the source file from which the panic originated.",241,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"line","","Returns the line number from which the panic originated.",241,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"column","","Returns the column from which the panic originated.",241,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","sgx_tstd::untrusted::fs","",238,{"inputs":[{"name":"self"}],"output":{"name":"metadata"}}],[11,"clone","","",237,{"inputs":[{"name":"self"}],"output":{"name":"openoptions"}}],[11,"fmt","","",237,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",236,{"inputs":[{"name":"self"}],"output":{"name":"permissions"}}],[11,"eq","","",236,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"ne","","",236,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"fmt","","",236,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",239,{"inputs":[{"name":"self"}],"output":{"name":"filetype"}}],[11,"eq","","",239,{"inputs":[{"name":"self"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",239,{"inputs":[{"name":"self"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"hash","","",239,null],[11,"fmt","","",239,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"open","","Attempts to open a file in read-only mode.",235,{"inputs":[{"name":"p"}],"output":{"generics":["file"],"name":"result"}}],[11,"create","","Opens a file in write-only mode.",235,{"inputs":[{"name":"p"}],"output":{"generics":["file"],"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",235,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"sync_data","","This function is similar to [`sync_all`], except that it may not synchronize file metadata to the filesystem.",235,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_len","","Truncates or extends the underlying file, updating the size of this file to become `size`.",235,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"metadata","","Queries metadata about the underlying file.",235,{"inputs":[{"name":"self"}],"output":{"generics":["metadata"],"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying file.",235,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"result"}}],[11,"set_permissions","","Changes the permissions on the underlying file.",235,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"name":"result"}}],[11,"fmt","","",235,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",235,null],[11,"initializer","","",235,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"write","","",235,null],[11,"flush","","",235,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"seek","","",235,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["u64"],"name":"result"}}],[11,"new","","Creates a blank new set of options ready for configuration.",237,{"inputs":[],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",237,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"write","","Sets the option for write access.",237,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"append","","Sets the option for the append mode.",237,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"truncate","","Sets the option for truncating a previous file.",237,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create","","Sets the option for creating a new file.",237,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create_new","","Sets the option to always create a new file.",237,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"open","","Opens a file at `path` with the options specified by `self`.",237,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["file"],"name":"result"}}],[11,"file_type","","Returns the file type for this metadata.",238,{"inputs":[{"name":"self"}],"output":{"name":"filetype"}}],[11,"is_dir","","Returns whether this metadata is for a directory.",238,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_file","","Returns whether this metadata is for a regular file.",238,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",238,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"permissions","","Returns the permissions of the file this metadata is for.",238,{"inputs":[{"name":"self"}],"output":{"name":"permissions"}}],[11,"modified","","Returns the last modification time listed in this metadata.",238,{"inputs":[{"name":"self"}],"output":{"generics":["systemtime"],"name":"result"}}],[11,"accessed","","Returns the last access time of this metadata.",238,{"inputs":[{"name":"self"}],"output":{"generics":["systemtime"],"name":"result"}}],[11,"created","","Returns the creation time listed in the this metadata.",238,{"inputs":[{"name":"self"}],"output":{"generics":["systemtime"],"name":"result"}}],[11,"fmt","","",238,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"readonly","","Returns whether these permissions describe a readonly (unwritable) file.",236,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_readonly","","Modifies the readonly flag for this set of permissions. If the `readonly` argument is `true`, using the resulting `Permission` will update file permissions to forbid writing. Conversely, if it's `false`, using the resulting `Permission` will update file permissions to allow writing.",236,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"is_dir","","Test whether this file type represents a directory.",239,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_file","","Test whether this file type represents a regular file.",239,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_symlink","","Test whether this file type represents a symbolic link.",239,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"rt","sgx_tstd","Runtime services",null,null],[5,"begin_panic","sgx_tstd::rt","This is the entry point of panicking for panic!() and assert!().",null,null],[5,"begin_panic_fmt","","The entry point for panicking with a formatted message.",null,null],[5,"update_panic_count","","",null,{"inputs":[{"name":"isize"}],"output":{"name":"usize"}}],[5,"at_exit","","Enqueues a procedure to run when the main thread exits.",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"t_global_exit_ecall","","",null,{"inputs":[],"output":null}],[5,"t_global_init_ecall","","",null,null],[5,"global_exit","","",null,{"inputs":[],"output":null}],[7,"GLOBAL_DTORS","","",null,null],[14,"global_dtors_object","sgx_tstd","",null,null],[14,"global_ctors_object","","global_ctors_object is the base macro of implementing constructors.",null,null],[14,"__cfg_if_apply","","",null,null],[14,"__cfg_if_items","","",null,null],[14,"cfg_if","","",null,null],[14,"format","","Creates a `String` using interpolation of runtime expressions.",null,null],[14,"vec","","Creates a [`Vec`] containing the arguments.",null,null],[14,"try","","Helper macro for reducing boilerplate code for matching `Result` together with converting downstream errors.",null,null],[14,"writeln","","Write formatted data into a buffer, with a newline appended.",null,null],[14,"write","","Write formatted data into a buffer.",null,null],[14,"unimplemented","","A standardized placeholder for marking unfinished code.",null,null],[14,"unreachable","","A utility macro for indicating unreachable code.",null,null],[14,"debug_assert_ne","","Asserts that two expressions are not equal to each other.",null,null],[14,"debug_assert_eq","","Asserts that two expressions are equal to each other.",null,null],[14,"debug_assert","","Ensure that a boolean expression is `true` at runtime.",null,null],[14,"assert_ne","","Asserts that two expressions are not equal to each other (using [`PartialEq`]).",null,null],[14,"assert_eq","","Asserts that two expressions are equal to each other (using [`PartialEq`]).",null,null],[14,"assert","","Ensure that a boolean expression is `true` at runtime.",null,null],[14,"panic","","The entry point for panic of Rust threads.",null,null],[14,"print","","Macro for printing to the standard output.",null,null],[14,"println","","Macro for printing to the standard output, with a newline. On all platforms, the newline is the LINE FEED character (`\\n`/`U+000A`) alone (no additional CARRIAGE RETURN (`\\r`/`U+000D`).",null,null],[14,"eprint","","Macro for printing to the standard error.",null,null],[14,"eprintln","","Macro for printing to the standard error, with a newline.",null,null],[14,"thread_local","","Declare a new thread local storage key of type [`sgx_trts::LocalKey`].",null,null],[14,"__thread_local_inner","","",null,null],[11,"is","sgx_tstd::any","Returns `true` if the boxed type is the same as `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or `None` if it isn't.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or `None` if it isn't.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref","sgx_tstd::cell","",242,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","sgx_tstd::mem","",243,null],[11,"deref","sgx_tstd::cell","",244,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"cmp","sgx_tstd::mem","",243,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"ordering"}}],[11,"cmp","sgx_tstd::fmt","",121,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"ordering"}}],[11,"cmp","sgx_tstd::cmp","",3,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","sgx_tstd::option","",245,{"inputs":[{"name":"self"},{"name":"noneerror"}],"output":{"name":"ordering"}}],[11,"cmp","sgx_tstd::ops","",56,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"ordering"}}],[11,"cmp","sgx_tstd::cell","",246,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"ordering"}}],[11,"cmp","","",247,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"ordering"}}],[11,"cmp","sgx_tstd::num","",178,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"cmp","sgx_tstd::cmp","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"ordering"}}],[11,"cmp","sgx_tstd::marker","",248,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"cmp","sgx_tstd::convert","",126,{"inputs":[{"name":"self"},{"name":"infallible"}],"output":{"name":"ordering"}}],[11,"cmp","sgx_tstd::any","",249,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"ordering"}}],[11,"cmp","sgx_tstd::option","",71,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"cmp","sgx_tstd::result","",70,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"shl_assign","sgx_tstd::num","",178,null],[11,"shl_assign","","",178,null],[11,"shl_assign","","",178,null],[11,"shl_assign","","",178,null],[11,"shl_assign","","",178,null],[11,"shl_assign","","",178,null],[11,"shl_assign","","",178,null],[11,"shl_assign","","",178,null],[11,"shl_assign","","",178,null],[11,"shl_assign","","",178,null],[11,"shl_assign","","",178,null],[11,"shl_assign","","",178,null],[11,"shl_assign","","",178,null],[11,"shl_assign","","",178,null],[11,"shl_assign","","",178,null],[11,"shl_assign","","",178,null],[11,"shl_assign","","",178,null],[11,"shl_assign","","",178,null],[11,"shl_assign","","",178,null],[11,"shl_assign","","",178,null],[11,"div","","",178,null],[11,"div","","",178,null],[11,"div","","",178,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"div","","",178,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"div","","",178,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"div","","",178,null],[11,"div","","",178,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"div","","",178,null],[11,"div","","",178,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"div","","",178,null],[11,"div","","",178,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"div","","",178,null],[11,"div","","",178,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"div","","",178,null],[11,"div","","",178,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"div","","",178,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"div","","",178,null],[11,"div","","",178,null],[11,"div","","",178,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"div","","",178,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"div","","",178,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"div","","",178,null],[11,"div","","",178,null],[11,"div","","",178,null],[11,"bitxor_assign","","",178,null],[11,"bitxor_assign","","",178,null],[11,"bitxor_assign","","",178,null],[11,"bitxor_assign","","",178,null],[11,"bitxor_assign","","",178,null],[11,"bitxor_assign","","",178,null],[11,"bitxor_assign","","",178,null],[11,"bitxor_assign","","",178,null],[11,"bitxor_assign","","",178,null],[11,"bitxor_assign","","",178,null],[11,"bitxor_assign","","",178,null],[11,"bitxor_assign","","",178,null],[11,"bitxor_assign","","",178,null],[11,"bitxor_assign","","",178,null],[11,"bitxor_assign","","",178,null],[11,"bitxor_assign","","",178,null],[11,"bitxor_assign","","",178,null],[11,"bitxor_assign","","",178,null],[11,"bitxor_assign","","",178,null],[11,"bitxor_assign","","",178,null],[11,"bitxor_assign","","",178,null],[11,"bitxor_assign","","",178,null],[11,"bitxor_assign","","",178,null],[11,"bitxor_assign","","",178,null],[11,"bitor_assign","","",178,null],[11,"bitor_assign","","",178,null],[11,"bitor_assign","","",178,null],[11,"bitor_assign","","",178,null],[11,"bitor_assign","","",178,null],[11,"bitor_assign","","",178,null],[11,"bitor_assign","","",178,null],[11,"bitor_assign","","",178,null],[11,"bitor_assign","","",178,null],[11,"bitor_assign","","",178,null],[11,"bitor_assign","","",178,null],[11,"bitor_assign","","",178,null],[11,"bitor_assign","","",178,null],[11,"bitor_assign","","",178,null],[11,"bitor_assign","","",178,null],[11,"bitor_assign","","",178,null],[11,"bitor_assign","","",178,null],[11,"bitor_assign","","",178,null],[11,"bitor_assign","","",178,null],[11,"bitor_assign","","",178,null],[11,"bitor_assign","","",178,null],[11,"bitor_assign","","",178,null],[11,"bitor_assign","","",178,null],[11,"bitor_assign","","",178,null],[11,"build_hasher","sgx_tstd::hash","",250,{"inputs":[{"name":"self"}],"output":{"name":"h"}}],[11,"fmt","sgx_tstd::num","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"bitand_assign","","",178,null],[11,"bitand_assign","","",178,null],[11,"bitand_assign","","",178,null],[11,"bitand_assign","","",178,null],[11,"bitand_assign","","",178,null],[11,"bitand_assign","","",178,null],[11,"bitand_assign","","",178,null],[11,"bitand_assign","","",178,null],[11,"bitand_assign","","",178,null],[11,"bitand_assign","","",178,null],[11,"bitand_assign","","",178,null],[11,"bitand_assign","","",178,null],[11,"bitand_assign","","",178,null],[11,"bitand_assign","","",178,null],[11,"bitand_assign","","",178,null],[11,"bitand_assign","","",178,null],[11,"bitand_assign","","",178,null],[11,"bitand_assign","","",178,null],[11,"bitand_assign","","",178,null],[11,"bitand_assign","","",178,null],[11,"bitand_assign","","",178,null],[11,"bitand_assign","","",178,null],[11,"bitand_assign","","",178,null],[11,"bitand_assign","","",178,null],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","sgx_tstd::str","",115,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::any","",249,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",249,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::ops","",251,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::convert","",126,{"inputs":[{"name":"self"},{"name":"infallible"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::str","",116,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::ops","",64,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::num","",178,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",178,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::fmt","",121,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::num","",252,{"inputs":[{"name":"self"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",252,{"inputs":[{"name":"self"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::cell","",246,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::mem","",243,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"ne","","",243,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::ops","",32,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::cmp","",3,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::marker","",248,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::result","",70,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::str::pattern","",90,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::char","",124,{"inputs":[{"name":"self"},{"name":"chartryfromerror"}],"output":{"name":"bool"}}],[11,"ne","","",124,{"inputs":[{"name":"self"},{"name":"chartryfromerror"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::mem","",253,{"inputs":[{"name":"self"},{"name":"discriminant"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::num","",177,{"inputs":[{"name":"self"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::option","",245,{"inputs":[{"name":"self"},{"name":"noneerror"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::ops","",30,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::num","",254,{"inputs":[{"name":"self"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",254,{"inputs":[{"name":"self"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::option","",71,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::cmp","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::cell","",247,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"add","sgx_tstd::num","",178,null],[11,"add","","",178,null],[11,"add","","",178,null],[11,"add","","",178,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"add","","",178,null],[11,"add","","",178,null],[11,"add","","",178,null],[11,"add","","",178,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"add","","",178,null],[11,"add","","",178,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"add","","",178,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"add","","",178,null],[11,"add","","",178,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"add","","",178,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"add","","",178,null],[11,"add","","",178,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"add","","",178,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"add","","",178,null],[11,"add","","",178,null],[11,"add","","",178,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"add","","",178,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"add","","",178,null],[11,"add","","",178,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"add","","",178,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"bitor","","",178,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"bitor","","",178,null],[11,"bitor","","",178,null],[11,"bitor","","",178,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"bitor","","",178,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"bitor","","",178,null],[11,"bitor","","",178,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"bitor","","",178,null],[11,"bitor","","",178,null],[11,"bitor","","",178,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"bitor","","",178,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"bitor","","",178,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"bitor","","",178,null],[11,"bitor","","",178,null],[11,"bitor","","",178,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"bitor","","",178,null],[11,"bitor","","",178,null],[11,"bitor","","",178,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"bitor","","",178,null],[11,"bitor","","",178,null],[11,"bitor","","",178,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"bitor","","",178,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"bitor","","",178,null],[11,"bitor","","",178,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"into_result","sgx_tstd::option","",71,{"inputs":[{"name":"self"}],"output":{"generics":["noneerror"],"name":"result"}}],[11,"from_ok","","",71,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"from_error","","",71,{"inputs":[{"name":"noneerror"}],"output":{"name":"option"}}],[11,"into_result","sgx_tstd::result","",70,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_ok","","",70,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"from_error","","",70,{"inputs":[{"name":"e"}],"output":{"name":"result"}}],[11,"from","sgx_tstd::ptr","",255,{"inputs":[{"name":"t"}],"output":{"name":"unique"}}],[11,"from","sgx_tstd::sync::atomic","",256,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"from","","",257,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"from","sgx_tstd::ptr","",258,{"inputs":[{"name":"unique"}],"output":{"name":"nonnull"}}],[11,"from","sgx_tstd::sync::atomic","",259,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"from","","",260,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"from","sgx_tstd::cell","",246,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"from","sgx_tstd::ptr","",255,{"inputs":[{"name":"nonnull"}],"output":{"name":"unique"}}],[11,"from","sgx_tstd::sync::atomic","",261,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"from","","",262,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"from","sgx_tstd::ptr","",255,{"inputs":[{"name":"t"}],"output":{"name":"unique"}}],[11,"from","sgx_tstd::sync::atomic","",263,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"from","sgx_tstd::ptr","",258,{"inputs":[{"name":"t"}],"output":{"name":"nonnull"}}],[11,"from","sgx_tstd::cell","",247,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"from","sgx_tstd::ptr","",258,{"inputs":[{"name":"t"}],"output":{"name":"nonnull"}}],[11,"from","sgx_tstd::cell","",264,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"from","sgx_tstd::sync::atomic","",265,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"from","","",266,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"from","sgx_tstd::option","",71,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"from","sgx_tstd::num","",267,{"inputs":[{"name":"infallible"}],"output":{"name":"tryfrominterror"}}],[11,"from","sgx_tstd::sync::atomic","",268,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"from","","",269,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"from","","",270,null],[11,"into_iter","sgx_tstd::option","Returns a consuming iterator over the possibly contained value.",71,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","sgx_tstd::result","Returns a consuming iterator over the possibly contained value.",70,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"write","sgx_tstd::hash","",271,null],[11,"finish","","",271,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",272,null],[11,"finish","","",272,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",273,null],[11,"finish","","",273,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"as_ref","sgx_tstd::slice","",274,null],[11,"rem_assign","sgx_tstd::num","",178,null],[11,"rem_assign","","",178,null],[11,"rem_assign","","",178,null],[11,"rem_assign","","",178,null],[11,"rem_assign","","",178,null],[11,"rem_assign","","",178,null],[11,"rem_assign","","",178,null],[11,"rem_assign","","",178,null],[11,"rem_assign","","",178,null],[11,"rem_assign","","",178,null],[11,"rem_assign","","",178,null],[11,"rem_assign","","",178,null],[11,"rem_assign","","",178,null],[11,"rem_assign","","",178,null],[11,"rem_assign","","",178,null],[11,"rem_assign","","",178,null],[11,"rem_assign","","",178,null],[11,"rem_assign","","",178,null],[11,"rem_assign","","",178,null],[11,"rem_assign","","",178,null],[11,"rem_assign","","",178,null],[11,"rem_assign","","",178,null],[11,"rem_assign","","",178,null],[11,"rem_assign","","",178,null],[11,"next_back","sgx_tstd::str::pattern","",275,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",275,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",275,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",276,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",276,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",277,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",277,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",278,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",278,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",278,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"hash","sgx_tstd::ops","",45,null],[11,"hash","sgx_tstd::option","",245,null],[11,"hash","sgx_tstd::ops","",32,null],[11,"hash","sgx_tstd::any","",249,null],[11,"hash","sgx_tstd::mem","",243,null],[11,"hash","sgx_tstd::ops","",50,null],[11,"hash","sgx_tstd::marker","",248,null],[11,"hash","sgx_tstd::convert","",126,null],[11,"hash","sgx_tstd::option","",71,null],[11,"hash","sgx_tstd::ops","",56,null],[11,"hash","sgx_tstd::mem","",253,null],[11,"hash","sgx_tstd::ops","",64,null],[11,"hash","sgx_tstd::num","",178,null],[11,"hash","sgx_tstd::ops","",30,null],[11,"hash","sgx_tstd::result","",70,null],[11,"hash","sgx_tstd::ops","",251,null],[11,"hash","sgx_tstd::fmt","",121,null],[11,"hash","sgx_tstd::cmp","",3,null],[11,"div_assign","sgx_tstd::num","",178,null],[11,"div_assign","","",178,null],[11,"div_assign","","",178,null],[11,"div_assign","","",178,null],[11,"div_assign","","",178,null],[11,"div_assign","","",178,null],[11,"div_assign","","",178,null],[11,"div_assign","","",178,null],[11,"div_assign","","",178,null],[11,"div_assign","","",178,null],[11,"div_assign","","",178,null],[11,"div_assign","","",178,null],[11,"div_assign","","",178,null],[11,"div_assign","","",178,null],[11,"div_assign","","",178,null],[11,"div_assign","","",178,null],[11,"div_assign","","",178,null],[11,"div_assign","","",178,null],[11,"div_assign","","",178,null],[11,"div_assign","","",178,null],[11,"div_assign","","",178,null],[11,"div_assign","","",178,null],[11,"div_assign","","",178,null],[11,"div_assign","","",178,null],[11,"mul_assign","","",178,null],[11,"mul_assign","","",178,null],[11,"mul_assign","","",178,null],[11,"mul_assign","","",178,null],[11,"mul_assign","","",178,null],[11,"mul_assign","","",178,null],[11,"mul_assign","","",178,null],[11,"mul_assign","","",178,null],[11,"mul_assign","","",178,null],[11,"mul_assign","","",178,null],[11,"mul_assign","","",178,null],[11,"mul_assign","","",178,null],[11,"mul_assign","","",178,null],[11,"mul_assign","","",178,null],[11,"mul_assign","","",178,null],[11,"mul_assign","","",178,null],[11,"mul_assign","","",178,null],[11,"mul_assign","","",178,null],[11,"mul_assign","","",178,null],[11,"mul_assign","","",178,null],[11,"mul_assign","","",178,null],[11,"mul_assign","","",178,null],[11,"mul_assign","","",178,null],[11,"mul_assign","","",178,null],[11,"sub_assign","","",178,null],[11,"sub_assign","","",178,null],[11,"sub_assign","","",178,null],[11,"sub_assign","","",178,null],[11,"sub_assign","","",178,null],[11,"sub_assign","","",178,null],[11,"sub_assign","","",178,null],[11,"sub_assign","","",178,null],[11,"sub_assign","","",178,null],[11,"sub_assign","","",178,null],[11,"sub_assign","","",178,null],[11,"sub_assign","","",178,null],[11,"sub_assign","","",178,null],[11,"sub_assign","","",178,null],[11,"sub_assign","","",178,null],[11,"sub_assign","","",178,null],[11,"sub_assign","","",178,null],[11,"sub_assign","","",178,null],[11,"sub_assign","","",178,null],[11,"sub_assign","","",178,null],[11,"sub_assign","","",178,null],[11,"sub_assign","","",178,null],[11,"sub_assign","","",178,null],[11,"sub_assign","","",178,null],[11,"add_assign","","",178,null],[11,"add_assign","","",178,null],[11,"add_assign","","",178,null],[11,"add_assign","","",178,null],[11,"add_assign","","",178,null],[11,"add_assign","","",178,null],[11,"add_assign","","",178,null],[11,"add_assign","","",178,null],[11,"add_assign","","",178,null],[11,"add_assign","","",178,null],[11,"add_assign","","",178,null],[11,"add_assign","","",178,null],[11,"add_assign","","",178,null],[11,"add_assign","","",178,null],[11,"add_assign","","",178,null],[11,"add_assign","","",178,null],[11,"add_assign","","",178,null],[11,"add_assign","","",178,null],[11,"add_assign","","",178,null],[11,"add_assign","","",178,null],[11,"add_assign","","",178,null],[11,"add_assign","","",178,null],[11,"add_assign","","",178,null],[11,"add_assign","","",178,null],[11,"neg","","",178,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"neg","","",178,{"inputs":[{"name":"self"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"neg","","",178,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"neg","","",178,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"neg","","",178,{"inputs":[{"name":"self"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"neg","","",178,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"neg","","",178,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"neg","","",178,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"neg","","",178,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"neg","","",178,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"neg","","",178,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"neg","","",178,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"shr_assign","","",178,null],[11,"shr_assign","","",178,null],[11,"shr_assign","","",178,null],[11,"shr_assign","","",178,null],[11,"shr_assign","","",178,null],[11,"shr_assign","","",178,null],[11,"shr_assign","","",178,null],[11,"shr_assign","","",178,null],[11,"shr_assign","","",178,null],[11,"shr_assign","","",178,null],[11,"shr_assign","","",178,null],[11,"shr_assign","","",178,null],[11,"shr_assign","","",178,null],[11,"shr_assign","","",178,null],[11,"shr_assign","","",178,null],[11,"shr_assign","","",178,null],[11,"shr_assign","","",178,null],[11,"shr_assign","","",178,null],[11,"shr_assign","","",178,null],[11,"shr_assign","","",178,null],[11,"product","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"product","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"product","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"product","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"product","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"product","sgx_tstd::result","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, the product of all elements is returned.",70,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"product","sgx_tstd::num","",178,{"inputs":[{"name":"i"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"product","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"product","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"product","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"product","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"product","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"product","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"product","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"product","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"product","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"product","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"product","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"product","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"product","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"product","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"product","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"product","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"product","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"product","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"sub","","",178,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"sub","","",178,null],[11,"sub","","",178,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"sub","","",178,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"sub","","",178,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"sub","","",178,null],[11,"sub","","",178,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"sub","","",178,null],[11,"sub","","",178,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"sub","","",178,null],[11,"sub","","",178,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"sub","","",178,null],[11,"sub","","",178,null],[11,"sub","","",178,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"sub","","",178,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"sub","","",178,null],[11,"sub","","",178,null],[11,"sub","","",178,null],[11,"sub","","",178,null],[11,"sub","","",178,null],[11,"sub","","",178,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"sub","","",178,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"sub","","",178,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"sub","","",178,null],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"shr","","",178,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"shr","","",178,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"shr","","",178,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"shr","","",178,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"shr","","",178,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"shr","","",178,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"shr","","",178,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"shr","","",178,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"shr","","",178,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"shr","","",178,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"fmt","sgx_tstd::char","",279,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::fmt","",280,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::cell","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::num","",254,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::char","",281,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::convert","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::cell","",242,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::num","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::str","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::char","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::num","",252,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::char","",282,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::str","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::fmt","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::cell","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",244,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"bitxor","sgx_tstd::num","",178,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"bitxor","","",178,null],[11,"bitxor","","",178,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"bitxor","","",178,null],[11,"bitxor","","",178,null],[11,"bitxor","","",178,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"bitxor","","",178,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"bitxor","","",178,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"bitxor","","",178,null],[11,"bitxor","","",178,null],[11,"bitxor","","",178,null],[11,"bitxor","","",178,null],[11,"bitxor","","",178,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"bitxor","","",178,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"bitxor","","",178,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"bitxor","","",178,null],[11,"bitxor","","",178,null],[11,"bitxor","","",178,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"bitxor","","",178,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"bitxor","","",178,null],[11,"bitxor","","",178,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"bitxor","","",178,null],[11,"bitxor","","",178,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"bitxor","","",178,null],[11,"next_back","sgx_tstd::ops","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::iter","",283,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",283,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",283,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next_back","sgx_tstd::str","",284,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::result","",285,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::option","",286,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::result","",287,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::ops","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::iter","",288,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",288,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",288,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","sgx_tstd::slice","",289,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::iter","",290,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",291,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",292,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",292,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",292,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","sgx_tstd::result","",293,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::slice","",294,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::str","",295,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","sgx_tstd::iter","",296,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",296,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",296,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","sgx_tstd::slice","",297,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::iter","",298,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",298,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",298,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"rfind","","",298,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::str","",299,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",300,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","sgx_tstd::slice","",274,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",274,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",274,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","sgx_tstd::iter","",301,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",301,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",301,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","sgx_tstd::str","",302,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","sgx_tstd::slice","",303,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",304,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",304,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",304,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","sgx_tstd::iter","",305,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::slice","",306,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::str","",307,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"rfind","","",307,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::iter","",308,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",308,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"next_back","","",309,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",309,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"r"}}],[11,"rfold","","",309,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next_back","sgx_tstd::str","",310,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","sgx_tstd::iter","",311,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",311,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",311,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next_back","sgx_tstd::slice","",312,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",313,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",314,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",315,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::iter","",316,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",317,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",317,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",317,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","sgx_tstd::str","",318,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::option","",319,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",320,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::str","",321,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","sgx_tstd::iter","",322,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",322,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",322,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","sgx_tstd::str","",323,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",324,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",325,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"next_back","","",326,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","sgx_tstd::iter","",296,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",296,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",296,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"not","sgx_tstd::num","",178,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"not","","",178,{"inputs":[{"name":"self"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"not","","",178,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"not","","",178,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"not","","",178,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"not","","",178,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"not","","",178,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"not","","",178,{"inputs":[{"name":"self"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"not","","",178,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"not","","",178,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"not","","",178,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"not","","",178,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"from_iter","sgx_tstd::result","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, a container with the values of each `Result` is returned.",70,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"from_iter","sgx_tstd::option","Takes each element in the [`Iterator`]: if it is [`None`], no further elements are taken, and the [`None`] is returned. Should no [`None`] occur, a container with the values of each `Option` is returned.",71,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"haystack","sgx_tstd::str::pattern","",275,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",275,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",275,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",275,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",277,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",277,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",277,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",278,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",278,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",278,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",278,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",276,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",276,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",276,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rem","sgx_tstd::num","",178,null],[11,"rem","","",178,null],[11,"rem","","",178,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"rem","","",178,null],[11,"rem","","",178,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"rem","","",178,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"rem","","",178,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"rem","","",178,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"rem","","",178,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"rem","","",178,null],[11,"rem","","",178,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"rem","","",178,null],[11,"rem","","",178,null],[11,"rem","","",178,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"rem","","",178,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"rem","","",178,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"rem","","",178,null],[11,"rem","","",178,null],[11,"rem","","",178,null],[11,"rem","","",178,null],[11,"rem","","",178,null],[11,"rem","","",178,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"rem","","",178,null],[11,"rem","","",178,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"get","sgx_tstd::ops","",30,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",30,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",30,null],[11,"get_unchecked_mut","","",30,null],[11,"index","","",30,null],[11,"index_mut","","",30,null],[11,"get","","",45,null],[11,"get_mut","","",45,null],[11,"get_unchecked","","",45,null],[11,"get_unchecked_mut","","",45,null],[11,"index","","",45,null],[11,"index_mut","","",45,null],[11,"get","","",251,null],[11,"get_mut","","",251,null],[11,"get_unchecked","","",251,null],[11,"get_unchecked_mut","","",251,null],[11,"index","","",251,null],[11,"index_mut","","",251,null],[11,"get","","",32,null],[11,"get_mut","","",32,null],[11,"get_unchecked","","",32,null],[11,"get_unchecked_mut","","",32,null],[11,"index","","",32,null],[11,"index_mut","","",32,null],[11,"get","","",64,null],[11,"get_mut","","",64,null],[11,"get_unchecked","","",64,null],[11,"get_unchecked_mut","","",64,null],[11,"index","","",64,null],[11,"index_mut","","",64,null],[11,"get","","",64,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",64,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",64,null],[11,"get_unchecked_mut","","",64,null],[11,"index","","",64,null],[11,"index_mut","","",64,null],[11,"get","","",50,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",50,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",50,null],[11,"get_unchecked_mut","","",50,null],[11,"index","","",50,null],[11,"index_mut","","",50,null],[11,"get","","",50,null],[11,"get_mut","","",50,null],[11,"get_unchecked","","",50,null],[11,"get_unchecked_mut","","",50,null],[11,"index","","",50,null],[11,"index_mut","","",50,null],[11,"get","","",32,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",32,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",32,null],[11,"get_unchecked_mut","","",32,null],[11,"index","","",32,null],[11,"index_mut","","",32,null],[11,"get","","",45,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",45,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",45,null],[11,"get_unchecked_mut","","",45,null],[11,"index","","",45,null],[11,"index_mut","","",45,null],[11,"get","","",251,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",251,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",251,null],[11,"get_unchecked_mut","","",251,null],[11,"index","","",251,null],[11,"index_mut","","",251,null],[11,"get","","",30,null],[11,"get_mut","","",30,null],[11,"get_unchecked","","",30,null],[11,"get_unchecked_mut","","",30,null],[11,"index","","",30,null],[11,"index_mut","","",30,null],[11,"fmt","sgx_tstd::sync::atomic","",270,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::ptr","",255,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",258,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"mul","sgx_tstd::num","",178,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"mul","","",178,null],[11,"mul","","",178,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"mul","","",178,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"mul","","",178,null],[11,"mul","","",178,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"mul","","",178,null],[11,"mul","","",178,null],[11,"mul","","",178,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"mul","","",178,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"mul","","",178,null],[11,"mul","","",178,null],[11,"mul","","",178,null],[11,"mul","","",178,null],[11,"mul","","",178,null],[11,"mul","","",178,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"mul","","",178,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"mul","","",178,null],[11,"mul","","",178,null],[11,"mul","","",178,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"mul","","",178,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"mul","","",178,null],[11,"mul","","",178,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"mul","","",178,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"sum","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"sum","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"sum","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"sum","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"sum","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"sum","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"sum","sgx_tstd::result","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, the sum of all elements is returned.",70,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"sum","sgx_tstd::num","",178,{"inputs":[{"name":"i"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"sum","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"sum","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"sum","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"sum","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"sum","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"sum","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"sum","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"sum","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"sum","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"sum","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"sum","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"sum","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"sum","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"sum","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"sum","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"sum","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"sum","","",178,{"inputs":[{"name":"i"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"next","sgx_tstd::str","",284,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","sgx_tstd::result","",285,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",285,null],[11,"next","sgx_tstd::iter","",290,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",290,null],[11,"next","","",327,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",327,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",327,null],[11,"try_fold","","",327,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"next","sgx_tstd::char","",328,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"next","","",279,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"size_hint","","",279,null],[11,"count","","",279,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",279,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"next","sgx_tstd::slice","",274,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",274,null],[11,"count","","",274,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",274,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",274,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_fold","","",274,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",274,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"position","","",274,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rposition","","",274,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next","sgx_tstd::result","",287,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",287,null],[11,"next","sgx_tstd::iter","",308,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",308,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",308,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",308,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",308,null],[11,"try_fold","","",308,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",308,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","","",317,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",317,null],[11,"count","","",317,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"try_fold","","",317,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",317,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","sgx_tstd::slice","",294,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",294,null],[11,"count","","",294,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",294,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",294,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",303,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",303,null],[11,"count","","",303,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",303,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",303,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","sgx_tstd::str","",324,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","sgx_tstd::iter","",283,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",283,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"try_fold","","",283,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",283,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"nth","","",283,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"find","","",283,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"last","","",283,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",283,null],[11,"next","","",305,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",305,null],[11,"next","sgx_tstd::result","",293,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",293,null],[11,"next","sgx_tstd::slice","",329,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",329,null],[11,"next","sgx_tstd::iter","",298,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",298,null],[11,"try_fold","","",298,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",298,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"find","","",298,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","",298,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next","","",301,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",301,null],[11,"try_fold","","",301,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",301,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","sgx_tstd::str","",302,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","sgx_tstd::iter","",330,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",330,null],[11,"try_fold","","",330,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"next","sgx_tstd::ops","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"nth","","",30,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","sgx_tstd::str","",331,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","sgx_tstd::slice","",289,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",289,null],[11,"next","sgx_tstd::str","",295,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","sgx_tstd::iter","",332,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",332,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",332,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",332,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",332,null],[11,"try_fold","","",332,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",332,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","","",311,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",311,null],[11,"try_fold","","",311,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",311,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next","sgx_tstd::slice","",306,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",306,null],[11,"next","","",333,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",333,null],[11,"next","sgx_tstd::iter","",309,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",309,null],[11,"try_fold","","",309,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"r"}}],[11,"fold","","",309,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next","sgx_tstd::slice","",334,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",334,null],[11,"next","","",314,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",314,null],[11,"next","","",313,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",313,null],[11,"next","sgx_tstd::iter","",322,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",322,null],[11,"try_fold","","",322,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",322,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","sgx_tstd::str","",325,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"count","","",325,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",325,null],[11,"last","","",325,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"next","sgx_tstd::iter","",335,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",335,null],[11,"nth","","",335,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","sgx_tstd::option","",319,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",319,null],[11,"next","sgx_tstd::str","",307,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"size_hint","","",307,null],[11,"count","","",307,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",307,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",307,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"all","","",307,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","",307,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","",307,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","",307,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rposition","","",307,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next","sgx_tstd::char","",282,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"size_hint","","",282,null],[11,"count","","",282,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",282,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["char"],"name":"option"}}],[11,"last","","",282,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"next","sgx_tstd::str","",323,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",336,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","sgx_tstd::char","",281,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"size_hint","","",281,null],[11,"next","sgx_tstd::iter","",316,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",316,null],[11,"next","sgx_tstd::slice","",337,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",337,null],[11,"next","sgx_tstd::option","",286,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",286,null],[11,"next","sgx_tstd::iter","",296,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",296,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",296,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",296,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",296,null],[11,"try_fold","","",296,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",296,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","sgx_tstd::slice","",315,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",315,null],[11,"count","","",315,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",315,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",315,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","sgx_tstd::ops","",64,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"nth","","",64,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"nth","","",50,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","sgx_tstd::iter","",296,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",296,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",296,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",296,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",296,null],[11,"try_fold","","",296,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",296,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","sgx_tstd::str","",321,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","sgx_tstd::iter","Overflow Behavior",292,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",292,null],[11,"nth","","",292,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",292,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"try_fold","","",292,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",292,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","sgx_tstd::option","",320,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",320,null],[11,"next","sgx_tstd::iter","",338,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",338,null],[11,"try_fold","","",338,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"next","sgx_tstd::str","",326,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",300,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","sgx_tstd::slice","",297,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",297,null],[11,"count","","",297,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",297,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",297,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","sgx_tstd::iter","",339,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",339,null],[11,"try_fold","","",339,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",339,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","","",291,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",291,null],[11,"next","sgx_tstd::slice","",312,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",312,null],[11,"count","","",312,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",312,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",312,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","sgx_tstd::str","",310,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"size_hint","","",310,null],[11,"next","","",299,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"size_hint","","",299,null],[11,"next","sgx_tstd::iter","",340,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",340,null],[11,"next","","",288,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",288,null],[11,"try_fold","","",288,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",288,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","sgx_tstd::slice","",304,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",304,null],[11,"count","","",304,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",304,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",304,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_fold","","",304,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",304,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"position","","",304,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rposition","","",304,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next","sgx_tstd::str","",318,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",318,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",318,null],[11,"last","","",318,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","sgx_tstd::slice","",297,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","sgx_tstd::iter","",296,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",296,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","sgx_tstd::char","",282,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","sgx_tstd::iter","",311,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",311,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",316,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","sgx_tstd::slice","",274,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","sgx_tstd::str","",307,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",307,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","sgx_tstd::iter","",291,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",301,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",301,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",309,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",309,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",298,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",298,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","sgx_tstd::char","",279,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","sgx_tstd::slice","",304,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","sgx_tstd::iter","",292,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",292,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","sgx_tstd::slice","",312,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"shl","sgx_tstd::num","",178,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"shl","","",178,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"shl","","",178,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"shl","","",178,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"shl","","",178,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"shl","","",178,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"shl","","",178,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"shl","","",178,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"shl","","",178,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"shl","","",178,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"fmt","sgx_tstd::sync::atomic","",270,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::slice","",334,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",315,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::sync::atomic","",202,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",257,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",265,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::mem","",253,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::str","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::option","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::str","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::cell","",244,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::option","",320,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::sync::atomic","",261,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",268,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::convert","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::str","",299,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::sync::atomic","",256,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::str","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::iter","",283,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::char","",328,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",281,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::slice","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::str","",295,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::num","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::slice","",294,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::marker","",248,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::str::pattern","",278,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::mem","",243,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::result","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::fmt","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::iter","",338,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::slice","",274,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::num","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::iter","",317,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::cell","",264,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::sync::atomic","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::slice","",306,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::ptr","",258,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::sync::atomic","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::cell","",242,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::ops","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::slice","",289,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::num","",254,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::hash","",273,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::str","",321,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::iter","",316,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::str","",323,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::hash","",272,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::char","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::cell","",246,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::ops","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::iter","",330,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::result","",293,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::sync::atomic","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::str","",324,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::iter","",335,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::str","",336,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::any","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::option","",245,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::slice","",329,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::str","",300,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::ptr","",255,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::result","",285,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::iter","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::str","",326,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::iter","",339,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::char","",279,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::ops","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::iter","",311,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::cmp","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::slice","",313,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::any","",249,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::iter","",305,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::slice","",337,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::iter","",332,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",292,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::char","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::result","",287,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::iter","",301,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::str::pattern","",277,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::iter","",327,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::slice","",303,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::iter","",291,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::str::pattern","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",275,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::sync::atomic","",259,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::hash","",250,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::iter","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::slice","",304,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::hash","",271,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::char","",282,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::sync::atomic","",269,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::str","",302,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::any","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::slice","",333,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::ops","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::cmp","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::str","",325,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::cell","",247,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::num","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::str::pattern","",276,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::str","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::num","",252,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::iter","",290,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::str","",284,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::cell","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::iter","",340,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::ops","",251,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::sync::atomic","",260,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::str","",318,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::cell","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::iter","",288,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::option","",319,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::iter","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::str","",331,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::iter","",322,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",298,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::slice","",312,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::option","",286,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::slice","",314,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::fmt","",280,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"bitand","sgx_tstd::num","",178,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"bitand","","",178,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"bitand","","",178,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"bitand","","",178,null],[11,"bitand","","",178,null],[11,"bitand","","",178,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"bitand","","",178,null],[11,"bitand","","",178,null],[11,"bitand","","",178,null],[11,"bitand","","",178,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"bitand","","",178,null],[11,"bitand","","",178,null],[11,"bitand","","",178,null],[11,"bitand","","",178,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"bitand","","",178,null],[11,"bitand","","",178,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"bitand","","",178,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"bitand","","",178,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"bitand","","",178,null],[11,"bitand","","",178,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"bitand","","",178,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"bitand","","",178,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"bitand","","",178,null],[11,"bitand","","",178,null],[11,"default","sgx_tstd::sync::atomic","",259,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"default","","",262,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"default","sgx_tstd::num","",178,{"inputs":[],"output":{"name":"wrapping"}}],[11,"default","sgx_tstd::sync::atomic","",265,{"inputs":[],"output":{"name":"atomici32"}}],[11,"default","","",257,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"default","","Creates a null `AtomicPtr<T>`.",270,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"default","","Creates an `AtomicBool` initialized to `false`.",266,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","sgx_tstd::marker","",248,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"default","sgx_tstd::cell","Creates an `UnsafeCell`, with the `Default` value for T.",264,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"default","sgx_tstd::option","Returns [`None`].",71,{"inputs":[],"output":{"name":"option"}}],[11,"default","sgx_tstd::sync::atomic","",263,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"default","sgx_tstd::cell","Creates a `Cell<T>`, with the `Default` value for T.",246,{"inputs":[],"output":{"name":"cell"}}],[11,"default","sgx_tstd::sync::atomic","",269,{"inputs":[],"output":{"name":"atomici64"}}],[11,"default","sgx_tstd::iter","",291,{"inputs":[],"output":{"name":"empty"}}],[11,"default","sgx_tstd::sync::atomic","",256,{"inputs":[],"output":{"name":"atomici16"}}],[11,"default","sgx_tstd::cell","Creates a `RefCell<T>`, with the `Default` value for T.",247,{"inputs":[],"output":{"name":"refcell"}}],[11,"default","sgx_tstd::hash","",271,{"inputs":[],"output":{"name":"siphasher"}}],[11,"default","","",272,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"default","sgx_tstd::sync::atomic","",261,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"default","sgx_tstd::fmt","",121,{"inputs":[],"output":{"name":"error"}}],[11,"default","sgx_tstd::sync::atomic","",268,{"inputs":[],"output":{"name":"atomici8"}}],[11,"default","","",260,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"default","sgx_tstd::hash","",250,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"default","","",273,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"default","sgx_tstd::mem","",243,{"inputs":[],"output":{"name":"manuallydrop"}}],[11,"deref_mut","","",243,null],[11,"deref_mut","sgx_tstd::cell","",244,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"write_str","sgx_tstd::fmt","",341,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_char","","",341,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_fmt","","",341,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","sgx_tstd::str","",299,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"clone","sgx_tstd::slice","",303,{"inputs":[{"name":"self"}],"output":{"name":"chunks"}}],[11,"clone","sgx_tstd::iter","",327,{"inputs":[{"name":"self"}],"output":{"name":"take"}}],[11,"clone","sgx_tstd::result","",70,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","sgx_tstd::num","",177,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"clone","sgx_tstd::str::pattern","",275,{"inputs":[{"name":"self"}],"output":{"name":"charslicesearcher"}}],[11,"clone","sgx_tstd::marker","",248,{"inputs":[{"name":"self"}],"output":{"name":"phantomdata"}}],[11,"clone","sgx_tstd::str","",115,{"inputs":[{"name":"self"}],"output":{"name":"parseboolerror"}}],[11,"clone","sgx_tstd::slice","",297,{"inputs":[{"name":"self"}],"output":{"name":"exactchunks"}}],[11,"clone","sgx_tstd::str::pattern","",278,{"inputs":[{"name":"self"}],"output":{"name":"charpredicatesearcher"}}],[11,"clone","sgx_tstd::cmp","",3,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","sgx_tstd::str","",326,{"inputs":[{"name":"self"}],"output":{"name":"rsplitterminator"}}],[11,"clone","","",321,{"inputs":[{"name":"self"}],"output":{"name":"matches"}}],[11,"clone","sgx_tstd::iter","",301,{"inputs":[{"name":"self"}],"output":{"name":"inspect"}}],[11,"clone","","",330,{"inputs":[{"name":"self"}],"output":{"name":"takewhile"}}],[11,"clone","sgx_tstd::fmt","",280,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"clone","sgx_tstd::option","",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","sgx_tstd::convert","",126,{"inputs":[{"name":"self"}],"output":{"name":"infallible"}}],[11,"clone","sgx_tstd::str","",323,{"inputs":[{"name":"self"}],"output":{"name":"splitterminator"}}],[11,"clone","","",284,{"inputs":[{"name":"self"}],"output":{"name":"matchindices"}}],[11,"clone","sgx_tstd::hash","",271,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"clone","sgx_tstd::char","",124,{"inputs":[{"name":"self"}],"output":{"name":"chartryfromerror"}}],[11,"clone","sgx_tstd::iter","",338,{"inputs":[{"name":"self"}],"output":{"name":"scan"}}],[11,"clone","","",298,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"clone","sgx_tstd::str","",324,{"inputs":[{"name":"self"}],"output":{"name":"rmatchindices"}}],[11,"clone","","",325,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"clone","sgx_tstd::iter","",292,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"clone","sgx_tstd::cell","",247,{"inputs":[{"name":"self"}],"output":{"name":"refcell"}}],[11,"clone","sgx_tstd::str","",300,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"clone","sgx_tstd::iter","",290,{"inputs":[{"name":"self"}],"output":{"name":"zip"}}],[11,"clone","","",288,{"inputs":[{"name":"self"}],"output":{"name":"flatmap"}}],[11,"clone","sgx_tstd::mem","",253,{"inputs":[{"name":"self"}],"output":{"name":"discriminant"}}],[11,"clone","sgx_tstd::hash","",272,{"inputs":[{"name":"self"}],"output":{"name":"siphasher24"}}],[11,"clone","sgx_tstd::str","",302,{"inputs":[{"name":"self"}],"output":{"name":"rsplit"}}],[11,"clone","sgx_tstd::iter","",332,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"clone","sgx_tstd::str","",318,{"inputs":[{"name":"self"}],"output":{"name":"charindices"}}],[11,"clone","sgx_tstd::result","",293,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","sgx_tstd::str::pattern","",90,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"clone","sgx_tstd::result","",285,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","sgx_tstd::option","",286,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","sgx_tstd::num","",252,{"inputs":[{"name":"self"}],"output":{"name":"parseinterror"}}],[11,"clone","sgx_tstd::hash","",250,{"inputs":[{"name":"self"}],"output":{"name":"buildhasherdefault"}}],[11,"clone","sgx_tstd::cell","",246,{"inputs":[{"name":"self"}],"output":{"name":"cell"}}],[11,"clone","sgx_tstd::str","",295,{"inputs":[{"name":"self"}],"output":{"name":"rmatches"}}],[11,"clone","sgx_tstd::iter","",291,{"inputs":[{"name":"self"}],"output":{"name":"empty"}}],[11,"clone","sgx_tstd::ops","",56,{"inputs":[{"name":"self"}],"output":{"name":"generatorstate"}}],[11,"clone","sgx_tstd::slice","",294,{"inputs":[{"name":"self"}],"output":{"name":"windows"}}],[11,"clone","sgx_tstd::char","",282,{"inputs":[{"name":"self"}],"output":{"name":"escapedefault"}}],[11,"clone","sgx_tstd::ptr","",258,{"inputs":[{"name":"self"}],"output":{"name":"nonnull"}}],[11,"clone","sgx_tstd::ops","",251,{"inputs":[{"name":"self"}],"output":{"name":"rangefull"}}],[11,"clone","sgx_tstd::slice","",314,{"inputs":[{"name":"self"}],"output":{"name":"rsplit"}}],[11,"clone","sgx_tstd::ops","",64,{"inputs":[{"name":"self"}],"output":{"name":"rangefrom"}}],[11,"clone","sgx_tstd::raw","",69,{"inputs":[{"name":"self"}],"output":{"name":"traitobject"}}],[11,"clone","sgx_tstd::str","",336,{"inputs":[{"name":"self"}],"output":{"name":"rsplitn"}}],[11,"clone","sgx_tstd::iter","",296,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"clone","","",317,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"clone","sgx_tstd::ops","",32,{"inputs":[{"name":"self"}],"output":{"name":"rangetoinclusive"}}],[11,"clone","sgx_tstd::iter","",316,{"inputs":[{"name":"self"}],"output":{"name":"once"}}],[11,"clone","sgx_tstd::slice","",306,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"clone","sgx_tstd::num","",254,{"inputs":[{"name":"self"}],"output":{"name":"parsefloaterror"}}],[11,"clone","sgx_tstd::iter","",311,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"clone","sgx_tstd::slice","",274,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","sgx_tstd::ops","",50,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"clone","sgx_tstd::char","",281,{"inputs":[{"name":"self"}],"output":{"name":"escapedebug"}}],[11,"clone","sgx_tstd::iter","",322,{"inputs":[{"name":"self"}],"output":{"name":"filtermap"}}],[11,"clone","sgx_tstd::char","",279,{"inputs":[{"name":"self"}],"output":{"name":"escapeunicode"}}],[11,"clone","sgx_tstd::mem","",243,{"inputs":[{"name":"self"}],"output":{"name":"manuallydrop"}}],[11,"clone_from","","",243,null],[11,"clone","sgx_tstd::str::pattern","",277,{"inputs":[{"name":"self"}],"output":{"name":"charsearcher"}}],[11,"clone","sgx_tstd::option","",245,{"inputs":[{"name":"self"}],"output":{"name":"noneerror"}}],[11,"clone","sgx_tstd::iter","",305,{"inputs":[{"name":"self"}],"output":{"name":"repeat"}}],[11,"clone","sgx_tstd::str::pattern","",276,{"inputs":[{"name":"self"}],"output":{"name":"strsearcher"}}],[11,"clone","sgx_tstd::char","",125,{"inputs":[{"name":"self"}],"output":{"name":"parsecharerror"}}],[11,"clone","sgx_tstd::str","",310,{"inputs":[{"name":"self"}],"output":{"name":"linesany"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"clone","sgx_tstd::sync::atomic","",202,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","sgx_tstd::hash","",273,{"inputs":[{"name":"self"}],"output":{"name":"siphasher13"}}],[11,"clone","sgx_tstd::iter","",340,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"clone","sgx_tstd::str","",331,{"inputs":[{"name":"self"}],"output":{"name":"splitn"}}],[11,"clone","sgx_tstd::ptr","",255,{"inputs":[{"name":"self"}],"output":{"name":"unique"}}],[11,"clone","sgx_tstd::iter","",308,{"inputs":[{"name":"self"}],"output":{"name":"skip"}}],[11,"clone","sgx_tstd::option","",319,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","sgx_tstd::iter","",339,{"inputs":[{"name":"self"}],"output":{"name":"skipwhile"}}],[11,"clone","sgx_tstd::fmt","",121,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"clone","sgx_tstd::ops","",45,{"inputs":[{"name":"self"}],"output":{"name":"rangeto"}}],[11,"clone","sgx_tstd::any","",249,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[11,"clone","sgx_tstd::str","",307,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"clone","sgx_tstd::ops","",30,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","sgx_tstd::iter","",283,{"inputs":[{"name":"self"}],"output":{"name":"chain"}}],[11,"clone","","",335,{"inputs":[{"name":"self"}],"output":{"name":"stepby"}}],[11,"clone","sgx_tstd::char","",328,{"inputs":[{"name":"self"}],"output":{"name":"decodeutf8"}}],[11,"clone","sgx_tstd::num","",267,{"inputs":[{"name":"self"}],"output":{"name":"tryfrominterror"}}],[11,"clone","sgx_tstd::iter","",309,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"partial_cmp","sgx_tstd::result","",70,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",70,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",70,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",70,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",70,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"partial_cmp","sgx_tstd::num","",178,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",178,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",178,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",178,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",178,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"partial_cmp","sgx_tstd::option","",71,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",71,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",71,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",71,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",71,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"partial_cmp","sgx_tstd::marker","",248,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","sgx_tstd::cmp","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"partial_cmp","sgx_tstd::convert","",126,{"inputs":[{"name":"self"},{"name":"infallible"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","sgx_tstd::ops","",56,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",56,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"le","","",56,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"gt","","",56,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"ge","","",56,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"partial_cmp","sgx_tstd::cell","",247,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",247,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"le","","",247,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"gt","","",247,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"ge","","",247,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"partial_cmp","sgx_tstd::cmp","",3,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","sgx_tstd::fmt","",121,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","sgx_tstd::any","",249,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",249,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"le","","",249,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"gt","","",249,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ge","","",249,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"partial_cmp","sgx_tstd::option","",245,{"inputs":[{"name":"self"},{"name":"noneerror"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","sgx_tstd::mem","",243,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",243,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"le","","",243,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"gt","","",243,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"ge","","",243,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"partial_cmp","sgx_tstd::cell","",246,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",246,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"le","","",246,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"gt","","",246,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"ge","","",246,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"as_mut","sgx_tstd::boxed","",114,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","sgx_tstd::vec","",146,null],[11,"as_mut","","",146,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"call_once","sgx_tstd::boxed","",114,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",114,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"r"}}],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","sgx_tstd::rc","Equality for two `Rc`s.",132,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc`s.",132,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","sgx_tstd::borrow","",74,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",74,null],[11,"ne","","",74,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","","",342,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::heap","",343,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"bool"}}],[11,"ne","","",343,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::linked_list","",344,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",344,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::borrow","",74,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",74,null],[11,"ne","","",74,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::btree_map","",345,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::string","",133,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","","",342,null],[11,"eq","sgx_tstd::string","",133,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","","",342,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","sgx_tstd::string","",133,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","sgx_tstd::borrow","",74,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","sgx_tstd::string","",133,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",119,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","sgx_tstd::collections","",102,{"inputs":[{"name":"self"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::borrow","",74,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","","",342,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"eq","","",342,null],[11,"eq","sgx_tstd::heap","",229,{"inputs":[{"name":"self"},{"name":"allocerr"}],"output":{"name":"bool"}}],[11,"ne","","",229,{"inputs":[{"name":"self"},{"name":"allocerr"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","","",342,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","","",342,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::boxed","",114,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","","",342,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::btree_set","",346,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",346,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","","",342,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",342,null],[11,"eq","sgx_tstd::sync","Equality for two `Arc`s.",347,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Arc`s.",347,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","sgx_tstd::vec","",146,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","","",342,null],[11,"eq","","",342,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","","",342,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","sgx_tstd::heap","",348,{"inputs":[{"name":"self"},{"name":"cannotreallocinplace"}],"output":{"name":"bool"}}],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"eq","sgx_tstd::vec","",146,null],[11,"ne","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"eq","sgx_tstd::collections::vec_deque","",342,null],[11,"add","sgx_tstd::borrow","",74,null],[11,"add","sgx_tstd::string","",133,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"add","sgx_tstd::borrow","",74,null],[11,"index","sgx_tstd::collections::vec_deque","",342,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index","sgx_tstd::vec","",146,null],[11,"index","","",146,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","sgx_tstd::string","",133,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index","","",133,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","sgx_tstd::vec","",146,null],[11,"index","","",146,null],[11,"index","sgx_tstd::collections::btree_map","Returns a reference to the value corresponding to the supplied key.",345,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"index","sgx_tstd::string","",133,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","sgx_tstd::vec","",146,null],[11,"index","","",146,null],[11,"index","","",146,null],[11,"index","sgx_tstd::string","",133,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index","","",133,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",133,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"range"}],"output":{"name":"str"}}],[11,"fmt","sgx_tstd::collections::vec_deque","",349,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::btree_set","",350,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::heap","",348,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::string","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::vec_deque","",351,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::linked_list","",352,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::btree_map","",353,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",354,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::vec","",355,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::string","",356,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::heap","",228,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::vec","",357,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::btree_map","",358,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::binary_heap","",359,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::btree_map","",360,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::btree_set","",361,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",346,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::linked_list","",362,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",344,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::vec_deque","",342,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::btree_set","",363,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::heap","",229,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::string","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::vec_deque","",364,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::heap","",343,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::btree_map","",365,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::binary_heap","",366,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::linked_list","",367,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",368,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::btree_map","",369,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::vec_deque","",370,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::vec","",371,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::btree_map","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::btree_set","",372,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::str","",373,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::binary_heap","",374,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::vec_deque","",375,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::vec","",376,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::linked_list","",377,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::btree_map","",378,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::sync","",379,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::vec","",380,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::binary_heap","",381,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::btree_map","",382,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::vec_deque","",383,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::btree_set","",384,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::binary_heap","",385,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::btree_set","",386,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::linked_list","",387,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::borrow","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::rc","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::binary_heap","",388,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::btree_map","",345,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",389,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::string","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::btree_map","",390,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::vec","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::sync","",347,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::boxed","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::rc","",391,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::collections::btree_set","",392,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::heap","",393,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"finalize","sgx_tstd::boxed","",114,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::rc","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::sync","",347,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"make_place","sgx_tstd::collections::vec_deque","",364,{"inputs":[{"name":"self"}],"output":{"name":"placefront"}}],[11,"make_place","sgx_tstd::vec","",371,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"make_place","sgx_tstd::collections::vec_deque","",383,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"make_place","sgx_tstd::boxed","",394,{"inputs":[{"name":"self"}],"output":{"name":"intermediatebox"}}],[11,"make_place","sgx_tstd::collections::linked_list","",367,{"inputs":[{"name":"self"}],"output":{"name":"backplace"}}],[11,"make_place","","",387,{"inputs":[{"name":"self"}],"output":{"name":"frontplace"}}],[11,"deref_mut","sgx_tstd::collections::binary_heap","",374,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","sgx_tstd::boxed","",114,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","sgx_tstd::string","",133,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref_mut","sgx_tstd::vec","",146,null],[11,"to_string","sgx_tstd::borrow","",74,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_string","sgx_tstd::string","",133,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"default","sgx_tstd::collections::btree_set","Makes an empty `BTreeSet<T>` with a reasonable choice of B.",346,{"inputs":[],"output":{"name":"btreeset"}}],[11,"default","sgx_tstd::borrow","Creates an owned Cow<'a, B> with the default value for the contained owned value.",74,{"inputs":[],"output":{"name":"cow"}}],[11,"default","sgx_tstd::boxed","",114,{"inputs":[],"output":{"name":"box"}}],[11,"default","sgx_tstd::collections::linked_list","Creates an empty `LinkedList<T>`.",344,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"default","sgx_tstd::sync","Creates a new `Arc<T>`, with the `Default` value for `T`.",347,{"inputs":[],"output":{"name":"arc"}}],[11,"default","sgx_tstd::vec","Creates an empty `Vec<T>`.",146,{"inputs":[],"output":{"name":"vec"}}],[11,"default","sgx_tstd::boxed","Creates a `Box<T>`, with the `Default` value for T.",114,{"inputs":[],"output":{"name":"box"}}],[11,"default","sgx_tstd::collections::binary_heap","Creates an empty `BinaryHeap<T>`.",359,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"default","sgx_tstd::boxed","",114,{"inputs":[],"output":{"generics":["str"],"name":"box"}}],[11,"default","sgx_tstd::rc","Constructs a new `Weak<T>`, allocating memory for `T` without initializing it. Calling [`upgrade`] on the return value always gives [`None`].",391,{"inputs":[],"output":{"name":"weak"}}],[11,"default","sgx_tstd::heap","",393,{"inputs":[],"output":{"name":"heap"}}],[11,"default","sgx_tstd::collections::btree_map","Creates an empty `BTreeMap<K, V>`.",345,{"inputs":[],"output":{"name":"btreemap"}}],[11,"default","sgx_tstd::rc","Creates a new `Rc<T>`, with the `Default` value for `T`.",132,{"inputs":[],"output":{"name":"rc"}}],[11,"default","sgx_tstd::collections::vec_deque","Creates an empty `VecDeque<T>`.",342,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"default","sgx_tstd::string","Creates an empty `String`.",133,{"inputs":[],"output":{"name":"string"}}],[11,"default","sgx_tstd::sync","Constructs a new `Weak<T>`, allocating memory for `T` without initializing it. Calling [`upgrade`] on the return value always gives [`None`].",379,{"inputs":[],"output":{"name":"weak"}}],[11,"partial_cmp","sgx_tstd::collections::btree_map","",345,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","sgx_tstd::sync","Partial comparison for two `Arc`s.",347,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","Less-than comparison for two `Arc`s.",347,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"le","","'Less than or equal to' comparison for two `Arc`s.",347,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Arc`s.",347,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater than or equal to' comparison for two `Arc`s.",347,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"partial_cmp","sgx_tstd::string","",133,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",133,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",133,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",133,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",133,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"partial_cmp","sgx_tstd::borrow","",74,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","sgx_tstd::boxed","",114,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",114,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",114,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",114,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",114,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","sgx_tstd::vec","",146,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","sgx_tstd::rc","Partial comparison for two `Rc`s.",132,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc`s.",132,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less than or equal to' comparison for two `Rc`s.",132,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc`s.",132,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater than or equal to' comparison for two `Rc`s.",132,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","sgx_tstd::collections::vec_deque","",342,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","sgx_tstd::collections::btree_set","",346,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",346,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",346,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",346,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",346,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"partial_cmp","sgx_tstd::collections::linked_list","",344,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"write_str","sgx_tstd::string","",133,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_char","","",133,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","sgx_tstd::collections::btree_set","",372,{"inputs":[{"name":"self"}],"output":{"name":"difference"}}],[11,"clone","","",384,{"inputs":[{"name":"self"}],"output":{"name":"symmetricdifference"}}],[11,"clone","sgx_tstd::boxed","",114,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","sgx_tstd::vec","",355,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","sgx_tstd::collections::linked_list","",344,{"inputs":[{"name":"self"}],"output":{"name":"linkedlist"}}],[11,"clone","sgx_tstd::str","",373,{"inputs":[{"name":"self"}],"output":{"name":"encodeutf16"}}],[11,"clone","sgx_tstd::boxed","Returns a new box with a `clone()` of this box's contents.",114,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",114,null],[11,"clone","sgx_tstd::vec","",146,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"clone_from","","",146,null],[11,"clone","sgx_tstd::heap","",343,{"inputs":[{"name":"self"}],"output":{"name":"layout"}}],[11,"clone","","",229,{"inputs":[{"name":"self"}],"output":{"name":"allocerr"}}],[11,"clone","sgx_tstd::collections::linked_list","",362,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","sgx_tstd::borrow","",74,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"clone_from","","",74,null],[11,"clone","sgx_tstd::collections::btree_map","",382,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"clone","sgx_tstd::collections::vec_deque","",351,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","sgx_tstd::collections::binary_heap","",381,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","sgx_tstd::sync","Makes a clone of the `Arc` pointer.",347,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"clone","sgx_tstd::collections::vec_deque","",349,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","sgx_tstd::collections::binary_heap","",388,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","sgx_tstd::rc","Makes a clone of the `Rc` pointer.",132,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"clone","sgx_tstd::collections::btree_set","",361,{"inputs":[{"name":"self"}],"output":{"name":"intersection"}}],[11,"clone","sgx_tstd::collections::binary_heap","",359,{"inputs":[{"name":"self"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",359,null],[11,"clone","sgx_tstd::collections::btree_set","",346,{"inputs":[{"name":"self"}],"output":{"name":"btreeset"}}],[11,"clone","","",350,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","","",363,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"clone","sgx_tstd::sync","Makes a clone of the `Weak` pointer that points to the same value.",379,{"inputs":[{"name":"self"}],"output":{"name":"weak"}}],[11,"clone","sgx_tstd::rc","Makes a clone of the `Weak` pointer that points to the same value.",391,{"inputs":[{"name":"self"}],"output":{"name":"weak"}}],[11,"clone","sgx_tstd::string","",119,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"clone","sgx_tstd::collections","",102,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"clone","sgx_tstd::string","",133,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone_from","","",133,null],[11,"clone","sgx_tstd::boxed","",394,{"inputs":[{"name":"self"}],"output":{"name":"exchangeheapsingleton"}}],[11,"clone","sgx_tstd::collections::btree_map","",360,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","sgx_tstd::boxed","",114,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"box"}}],[11,"clone","sgx_tstd::collections::vec_deque","",342,{"inputs":[{"name":"self"}],"output":{"name":"vecdeque"}}],[11,"clone","sgx_tstd::collections::btree_map","",345,{"inputs":[{"name":"self"}],"output":{"name":"btreemap"}}],[11,"clone","sgx_tstd::collections::linked_list","",377,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","sgx_tstd::heap","",393,{"inputs":[{"name":"self"}],"output":{"name":"heap"}}],[11,"clone","sgx_tstd::collections::btree_map","",365,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","sgx_tstd::collections::btree_set","",386,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","sgx_tstd::collections::btree_map","",390,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"clone","sgx_tstd::heap","",348,{"inputs":[{"name":"self"}],"output":{"name":"cannotreallocinplace"}}],[11,"from_iter","sgx_tstd::borrow","",74,{"inputs":[{"name":"i"}],"output":{"generics":["str"],"name":"cow"}}],[11,"from_iter","sgx_tstd::vec","",146,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"from_iter","sgx_tstd::collections::btree_map","",345,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"from_iter","sgx_tstd::borrow","",74,{"inputs":[{"name":"i"}],"output":{"generics":["str"],"name":"cow"}}],[11,"from_iter","sgx_tstd::string","",133,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","sgx_tstd::collections::linked_list","",344,{"inputs":[{"name":"i"}],"output":{"name":"linkedlist"}}],[11,"from_iter","sgx_tstd::borrow","",74,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"from_iter","sgx_tstd::collections::vec_deque","",342,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"from_iter","sgx_tstd::string","",133,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",133,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","sgx_tstd::borrow","",74,{"inputs":[{"name":"i"}],"output":{"generics":["str"],"name":"cow"}}],[11,"from_iter","sgx_tstd::string","",133,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",133,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","sgx_tstd::collections::btree_set","",346,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"from_iter","sgx_tstd::collections::binary_heap","",359,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"next_back","","",388,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::collections::btree_map","",382,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",365,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::vec","",355,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::collections::btree_map","",353,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::collections::vec_deque","",375,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",375,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next_back","sgx_tstd::collections::binary_heap","",381,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::collections::vec_deque","",370,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::collections::btree_map","",358,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::collections::vec_deque","",349,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",349,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next_back","sgx_tstd::collections::linked_list","",362,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::boxed","",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::vec","",376,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::collections::btree_map","",389,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::string","",356,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"next_back","sgx_tstd::collections::btree_map","",390,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::collections::btree_set","",386,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::collections::linked_list","",377,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::collections::btree_map","",360,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::collections::btree_set","",350,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",392,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::collections::binary_heap","",385,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::vec","",357,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::collections::btree_map","",369,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::collections::vec_deque","",351,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","sgx_tstd::collections::linked_list","",352,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_str","sgx_tstd::string","",133,{"inputs":[{"name":"str"}],"output":{"generics":["string","parseerror"],"name":"result"}}],[11,"is_empty","sgx_tstd::collections::vec_deque","",375,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","",351,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","sgx_tstd::collections::btree_set","",386,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","sgx_tstd::collections::binary_heap","",385,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","sgx_tstd::collections::btree_map","",358,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",382,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","sgx_tstd::vec","",357,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","sgx_tstd::collections::btree_set","",392,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","sgx_tstd::collections::binary_heap","",388,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","sgx_tstd::boxed","",114,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","sgx_tstd::collections::btree_map","",390,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",353,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",360,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","sgx_tstd::vec","",355,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","sgx_tstd::collections::binary_heap","",381,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","sgx_tstd::collections::btree_map","",369,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","sgx_tstd::collections::vec_deque","",349,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","sgx_tstd::vec","",146,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"cmp","sgx_tstd::borrow","",74,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"cmp","sgx_tstd::sync","Comparison for two `Arc`s.",347,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"ordering"}}],[11,"cmp","sgx_tstd::collections::vec_deque","",342,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"cmp","sgx_tstd::boxed","",114,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"cmp","sgx_tstd::collections::btree_set","",346,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"cmp","sgx_tstd::rc","Comparison for two `Rc`s.",132,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"cmp","sgx_tstd::string","",133,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"cmp","sgx_tstd::collections::linked_list","",344,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"cmp","sgx_tstd::collections::btree_map","",345,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"borrow_mut","sgx_tstd::boxed","",114,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow_mut","sgx_tstd::vec","",146,null],[11,"finalize","sgx_tstd::collections::linked_list","",387,null],[11,"finalize","","",367,null],[11,"finalize","sgx_tstd::collections::vec_deque","",364,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"finalize","sgx_tstd::vec","",371,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"finalize","sgx_tstd::collections::vec_deque","",383,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"finalize","sgx_tstd::collections::binary_heap","",366,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"finalize","sgx_tstd::boxed","",395,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"alloc","sgx_tstd::heap","",393,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"generics":["allocerr"],"name":"result"}}],[11,"oom","","",393,null],[11,"dealloc","","",393,null],[11,"usable_size","","",393,null],[11,"realloc","","",393,null],[11,"alloc_zeroed","","",393,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"generics":["allocerr"],"name":"result"}}],[11,"alloc_excess","","",393,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"generics":["excess","allocerr"],"name":"result"}}],[11,"realloc_excess","","",393,null],[11,"grow_in_place","","",393,null],[11,"shrink_in_place","","",393,null],[11,"pointer","sgx_tstd::vec","",371,null],[11,"pointer","sgx_tstd::collections::vec_deque","",383,null],[11,"pointer","sgx_tstd::collections::binary_heap","",366,null],[11,"pointer","sgx_tstd::boxed","",395,null],[11,"pointer","sgx_tstd::collections::linked_list","",387,null],[11,"pointer","","",367,null],[11,"pointer","sgx_tstd::collections::vec_deque","",364,null],[11,"make_place","sgx_tstd::boxed","",395,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"add_assign","sgx_tstd::borrow","",74,null],[11,"add_assign","","",74,null],[11,"add_assign","sgx_tstd::string","",133,null],[11,"extend","sgx_tstd::collections::binary_heap","",359,null],[11,"extend","sgx_tstd::collections::linked_list","",344,null],[11,"extend","sgx_tstd::vec","",146,null],[11,"extend","","",146,null],[11,"extend","sgx_tstd::collections::btree_set","",346,null],[11,"extend","sgx_tstd::collections::linked_list","",344,null],[11,"extend","sgx_tstd::string","",133,null],[11,"extend","sgx_tstd::collections::btree_set","",346,null],[11,"extend","sgx_tstd::string","",133,null],[11,"extend","","",133,null],[11,"extend","sgx_tstd::collections::vec_deque","",342,null],[11,"extend","sgx_tstd::string","",133,null],[11,"extend","sgx_tstd::collections::btree_map","",345,null],[11,"extend","sgx_tstd::collections::binary_heap","",359,null],[11,"extend","sgx_tstd::collections::vec_deque","",342,null],[11,"extend","sgx_tstd::collections::btree_map","",345,null],[11,"extend","sgx_tstd::string","",133,null],[11,"hash","sgx_tstd::collections::btree_set","",346,null],[11,"hash","sgx_tstd::string","",133,null],[11,"hash","sgx_tstd::sync","",347,null],[11,"hash","sgx_tstd::collections","",102,null],[11,"hash","sgx_tstd::collections::vec_deque","",342,null],[11,"hash","sgx_tstd::borrow","",74,null],[11,"hash","sgx_tstd::collections::btree_map","",345,null],[11,"hash","sgx_tstd::collections::linked_list","",344,null],[11,"hash","sgx_tstd::boxed","",114,null],[11,"hash","sgx_tstd::rc","",132,null],[11,"hash","sgx_tstd::vec","",146,null],[11,"next","sgx_tstd::string","",356,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"size_hint","","",356,null],[11,"next","sgx_tstd::collections::btree_map","",360,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",360,null],[11,"next","","",390,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",390,null],[11,"next","sgx_tstd::vec","",380,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",380,null],[11,"next","sgx_tstd::collections::vec_deque","",349,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",349,null],[11,"fold","","",349,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next","sgx_tstd::collections::btree_map","",365,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","sgx_tstd::collections::btree_set","",372,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",372,null],[11,"next","sgx_tstd::vec","",376,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",376,null],[11,"next","sgx_tstd::collections::btree_set","",363,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",363,null],[11,"next","sgx_tstd::collections::linked_list","",368,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",368,null],[11,"next","sgx_tstd::collections::btree_set","",392,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",392,null],[11,"next","sgx_tstd::boxed","",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",114,null],[11,"nth","","",114,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","sgx_tstd::vec","",357,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",357,null],[11,"next","sgx_tstd::collections::linked_list","",352,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",352,null],[11,"next","sgx_tstd::collections::btree_map","",382,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",382,null],[11,"next","sgx_tstd::vec","",355,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",355,null],[11,"count","","",355,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","sgx_tstd::collections::btree_map","",369,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",369,null],[11,"next","sgx_tstd::collections::vec_deque","",370,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",370,null],[11,"next","sgx_tstd::collections::btree_set","",386,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",386,null],[11,"next","","",361,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",361,null],[11,"next","sgx_tstd::str","",373,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"size_hint","","",373,null],[11,"next","sgx_tstd::collections::btree_map","",358,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",358,null],[11,"next","","",389,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","sgx_tstd::collections::binary_heap","",385,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",385,null],[11,"next","sgx_tstd::collections::linked_list","",362,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",362,null],[11,"next","","",377,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",377,null],[11,"next","sgx_tstd::collections::btree_map","",353,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",353,null],[11,"next","sgx_tstd::collections::vec_deque","",375,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",375,null],[11,"fold","","",375,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next","sgx_tstd::collections::btree_set","",384,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",384,null],[11,"next","sgx_tstd::collections::binary_heap","",388,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",388,null],[11,"next","sgx_tstd::collections::btree_set","",350,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","sgx_tstd::collections::binary_heap","",381,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",381,null],[11,"next","sgx_tstd::collections::vec_deque","",351,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",351,null],[11,"start","sgx_tstd::ops","",50,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",50,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",251,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",251,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",30,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",30,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",45,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",45,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",64,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",64,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"fmt","sgx_tstd::heap","",229,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::rc","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::sync","",347,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::heap","",348,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::string","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::boxed","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::string","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::borrow","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"resume","sgx_tstd::boxed","",114,{"inputs":[{"name":"self"}],"output":{"name":"generatorstate"}}],[11,"borrow","sgx_tstd::string","",133,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"borrow","sgx_tstd::rc","",132,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","sgx_tstd::vec","",146,null],[11,"borrow","sgx_tstd::sync","",347,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","sgx_tstd::borrow","",74,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"borrow","sgx_tstd::boxed","",114,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"index_mut","sgx_tstd::vec","",146,null],[11,"index_mut","sgx_tstd::string","",133,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",133,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index_mut","sgx_tstd::vec","",146,null],[11,"index_mut","sgx_tstd::string","",133,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","sgx_tstd::vec","",146,null],[11,"index_mut","sgx_tstd::collections::vec_deque","",342,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","sgx_tstd::vec","",146,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","sgx_tstd::string","",133,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","sgx_tstd::vec","",146,null],[11,"index_mut","sgx_tstd::string","",133,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","sgx_tstd::vec","",146,null],[11,"index_mut","sgx_tstd::string","",133,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","sgx_tstd::vec","",146,null],[11,"drop","","",380,null],[11,"drop","sgx_tstd::rc","Drops the `Rc`.",132,null],[11,"drop","","Drops the `Weak` pointer.",391,null],[11,"drop","sgx_tstd::collections::vec_deque","",370,null],[11,"drop","sgx_tstd::collections::btree_map","",345,null],[11,"drop","sgx_tstd::string","",356,null],[11,"drop","sgx_tstd::boxed","",114,null],[11,"drop","sgx_tstd::sync","Drops the `Arc`.",347,null],[11,"drop","sgx_tstd::vec","",146,null],[11,"drop","sgx_tstd::sync","Drops the `Weak` pointer.",379,null],[11,"drop","sgx_tstd::collections::vec_deque","",342,null],[11,"drop","sgx_tstd::vec","",357,null],[11,"drop","sgx_tstd::collections::binary_heap","",374,null],[11,"drop","sgx_tstd::vec","",355,null],[11,"drop","sgx_tstd::collections::linked_list","",344,null],[11,"drop","sgx_tstd::boxed","",395,null],[11,"drop","sgx_tstd::collections::btree_map","",353,null],[11,"drop","sgx_tstd::collections::linked_list","",368,null],[11,"drop","sgx_tstd::vec","",376,null],[11,"deref","","",146,null],[11,"deref","sgx_tstd::sync","",347,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","sgx_tstd::string","",133,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","sgx_tstd::boxed","",114,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","sgx_tstd::rc","",132,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","sgx_tstd::collections::binary_heap","",374,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","sgx_tstd::borrow","",74,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"from","","",74,{"inputs":[{"name":"string"}],"output":{"generics":["str"],"name":"cow"}}],[11,"from","sgx_tstd::boxed","",114,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"box"}}],[11,"from","sgx_tstd::collections::vec_deque","",342,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","sgx_tstd::string","",133,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"string"}}],[11,"from","sgx_tstd::vec","",146,null],[11,"from","","",146,{"inputs":[{"name":"box"}],"output":{"name":"vec"}}],[11,"from","","",146,{"inputs":[{"name":"str"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"from","sgx_tstd::string","",133,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","sgx_tstd::collections::binary_heap","",359,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","sgx_tstd::boxed","",114,{"inputs":[{"generics":["str"],"name":"box"}],"output":{"name":"box"}}],[11,"from","sgx_tstd::sync","",347,{"inputs":[{"name":"box"}],"output":{"name":"arc"}}],[11,"from","sgx_tstd::vec","",146,null],[11,"from","sgx_tstd::sync","",347,{"inputs":[{"name":"vec"}],"output":{"name":"arc"}}],[11,"from","sgx_tstd::vec","",146,{"inputs":[{"name":"cow"}],"output":{"name":"vec"}}],[11,"from","sgx_tstd::sync","",347,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"arc"}}],[11,"from","sgx_tstd::vec","",146,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from","sgx_tstd::borrow","",74,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"cow"}}],[11,"from","","",74,null],[11,"from","sgx_tstd::rc","",132,null],[11,"from","sgx_tstd::vec","",146,{"inputs":[{"name":"string"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"from","","",146,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"from","sgx_tstd::rc","",132,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"rc"}}],[11,"from","sgx_tstd::sync","",347,null],[11,"from","sgx_tstd::string","",133,{"inputs":[{"generics":["str"],"name":"box"}],"output":{"name":"string"}}],[11,"from","sgx_tstd::sync","",347,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"from","sgx_tstd::rc","",132,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"from","","",132,{"inputs":[{"name":"vec"}],"output":{"name":"rc"}}],[11,"from","sgx_tstd::borrow","",74,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from","sgx_tstd::rc","",132,{"inputs":[{"name":"string"}],"output":{"generics":["str"],"name":"rc"}}],[11,"from","","",132,{"inputs":[{"name":"box"}],"output":{"name":"rc"}}],[11,"from","sgx_tstd::boxed","",114,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"from","","",114,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from","","",114,{"inputs":[{"name":"string"}],"output":{"generics":["str"],"name":"box"}}],[11,"from","","",114,null],[11,"from","sgx_tstd::sync","",347,{"inputs":[{"name":"string"}],"output":{"generics":["str"],"name":"arc"}}],[11,"finish","sgx_tstd::boxed","",114,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",114,null],[11,"write_u8","","",114,null],[11,"write_u16","","",114,null],[11,"write_u32","","",114,null],[11,"write_u64","","",114,null],[11,"write_u128","","",114,null],[11,"write_usize","","",114,null],[11,"write_i8","","",114,null],[11,"write_i16","","",114,null],[11,"write_i32","","",114,null],[11,"write_i64","","",114,null],[11,"write_i128","","",114,null],[11,"write_isize","","",114,null],[11,"as_ref","sgx_tstd::vec","",146,null],[11,"as_ref","","",146,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_ref","sgx_tstd::string","",133,null],[11,"as_ref","sgx_tstd::sync","",347,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","sgx_tstd::boxed","",114,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","sgx_tstd::borrow","",74,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","sgx_tstd::string","",133,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","sgx_tstd::rc","",132,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_iter","sgx_tstd::collections::vec_deque","Consumes the `VecDeque` into a front-to-back iterator yielding elements by value.",342,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","sgx_tstd::collections::binary_heap","Creates a consuming iterator, that is, one that moves each value out of the binary heap in arbitrary order. The binary heap cannot be used after calling this.",359,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","sgx_tstd::collections::linked_list","Consumes the list into an iterator yielding elements by value.",344,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","sgx_tstd::collections::btree_set","Gets an iterator for moving out the `BTreeSet`'s contents.",346,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","sgx_tstd::vec","Creates a consuming iterator, that is, one that moves each value out of the vector (from start to end). The vector cannot be used after calling this.",146,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","sgx_tstd::collections::btree_map","",345,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","sgx_tstd::str","",396,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[11,"clone","sgx_tstd::char","",120,{"inputs":[{"name":"self"}],"output":{"name":"decodeutf16error"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"unicodeversion"}}],[11,"clone","","",397,{"inputs":[{"name":"self"}],"output":{"name":"decodeutf16"}}],[11,"eq","","",120,{"inputs":[{"name":"self"},{"name":"decodeutf16error"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"self"},{"name":"decodeutf16error"}],"output":{"name":"bool"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"bool"}}],[11,"fmt","","",398,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",397,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::str","",396,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","sgx_tstd::char","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"next_back","sgx_tstd::str","",396,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","sgx_tstd::char","",398,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"next","","",399,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"next","","",397,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"size_hint","","",397,null],[11,"next","sgx_tstd::str","",396,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"cmp","sgx_tstd::char","",95,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",95,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",95,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"bool"}}],[11,"le","","",95,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"bool"}}],[11,"gt","","",95,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"bool"}}],[11,"ge","","",95,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"bool"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",398,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"alloc","sgx_tstd::heap","",400,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"generics":["allocerr"],"name":"result"}}],[11,"alloc_zeroed","","",400,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"generics":["allocerr"],"name":"result"}}],[11,"dealloc","","",400,null],[11,"realloc","","",400,null],[11,"oom","","",400,null],[11,"usable_size","","",400,null],[11,"alloc_excess","","",400,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"generics":["excess","allocerr"],"name":"result"}}],[11,"realloc_excess","","",400,null],[11,"grow_in_place","","",400,null],[11,"shrink_in_place","","",400,null],[11,"clone","sgx_tstd::ffi","",401,{"inputs":[{"name":"self"}],"output":{"name":"cstring"}}],[11,"clone","sgx_tstd::enclave","",230,{"inputs":[{"name":"self"}],"output":{"name":"sgxthreadpolicy"}}],[11,"clone","sgx_tstd::ffi","",129,{"inputs":[{"name":"self"}],"output":{"name":"intostringerror"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"nulerror"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"frombyteswithnulerror"}}],[11,"eq","","",129,{"inputs":[{"name":"self"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"self"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"eq","","",401,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ne","","",401,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"frombyteswithnulerror"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"self"},{"name":"frombyteswithnulerror"}],"output":{"name":"bool"}}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"ne","","",127,{"inputs":[{"name":"self"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"eq","","",402,{"inputs":[{"name":"self"},{"name":"cstr"}],"output":{"name":"bool"}}],[11,"borrow","","",401,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"index","","",401,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"cstr"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",401,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",402,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"to_owned","","",402,{"inputs":[{"name":"self"}],"output":{"name":"cstring"}}],[11,"drop","","",401,null],[11,"hash","","",401,null],[11,"hash","","",402,null],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",402,null],[11,"from_bytes_with_nul","","",402,null],[11,"from_bytes_with_nul_unchecked","","",402,null],[11,"as_ptr","","",402,null],[11,"to_bytes","","",402,null],[11,"to_bytes_with_nul","","",402,null],[11,"to_str","","",402,{"inputs":[{"name":"self"}],"output":{"generics":["str","utf8error"],"name":"result"}}],[11,"to_string_lossy","","",402,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"cow"}}],[11,"into_c_string","","",402,{"inputs":[{"generics":["cstr"],"name":"box"}],"output":{"name":"cstring"}}],[11,"deref","","",401,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"cmp","","",401,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"ordering"}}],[11,"cmp","","",402,{"inputs":[{"name":"self"},{"name":"cstr"}],"output":{"name":"ordering"}}],[11,"from","sgx_tstd::vec","",146,{"inputs":[{"name":"cstring"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"from","sgx_tstd::ffi","",401,{"inputs":[{"generics":["cstr"],"name":"box"}],"output":{"name":"cstring"}}],[11,"from","","",401,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"from","sgx_tstd::sync","",347,{"inputs":[{"name":"cstring"}],"output":{"generics":["cstr"],"name":"arc"}}],[11,"from","sgx_tstd::rc","",132,{"inputs":[{"name":"cstr"}],"output":{"generics":["cstr"],"name":"rc"}}],[11,"from","sgx_tstd::sync","",347,{"inputs":[{"name":"cstr"}],"output":{"generics":["cstr"],"name":"arc"}}],[11,"from","sgx_tstd::boxed","",114,{"inputs":[{"name":"cstring"}],"output":{"generics":["cstr"],"name":"box"}}],[11,"from","","",114,{"inputs":[{"name":"cstr"}],"output":{"generics":["cstr"],"name":"box"}}],[11,"from","sgx_tstd::rc","",132,{"inputs":[{"name":"cstring"}],"output":{"generics":["cstr"],"name":"rc"}}],[11,"default","sgx_tstd::ffi","Creates an empty `CString`.",401,{"inputs":[],"output":{"name":"cstring"}}],[11,"default","sgx_tstd::boxed","",114,{"inputs":[],"output":{"generics":["cstr"],"name":"box"}}],[11,"partial_cmp","sgx_tstd::ffi","",401,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",401,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"le","","",401,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"gt","","",401,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ge","","",401,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",402,{"inputs":[{"name":"self"},{"name":"cstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"as_ref","","",401,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"as_ref","","",402,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"of","sgx_tstd::any","Returns the `TypeId` of the type this generic function has been instantiated with.",249,{"inputs":[],"output":{"name":"typeid"}}],[11,"get","sgx_tstd::cell","Returns a copy of the contained value.",246,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Creates a new `Cell` containing the given value.",246,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",246,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",246,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",246,null],[11,"swap","","Swaps the values of two Cells. Difference with `std::mem::swap` is that this function doesn't require `&mut` reference.",246,null],[11,"replace","","Replaces the contained value, and returns it.",246,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"into_inner","","Unwraps the value.",246,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"take","","Takes the value of the cell, leaving `Default::default()` in its place.",246,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Creates a new `RefCell` containing `value`.",247,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",247,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"replace","","Replaces the wrapped value with a new one, returning the old value, without deinitializing either one.",247,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace_with","","Replaces the wrapped value with a new one computed from `f`, returning the old value, without deinitializing either one.",247,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"swap","","Swaps the wrapped value of `self` with the wrapped value of `other`, without deinitializing either one.",247,null],[11,"borrow","","Immutably borrows the wrapped value.",247,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"try_borrow","","Immutably borrows the wrapped value, returning an error if the value is currently mutably borrowed.",247,{"inputs":[{"name":"self"}],"output":{"generics":["ref","borrowerror"],"name":"result"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",247,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[11,"try_borrow_mut","","Mutably borrows the wrapped value, returning an error if the value is currently borrowed.",247,{"inputs":[{"name":"self"}],"output":{"generics":["refmut","borrowmuterror"],"name":"result"}}],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",247,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",247,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",242,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",242,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum variant.",244,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified value.",264,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",264,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",264,null],[11,"reverse","sgx_tstd::cmp","Reverses the `Ordering`.",3,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"then","","Chains two orderings.",3,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"then_with","","Chains the ordering with the given function.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"ordering"}}],[11,"new","sgx_tstd::hash","Creates a new `SipHasher` with the two initial keys set to 0.",271,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",271,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",272,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",272,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",273,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",273,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"peek","sgx_tstd::iter","Returns a reference to the next() value without advancing the iterator.",332,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","sgx_tstd::mem","Wrap a value to be manually dropped.",243,{"inputs":[{"name":"t"}],"output":{"name":"manuallydrop"}}],[11,"into_inner","","Extract the value from the ManuallyDrop container.",243,{"inputs":[{"name":"manuallydrop"}],"output":{"name":"t"}}],[11,"drop","","Manually drops the contained value.",243,null],[11,"contains","sgx_tstd::ops","Returns `true` if `item` is contained in the range.",30,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",32,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",45,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",50,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",64,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"empty","sgx_tstd::ptr","Creates a new `Unique` that is dangling, but well-aligned.",255,{"inputs":[],"output":{"name":"unique"}}],[11,"new_unchecked","","Creates a new `Unique`.",255,null],[11,"new","","Creates a new `Unique` if `ptr` is non-null.",255,null],[11,"as_ptr","","Acquires the underlying `*mut` pointer.",255,null],[11,"as_ref","","Dereferences the content.",255,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","Mutably dereferences the content.",255,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"dangling","","Creates a new `NonNull` that is dangling, but well-aligned.",258,{"inputs":[],"output":{"name":"nonnull"}}],[11,"new_unchecked","","Creates a new `NonNull`.",258,null],[11,"new","","Creates a new `NonNull` if `ptr` is non-null.",258,null],[11,"as_ptr","","Acquires the underlying `*mut` pointer.",258,null],[11,"as_ref","","Dereferences the content.",258,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","Mutably dereferences the content.",258,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_ok","sgx_tstd::result","Returns `true` if the result is [`Ok`].",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_err","","Returns `true` if the result is [`Err`].",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to [`Option<T>`].",70,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to [`Option<E>`].",70,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`.",70,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`.",70,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a contained [`Ok`] value, leaving an [`Err`] value untouched.",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained [`Err`] value, leaving an [`Ok`] value untouched.",70,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",70,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",70,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.",70,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.",70,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.",70,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an [`Ok`]. Else, it returns `optb`.",70,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an [`Ok`]. If the value is an [`Err`] then it calls `op` with its value.",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an [`Ok`].",70,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an [`Ok`].",70,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an [`Err`].",70,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"expect_err","","Unwraps a result, yielding the content of an [`Err`].",70,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"e"}}],[11,"unwrap_or_default","","Returns the contained value or a default",70,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"transpose","","Transposes a `Result` of an `Option` into an `Option` of a `Result`.",70,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"is_some","sgx_tstd::option","Returns `true` if the option is a [`Some`] value.",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a [`None`] value.",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`.",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`.",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a [`Some`].",71,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is [`Some(v)`].",71,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",71,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any), or returns the provided default (if not).",71,{"inputs":[{"name":"self"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any), or computes a default (if not).",71,{"inputs":[{"name":"self"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err)`].",71,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err())`].",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",71,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",71,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"and","","Returns [`None`] if the option is [`None`], otherwise returns `optb`.",71,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns [`None`] if the option is [`None`], otherwise calls `f` with the wrapped value and returns the result.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"filter","","Returns `None` if the option is `None`, otherwise calls `predicate` with the wrapped value and returns:",71,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",71,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and returns the result.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"get_or_insert","","Inserts `v` into the option if it is [`None`], then returns a mutable reference to the contained value.",71,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"get_or_insert_with","","Inserts a value computed from `f` into the option if it is [`None`], then returns a mutable reference to the contained value.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"take","","Takes the value out of the option, leaving a [`None`] in its place.",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the option.",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&mut T>` to an `Option<T>` by cloning the contents of the option.",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",71,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"transpose","","Transposes an `Option` of a `Result` into a `Result` of an `Option`.",71,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"new","sgx_tstd::boxed","Allocates memory on the heap and then places `x` into it.",114,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",114,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",114,null],[11,"into_raw_non_null","","Consumes the `Box`, returning the wrapped pointer as `NonNull<T>`.",114,{"inputs":[{"name":"box"}],"output":{"name":"nonnull"}}],[11,"into_unique","","",114,{"inputs":[{"name":"box"}],"output":{"name":"unique"}}],[11,"leak","","Consumes and leaks the `Box`, returning a mutable reference, `&'a mut T`. Here, the lifetime `'a` may be chosen to be `'static`.",114,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",114,{"inputs":[{"name":"self"}],"output":{"generics":["box","box"],"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",114,{"inputs":[{"name":"self"}],"output":{"generics":["box","box"],"name":"result"}}],[11,"new","sgx_tstd::rc","Constructs a new `Rc<T>`.",132,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Returns the contained value, if the `Rc` has exactly one strong reference.",132,{"inputs":[{"name":"rc"}],"output":{"generics":["rc"],"name":"result"}}],[11,"into_raw","","Consumes the `Rc`, returning the wrapped pointer.",132,null],[11,"from_raw","","Constructs an `Rc` from a raw pointer.",132,null],[11,"downgrade","","Creates a new [`Weak`][weak] pointer to this value.",132,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Gets the number of [`Weak`][weak] pointers to this value.",132,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Gets the number of strong (`Rc`) pointers to this value.",132,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"get_mut","","Returns a mutable reference to the inner value, if there are no other `Rc` or [`Weak`][weak] pointers to the same value.",132,{"inputs":[{"name":"rc"}],"output":{"name":"option"}}],[11,"ptr_eq","","Returns true if the two `Rc`s point to the same value (not just values that compare as equal).",132,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"make_mut","","Makes a mutable reference into the given `Rc`.",132,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"downcast","","Attempt to downcast the `Rc<Any>` to a concrete type.",132,{"inputs":[{"name":"self"}],"output":{"generics":["rc","rc"],"name":"result"}}],[11,"new","","Constructs a new `Weak<T>`, allocating memory for `T` without initializing it. Calling [`upgrade`] on the return value always gives [`None`].",391,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Attempts to upgrade the `Weak` pointer to an [`Rc`], extending the lifetime of the value if successful.",391,{"inputs":[{"name":"self"}],"output":{"generics":["rc"],"name":"option"}}],[11,"to_mut","sgx_tstd::borrow","Acquires a mutable reference to the owned form of the data.",74,null],[11,"into_owned","","Extracts the owned data.",74,null],[11,"entry","sgx_tstd::fmt","Adds a new entry to the list output.",403,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",403,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",403,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"entry","","Adds a new entry to the set output.",404,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",404,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",404,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been emitted into a str. The str should not contain the sign for the integer, that will be added by this method.",341,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer after applying the relevant formatting flags specified. The flags recognized for generic strings are:",341,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this formatter.",341,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",341,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"flags","","Flags for formatting",341,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",341,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",341,{"inputs":[{"name":"self"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",341,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",341,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",341,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",341,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",341,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",341,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a [`DebugStruct`] builder designed to assist with creation of [`fmt::Debug`] implementations for structs.",341,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of `fmt::Debug` implementations for tuple structs.",341,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of `fmt::Debug` implementations for list-like structures.",341,{"inputs":[{"name":"self"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of `fmt::Debug` implementations for set-like structures.",341,{"inputs":[{"name":"self"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of `fmt::Debug` implementations for map-like structures.",341,{"inputs":[{"name":"self"}],"output":{"name":"debugmap"}}],[11,"entry","","Adds a new entry to the map output.",405,{"inputs":[{"name":"self"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",405,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",405,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",406,{"inputs":[{"name":"self"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",406,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",407,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",407,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"into_slice","sgx_tstd::slice","View the underlying data as a subslice of the original data.",304,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",274,null],[11,"as_str","sgx_tstd::str","View the underlying data as a subslice of the original data.",325,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",318,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was verified.",116,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"error_len","","Provide more information about the failure:",116,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"new","sgx_tstd::string","Creates a new empty `String`.",133,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",133,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",133,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"generics":["string","fromutf8error"],"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",133,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning [`Err`] if `v` contains any invalid data.",133,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded slice `v` into a `String`, replacing invalid data with the replacement character (U+FFFD).",133,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",133,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the string contains valid UTF-8.",133,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",133,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",133,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_mut_str","","Converts a `String` into a mutable string slice.",133,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",133,null],[11,"capacity","","Returns this `String`'s capacity, in bytes.",133,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`'s capacity is at least `additional` bytes larger than its length.",133,null],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional` bytes larger than its length.",133,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",133,null],[11,"push","","Appends the given [`char`] to the end of this `String`.",133,null],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",133,null],[11,"truncate","","Shortens this `String` to the specified length.",133,null],[11,"pop","","Removes the last character from the string buffer and returns it.",133,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"remove","","Removes a [`char`] from this `String` at a byte position and returns it.",133,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"char"}}],[11,"retain","","Retains only the characters specified by the predicate.",133,null],[11,"insert","","Inserts a character into this `String` at a byte position.",133,null],[11,"insert_str","","Inserts a string slice into this `String` at a byte position.",133,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",133,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",133,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",133,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the string into two at the given index.",133,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"string"}}],[11,"clear","","Truncates this `String`, removing all contents.",133,null],[11,"drain","","Creates a draining iterator that removes the specified range in the string and yields the removed chars.",133,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"splice","","Creates a splicing iterator that removes the specified range in the string, and replaces it with the given string. The given string doesn't need to be the same length as the range.",133,null],[11,"into_boxed_str","","Converts this `String` into a [`Box`]`<`[`str`]`>`.",133,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"box"}}],[11,"as_bytes","","Returns a slice of [`u8`]s bytes that were attempted to convert to a `String`.",117,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",117,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",117,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"new","sgx_tstd::vec","Constructs a new, empty `Vec<T>`.",146,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",146,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",146,null],[11,"capacity","","Returns the number of elements the vector can hold without reallocating.",146,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `Vec<T>`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",146,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `Vec<T>`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",146,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",146,null],[11,"into_boxed_slice","","Converts the vector into [`Box<[T]>`][owned slice].",146,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",146,null],[11,"as_slice","","Extracts a slice containing the entire vector.",146,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",146,null],[11,"set_len","","Sets the length of a vector.",146,null],[11,"swap_remove","","Removes an element from the vector and returns it.",146,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all elements after it to the right.",146,null],[11,"remove","","Removes and returns the element at position `index` within the vector, shifting all elements after it to the left.",146,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",146,null],[11,"dedup_by_key","","Removes all but the first of consecutive elements in the vector that resolve to the same key.",146,null],[11,"dedup_by","","Removes all but the first of consecutive elements in the vector satisfying a given equality relation.",146,null],[11,"push","","Appends an element to the back of a collection.",146,null],[11,"place_back","","Returns a place for insertion at the back of the `Vec`.",146,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"pop","","Removes the last element from a vector and returns it, or [`None`] if it is empty.",146,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",146,null],[11,"drain","","Creates a draining iterator that removes the specified range in the vector and yields the removed items.",146,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",146,null],[11,"len","","Returns the number of elements in the vector, also referred to as its 'length'.",146,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",146,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",146,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",146,null],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",146,null],[11,"resize_default","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",146,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",146,null],[11,"remove_item","","Removes the first instance of `item` from the vector if the item exists.",146,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"splice","","Creates a splicing iterator that replaces the specified range in the vector with the given `replace_with` iterator and yields the removed items. `replace_with` does not need to be the same length as `range`.",146,{"inputs":[{"name":"self"},{"name":"r"},{"name":"i"}],"output":{"name":"splice"}}],[11,"drain_filter","","Creates an iterator which uses a closure to determine if an element should be removed.",146,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"drainfilter"}}],[11,"as_slice","","Returns the remaining items of this iterator as a slice.",355,null],[11,"as_mut_slice","","Returns the remaining items of this iterator as a mutable slice.",355,null],[11,"unpaired_surrogate","sgx_tstd::char","Returns the unpaired surrogate which caused this error.",120,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"new","sgx_tstd::collections::binary_heap","Creates an empty `BinaryHeap` as a max-heap.",359,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity. This preallocates enough memory for `capacity` elements, so that the `BinaryHeap` does not have to be reallocated until it contains at least that many values.",359,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in arbitrary order.",359,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",359,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peek_mut","","Returns a mutable reference to the greatest item in the binary heap, or `None` if it is empty.",359,{"inputs":[{"name":"self"}],"output":{"generics":["peekmut"],"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",359,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `BinaryHeap`. Does nothing if the capacity is already sufficient.",359,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",359,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",359,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it is empty.",359,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",359,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector in arbitrary order.",359,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted (ascending) order.",359,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",359,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",359,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",359,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",359,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",359,null],[11,"new","sgx_tstd::collections::btree_map","Makes a new empty BTreeMap with a reasonable choice for B.",345,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",345,null],[11,"get","","Returns a reference to the value corresponding to the key.",345,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns `true` if the map contains a value for the specified key.",345,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",345,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",345,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",345,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",345,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",345,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",345,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",345,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"entry"}}],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",345,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"btreemap"}}],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",345,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",345,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",345,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map, in order by key.",345,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",345,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"len","","Returns the number of elements in the map.",345,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the map contains no elements.",345,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","sgx_tstd::collections::btree_set","Makes a new `BTreeSet` with a reasonable choice of B.",346,{"inputs":[],"output":{"name":"btreeset"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",346,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, i.e. the values that are in `self` but not in `other`, in ascending order.",346,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, i.e. the values that are in `self` or in `other` but not in both, in ascending order.",346,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, i.e. the values that are both in `self` and `other`, in ascending order.",346,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, i.e. all the values in `self` or `other`, without duplicates, in ascending order.",346,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"clear","","Clears the set, removing all values.",346,null],[11,"contains","","Returns `true` if the set contains a value.",346,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",346,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`. This is equivalent to checking for an empty intersection.",346,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e. `other` contains at least all the values in `self`.",346,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e. `self` contains at least all the values in `other`.",346,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",346,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",346,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",346,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",346,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",346,null],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",346,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator that visits the values in the `BTreeSet` in ascending order.",346,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"len","","Returns the number of elements in the set.",346,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the set contains no elements.",346,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","sgx_tstd::collections::linked_list","Creates an empty `LinkedList`.",344,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",344,null],[11,"iter","","Provides a forward iterator.",344,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",344,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",344,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",344,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",344,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the given value.",344,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"front","","Provides a reference to the front element, or `None` if the list is empty.",344,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list is empty.",344,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is empty.",344,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list is empty.",344,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",344,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is empty.",344,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",344,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if it is empty.",344,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index, including the index.",344,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drain_filter","","Creates an iterator which uses a closure to determine if an element should be removed.",344,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"drainfilter"}}],[11,"front_place","","Returns a place for insertion at the front of the list.",344,{"inputs":[{"name":"self"}],"output":{"name":"frontplace"}}],[11,"back_place","","Returns a place for insertion at the back of the list.",344,{"inputs":[{"name":"self"}],"output":{"name":"backplace"}}],[11,"new","sgx_tstd::collections::vec_deque","Creates an empty `VecDeque`.",342,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",342,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",342,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",342,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",342,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without reallocating.",342,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `VecDeque`. Does nothing if the capacity is already sufficient.",342,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `VecDeque`. The collection may reserve more space to avoid frequent reallocations.",342,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",342,null],[11,"truncate","","Shortens the `VecDeque`, dropping excess elements from the back.",342,null],[11,"iter","","Returns a front-to-back iterator.",342,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",342,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",342,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",342,null],[11,"len","","Returns the number of elements in the `VecDeque`.",342,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the `VecDeque` is empty.",342,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the `VecDeque` and yields the removed items.",342,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the `VecDeque`, removing all values.",342,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the given value.",342,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"front","","Provides a reference to the front element, or `None` if the `VecDeque` is empty.",342,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the `VecDeque` is empty.",342,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the `VecDeque` is empty.",342,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the `VecDeque` is empty.",342,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the `VecDeque` is empty.",342,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_front","","Prepends an element to the `VecDeque`.",342,null],[11,"push_back","","Appends an element to the back of the `VecDeque`.",342,null],[11,"pop_back","","Removes the last element from the `VecDeque` and returns it, or `None` if it is empty.",342,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the last element.",342,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the first element.",342,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`, shifting all elements with indices greater than or equal to `index` towards the back.",342,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`. Whichever end is closer to the removal point will be moved to make room, and all the affected elements will be moved to new positions. Returns `None` if `index` is out of bounds.",342,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the `VecDeque` into two at the given index.",342,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",342,null],[11,"retain","","Retains only the elements specified by the predicate.",342,null],[11,"place_back","","Returns a place for insertion at the back of the `VecDeque`.",342,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"place_front","","Returns a place for insertion at the front of the `VecDeque`.",342,{"inputs":[{"name":"self"}],"output":{"name":"placefront"}}],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len, either by removing excess elements from the back or by appending clones of `value` to the back.",342,null],[11,"pop","sgx_tstd::collections::binary_heap","Removes the peeked value from the heap and returns it.",374,{"inputs":[{"name":"peekmut"}],"output":{"name":"t"}}],[11,"key","sgx_tstd::collections::btree_map","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",354,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"into_key","","Take ownership of the key.",354,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"insert","","Sets the value of the entry with the `VacantEntry`'s key, and returns a mutable reference to it.",354,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"key","","Gets a reference to the key in the entry.",378,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"remove_entry","","Take ownership of the key and value from the map.",378,null],[11,"get","","Gets a reference to the value in the entry.",378,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",378,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",378,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",378,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",378,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",103,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",103,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"key","","Returns a reference to this entry's key.",103,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"and_modify","","Provides in-place mutable access to an occupied entry before any potential inserts into the map.",103,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"entry"}}],[11,"or_default","","Ensures a value is in the entry by inserting the default value if empty, and returns a mutable reference to the value in the entry.",103,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert_next","sgx_tstd::collections::linked_list","Inserts the given element just after the element most recently returned by `.next()`. The inserted element does not appear in the iteration.",352,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",352,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","sgx_tstd::collections::hash_map","",408,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"fmt","","",408,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",409,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"fmt","","",409,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",410,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"fmt","","",410,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",411,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",412,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",408,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",408,null],[11,"len","","",408,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",413,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",413,null],[11,"len","","",413,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",413,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",414,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",414,null],[11,"len","","",414,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",414,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",409,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",409,null],[11,"len","","",409,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",410,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",410,null],[11,"len","","",410,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",415,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",415,null],[11,"len","","",415,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",415,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",416,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",416,null],[11,"len","","",416,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",416,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",417,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",417,{"inputs":[{"name":"self"}],"output":null}],[11,"make_place","","",107,{"inputs":[{"name":"self"}],"output":{"name":"entryplace"}}],[11,"pointer","","",417,null],[11,"finalize","","",417,{"inputs":[{"name":"self"}],"output":null}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",107,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",107,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"key","","Returns a reference to this entry's key.",107,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"and_modify","","Provides in-place mutable access to an occupied entry before any potential inserts into the map.",107,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"or_default","","Ensures a value is in the entry by inserting the default value if empty, and returns a mutable reference to the value in the entry.",107,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"key","","Gets a reference to the key in the entry.",411,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"remove_entry","","Take the ownership of the key and value from the map.",411,null],[11,"get","","Gets a reference to the value in the entry.",411,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",411,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry with a lifetime bound to the map itself.",411,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value.",411,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it.",411,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"replace_entry","","Replaces the entry, returning the old key and value. The new key in the hash map will be the key used to create this entry.",411,null],[11,"replace_key","","Replaces the key in the hash map with the key used to create this entry.",411,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"key","","Gets a reference to the key that would be used when inserting a value through the `VacantEntry`.",412,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"into_key","","Take ownership of the key.",412,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",412,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"clone","","",418,{"inputs":[{"name":"self"}],"output":{"name":"randomstate"}}],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",418,{"inputs":[],"output":{"name":"randomstate"}}],[11,"build_hasher","","",418,{"inputs":[{"name":"self"}],"output":{"name":"defaulthasher"}}],[11,"clone","","",419,{"inputs":[{"name":"self"}],"output":{"name":"defaulthasher"}}],[11,"fmt","","",419,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `DefaultHasher`.",419,{"inputs":[],"output":{"name":"defaulthasher"}}],[11,"default","","Creates a new `DefaultHasher` using [`new`]. See its documentation for more.",419,{"inputs":[],"output":{"name":"defaulthasher"}}],[11,"write","","",419,null],[11,"finish","","",419,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"default","","Constructs a new `RandomState`.",418,{"inputs":[],"output":{"name":"randomstate"}}],[11,"fmt","","",418,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","sgx_tstd::collections::hash_set","",420,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",420,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",420,null],[11,"len","","",420,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",420,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",421,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",421,null],[11,"len","","",421,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",421,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",422,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",422,null],[11,"len","","",422,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",422,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",423,{"inputs":[{"name":"self"}],"output":{"name":"intersection"}}],[11,"next","","",423,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",423,null],[11,"fmt","","",423,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",424,{"inputs":[{"name":"self"}],"output":{"name":"difference"}}],[11,"next","","",424,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",424,null],[11,"fmt","","",424,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",425,{"inputs":[{"name":"self"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",425,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",425,null],[11,"fmt","","",425,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",426,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"fmt","","",426,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",426,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",426,null],[11,"description","sgx_tstd::heap","",229,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",348,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","sgx_tstd::num","",252,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",267,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",254,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","sgx_tstd::ffi","Creates a new C-compatible string from a container of bytes.",401,{"inputs":[{"name":"t"}],"output":{"generics":["cstring","nulerror"],"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for interior 0 bytes.",401,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_raw","","Retakes ownership of a `CString` that was transferred to C.",401,null],[11,"into_raw","","Transfers ownership of the string to a C caller.",401,null],[11,"into_string","","Converts the `CString` into a `String` if it contains valid Unicode data.",401,{"inputs":[{"name":"self"}],"output":{"generics":["string","intostringerror"],"name":"result"}}],[11,"into_bytes","","Returns the underlying byte buffer.",401,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"into_bytes_with_nul","","Equivalent to the `into_bytes` function except that the returned vector includes the trailing nul byte.",401,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",401,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice includes the trailing nul byte.",401,null],[11,"as_c_str","","Extracts a `CStr` slice containing the entire string.",401,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"into_boxed_c_str","","Converts this `CString` into a boxed `CStr`.",401,{"inputs":[{"name":"self"}],"output":{"generics":["cstr"],"name":"box"}}],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to `CString::new`.",127,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which generated the error in the first place.",127,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"into_cstring","","Consumes this error, returning original `CString` which generated the error.",129,{"inputs":[{"name":"self"}],"output":{"name":"cstring"}}],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of this error.",129,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"__description","","",129,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"__cause","","",129,{"inputs":[{"name":"self"}],"output":{"generics":["utf8error"],"name":"option"}}],[11,"__description","","",128,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","sgx_tstd::io","",143,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"from","sgx_tstd::sync","",347,{"inputs":[{"name":"osstring"}],"output":{"generics":["osstr"],"name":"arc"}}],[11,"from","","",347,{"inputs":[{"name":"osstr"}],"output":{"generics":["osstr"],"name":"arc"}}],[11,"as_raw_stat","sgx_tstd::untrusted::fs","",238,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"st_dev","","",238,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"st_ino","","",238,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"st_mode","","",238,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"st_nlink","","",238,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"st_uid","","",238,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"st_gid","","",238,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"st_rdev","","",238,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"st_size","","",238,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"st_atime","","",238,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"st_atime_nsec","","",238,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"st_mtime","","",238,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"st_mtime_nsec","","",238,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"st_ctime","","",238,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"st_ctime_nsec","","",238,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"st_blksize","","",238,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"st_blocks","","",238,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from","sgx_tstd::sync","",347,{"inputs":[{"name":"pathbuf"}],"output":{"generics":["path"],"name":"arc"}}],[11,"from","","",347,{"inputs":[{"name":"path"}],"output":{"generics":["path"],"name":"arc"}}],[11,"new","","Constructs a new `Arc<T>`.",347,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"try_unwrap","","Returns the contained value, if the `Arc` has exactly one strong reference.",347,{"inputs":[{"name":"arc"}],"output":{"generics":["arc"],"name":"result"}}],[11,"into_raw","","Consumes the `Arc`, returning the wrapped pointer.",347,null],[11,"from_raw","","Constructs an `Arc` from a raw pointer.",347,null],[11,"downgrade","","Creates a new [`Weak`][weak] pointer to this value.",347,{"inputs":[{"name":"arc"}],"output":{"name":"weak"}}],[11,"weak_count","","Gets the number of [`Weak`][weak] pointers to this value.",347,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"strong_count","","Gets the number of strong (`Arc`) pointers to this value.",347,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"ptr_eq","","Returns true if the two `Arc`s point to the same value (not just values that compare as equal).",347,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"make_mut","","Makes a mutable reference into the given `Arc`.",347,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the inner value, if there are no other `Arc` or [`Weak`][weak] pointers to the same value.",347,{"inputs":[{"name":"arc"}],"output":{"name":"option"}}],[11,"new","","Constructs a new `Weak<T>`, allocating memory for `T` without initializing it. Calling [`upgrade`] on the return value always gives [`None`].",379,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Attempts to upgrade the `Weak` pointer to an [`Arc`], extending the lifetime of the value if successful.",379,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[11,"new","sgx_tstd::sync::atomic","Creates a new `AtomicBool`.",266,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"get_mut","","Returns a mutable reference to the underlying [`bool`].",266,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",266,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"load","","Loads a value from the bool.",266,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",266,null],[11,"swap","","Stores a value into the bool, returning the previous value.",266,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the [`bool`] if the current value is the same as the `current` value.",266,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the [`bool`] if the current value is the same as the `current` value.",266,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["bool","bool"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the [`bool`] if the current value is the same as the `current` value.",266,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["bool","bool"],"name":"result"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",266,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",266,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",266,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",266,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicPtr`.",270,null],[11,"get_mut","","Returns a mutable reference to the underlying pointer.",270,null],[11,"into_inner","","Consumes the atomic and returns the contained value.",270,null],[11,"load","","Loads a value from the pointer.",270,null],[11,"store","","Stores a value into the pointer.",270,null],[11,"swap","","Stores a value into the pointer, returning the previous value.",270,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",270,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",270,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",270,null],[11,"new","","Creates a new atomic integer.",268,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",268,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",268,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"load","","Loads a value from the atomic integer.",268,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"store","","Stores a value into the atomic integer.",268,null],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",268,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",268,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",268,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"i8"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["i8","i8"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",268,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"i8"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["i8","i8"],"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",268,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",268,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",268,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",268,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",268,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"new","","Creates a new atomic integer.",261,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",261,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",261,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"load","","Loads a value from the atomic integer.",261,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"store","","Stores a value into the atomic integer.",261,null],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",261,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",261,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",261,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["u8","u8"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",261,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["u8","u8"],"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",261,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",261,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",261,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",261,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",261,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"new","","Creates a new atomic integer.",256,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",256,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",256,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"load","","Loads a value from the atomic integer.",256,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"store","","Stores a value into the atomic integer.",256,null],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",256,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",256,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",256,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"i16"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["i16","i16"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",256,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"i16"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["i16","i16"],"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",256,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",256,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",256,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",256,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",256,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"new","","Creates a new atomic integer.",262,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",262,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",262,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"load","","Loads a value from the atomic integer.",262,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"store","","Stores a value into the atomic integer.",262,null],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",262,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",262,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",262,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["u16","u16"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",262,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["u16","u16"],"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",262,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",262,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",262,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",262,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",262,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"new","","Creates a new atomic integer.",265,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",265,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",265,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"load","","Loads a value from the atomic integer.",265,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"store","","Stores a value into the atomic integer.",265,null],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",265,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",265,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",265,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["i32","i32"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",265,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["i32","i32"],"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",265,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",265,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",265,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",265,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",265,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"new","","Creates a new atomic integer.",257,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",257,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",257,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"load","","Loads a value from the atomic integer.",257,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"store","","Stores a value into the atomic integer.",257,null],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",257,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",257,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",257,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["u32","u32"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",257,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["u32","u32"],"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",257,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",257,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",257,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",257,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",257,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"new","","Creates a new atomic integer.",269,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",269,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",269,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"load","","Loads a value from the atomic integer.",269,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"store","","Stores a value into the atomic integer.",269,null],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",269,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",269,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",269,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["i64","i64"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",269,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["i64","i64"],"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",269,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",269,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",269,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",269,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",269,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"new","","Creates a new atomic integer.",259,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",259,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",259,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"load","","Loads a value from the atomic integer.",259,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"store","","Stores a value into the atomic integer.",259,null],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",259,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",259,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",259,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["u64","u64"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",259,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["u64","u64"],"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",259,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",259,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",259,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",259,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",259,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"new","","Creates a new atomic integer.",263,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",263,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",263,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"load","","Loads a value from the atomic integer.",263,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the atomic integer.",263,null],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",263,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",263,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",263,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["isize","isize"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",263,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["isize","isize"],"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",263,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",263,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",263,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",263,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",263,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new atomic integer.",260,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",260,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",260,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"load","","Loads a value from the atomic integer.",260,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the atomic integer.",260,null],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",260,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",260,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",260,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["usize","usize"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",260,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["usize","usize"],"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",260,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",260,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",260,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",260,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",260,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"from_size_align","sgx_tstd::heap","Constructs a `Layout` from a given `size` and `align`, or returns `None` if any of the following conditions are not met:",343,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"generics":["layout"],"name":"option"}}],[11,"from_size_align_unchecked","","Creates a layout, bypassing all checks.",343,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"layout"}}],[11,"size","","The minimum size in bytes for a memory block of this layout.",343,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"align","","The minimum byte alignment for a memory block of this layout.",343,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Constructs a `Layout` suitable for holding a value of type `T`.",343,{"inputs":[],"output":{"name":"layout"}}],[11,"for_value","","Produces layout describing a record that could be used to allocate backing structure for `T` (which could be a trait or other unsized type like a slice).",343,{"inputs":[{"name":"t"}],"output":{"name":"layout"}}],[11,"align_to","","Creates a layout describing the record that can hold a value of the same layout as `self`, but that also is aligned to alignment `align` (measured in bytes).",343,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"layout"}}],[11,"padding_needed_for","","Returns the amount of padding we must insert after `self` to ensure that the following address will satisfy `align` (measured in bytes).",343,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"repeat","","Creates a layout describing the record for `n` instances of `self`, with a suitable amount of padding between each to ensure that each instance is given its requested size and alignment. On success, returns `(k, offs)` where `k` is the layout of the array and `offs` is the distance between the start of each element in the array.",343,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"extend","","Creates a layout describing the record for `self` followed by `next`, including any necessary padding to ensure that `next` will be properly aligned. Note that the result layout will satisfy the alignment properties of both `self` and `next`.",343,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"option"}}],[11,"repeat_packed","","Creates a layout describing the record for `n` instances of `self`, with no padding between each instance.",343,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["layout"],"name":"option"}}],[11,"extend_packed","","Creates a layout describing the record for `self` followed by `next` with no additional padding between the two. Since no padding is inserted, the alignment of `next` is irrelevant, and is not incorporated at all into the resulting layout.",343,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"option"}}],[11,"array","","Creates a layout describing the record for a `[T; n]`.",343,{"inputs":[{"name":"usize"}],"output":{"generics":["layout"],"name":"option"}}],[11,"description","","",348,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"invalid_input","","",229,{"inputs":[{"name":"str"}],"output":{"name":"allocerr"}}],[11,"is_memory_exhausted","","",229,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_request_unsupported","","",229,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"description","","",229,{"inputs":[{"name":"self"}],"output":{"name":"str"}}]],"paths":[[8,"Any"],[8,"Clone"],[8,"PartialEq"],[4,"Ordering"],[3,"Reverse"],[8,"Ord"],[8,"PartialOrd"],[8,"AsRef"],[8,"AsMut"],[8,"Into"],[8,"From"],[8,"TryInto"],[8,"TryFrom"],[8,"Default"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[8,"Extend"],[8,"Product"],[8,"Iterator"],[8,"ExactSizeIterator"],[8,"Sum"],[8,"DoubleEndedIterator"],[8,"FromIterator"],[8,"Step"],[8,"IntoIterator"],[8,"Add"],[8,"BitOr"],[8,"Mul"],[8,"Neg"],[3,"Range"],[8,"Try"],[3,"RangeToInclusive"],[8,"RemAssign"],[8,"InPlace"],[8,"BitAnd"],[8,"Sub"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"FnMut"],[8,"FnOnce"],[8,"IndexMut"],[8,"Placer"],[8,"Shl"],[8,"DivAssign"],[3,"RangeTo"],[8,"Generator"],[8,"SubAssign"],[8,"BitXorAssign"],[8,"DerefMut"],[3,"RangeInclusive"],[8,"BitOrAssign"],[8,"Place"],[8,"Index"],[8,"MulAssign"],[8,"AddAssign"],[4,"GeneratorState"],[8,"BitAndAssign"],[8,"BoxPlace"],[8,"Fn"],[8,"Deref"],[8,"Not"],[8,"Rem"],[8,"Drop"],[3,"RangeFrom"],[8,"Div"],[8,"Shr"],[8,"Boxed"],[8,"BitXor"],[3,"TraitObject"],[4,"Result"],[4,"Option"],[8,"FnBox"],[8,"ToOwned"],[4,"Cow"],[8,"Borrow"],[8,"BorrowMut"],[8,"Octal"],[8,"LowerHex"],[8,"LowerExp"],[8,"Debug"],[8,"Write"],[8,"UpperHex"],[8,"Display"],[8,"Pointer"],[8,"Binary"],[8,"UpperExp"],[8,"SliceConcatExt"],[8,"SliceIndex"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"FromStr"],[8,"ToString"],[3,"UnicodeVersion"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"AccessError"],[3,"LocalKeyInner"],[3,"SgxThreadId"],[3,"SgxThread"],[4,"Bound"],[4,"Entry"],[8,"RangeArgument"],[3,"HashMap"],[3,"HashSet"],[4,"Entry"],[4,"VarError"],[3,"Vars"],[3,"VarsOs"],[3,"SplitPaths"],[3,"JoinPathsError"],[8,"Error"],[3,"Box"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"DecodeUtf16Error"],[3,"Error"],[3,"BorrowError"],[3,"BorrowMutError"],[3,"CharTryFromError"],[3,"ParseCharError"],[4,"Infallible"],[3,"NulError"],[3,"FromBytesWithNulError"],[3,"IntoStringError"],[3,"OsString"],[3,"OsStr"],[3,"Rc"],[3,"String"],[3,"OpenOptions"],[3,"SgxFile"],[4,"ErrorKind"],[4,"SeekFrom"],[4,"CharsError"],[3,"Lazy"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"Error"],[3,"LineWriter"],[3,"Cursor"],[3,"Vec"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[8,"Read"],[8,"Write"],[8,"Seek"],[8,"BufRead"],[3,"Initializer"],[3,"Chain"],[3,"Take"],[3,"Bytes"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[4,"SocketAddr"],[4,"Shutdown"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"AddrParseError"],[8,"ToSocketAddrs"],[4,"FpCategory"],[3,"Wrapping"],[8,"AsRawFd"],[8,"FromRawFd"],[8,"IntoRawFd"],[8,"OsStringExt"],[8,"OsStrExt"],[8,"FileExt"],[8,"PermissionsExt"],[8,"OpenOptionsExt"],[8,"MetadataExt"],[8,"FileTypeExt"],[3,"stat"],[4,"c_void"],[8,"MetadataExt"],[3,"AssertUnwindSafe"],[4,"Prefix"],[4,"Component"],[3,"PrefixComponent"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Path"],[3,"StripPrefixError"],[3,"Display"],[4,"Ordering"],[4,"TryLockError"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"SgxThreadCondvar"],[3,"SgxCondvar"],[3,"SgxThreadMutex"],[3,"SgxMutex"],[3,"SgxMutexGuard"],[3,"SgxReentrantThreadMutex"],[3,"SgxReentrantMutex"],[3,"SgxReentrantMutexGuard"],[3,"OnceState"],[3,"Once"],[3,"SgxThreadRwLock"],[3,"SgxRwLock"],[3,"SgxRwLockReadGuard"],[3,"SgxRwLockWriteGuard"],[3,"SgxThreadSpinlock"],[3,"SgxSpinlock"],[3,"SgxSpinlockGuard"],[3,"Duration"],[3,"Instant"],[3,"SystemTime"],[3,"SystemTimeError"],[8,"Alloc"],[3,"Excess"],[4,"AllocErr"],[4,"SgxThreadPolicy"],[8,"PathEx"],[8,"InstantEx"],[8,"SystemTimeEx"],[3,"PoisonError"],[3,"File"],[3,"Permissions"],[3,"OpenOptions"],[3,"Metadata"],[3,"FileType"],[3,"PanicInfo"],[3,"Location"],[3,"Ref"],[19,"ManuallyDrop"],[3,"RefMut"],[3,"NoneError"],[3,"Cell"],[3,"RefCell"],[3,"PhantomData"],[3,"TypeId"],[3,"BuildHasherDefault"],[3,"RangeFull"],[3,"ParseIntError"],[3,"Discriminant"],[3,"ParseFloatError"],[3,"Unique"],[3,"AtomicI16"],[3,"AtomicU32"],[3,"NonNull"],[3,"AtomicU64"],[3,"AtomicUsize"],[3,"AtomicU8"],[3,"AtomicU16"],[3,"AtomicIsize"],[3,"UnsafeCell"],[3,"AtomicI32"],[3,"AtomicBool"],[3,"TryFromIntError"],[3,"AtomicI8"],[3,"AtomicI64"],[3,"AtomicPtr"],[3,"SipHasher"],[3,"SipHasher24"],[3,"SipHasher13"],[3,"Iter"],[3,"CharSliceSearcher"],[3,"StrSearcher"],[3,"CharSearcher"],[3,"CharPredicateSearcher"],[3,"EscapeUnicode"],[3,"Arguments"],[3,"EscapeDebug"],[3,"EscapeDefault"],[3,"Chain"],[3,"MatchIndices"],[3,"Iter"],[3,"Iter"],[3,"IterMut"],[3,"FlatMap"],[3,"RSplitMut"],[3,"Zip"],[3,"Empty"],[3,"Enumerate"],[3,"IntoIter"],[3,"Windows"],[3,"RMatches"],[3,"Fuse"],[3,"ExactChunks"],[3,"Rev"],[3,"Lines"],[3,"Split"],[3,"Inspect"],[3,"RSplit"],[3,"Chunks"],[3,"IterMut"],[3,"Repeat"],[3,"Split"],[3,"Bytes"],[3,"Skip"],[3,"Map"],[3,"LinesAny"],[3,"Cloned"],[3,"ExactChunksMut"],[3,"SplitMut"],[3,"RSplit"],[3,"ChunksMut"],[3,"Once"],[3,"Filter"],[3,"CharIndices"],[3,"IntoIter"],[3,"IterMut"],[3,"Matches"],[3,"FilterMap"],[3,"SplitTerminator"],[3,"RMatchIndices"],[3,"Chars"],[3,"RSplitTerminator"],[3,"Take"],[3,"DecodeUtf8"],[3,"RSplitNMut"],[3,"TakeWhile"],[3,"SplitN"],[3,"Peekable"],[3,"SplitN"],[3,"SplitNMut"],[3,"StepBy"],[3,"RSplitN"],[3,"RSplitN"],[3,"Scan"],[3,"SkipWhile"],[3,"Cycle"],[3,"Formatter"],[3,"VecDeque"],[3,"Layout"],[3,"LinkedList"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"Arc"],[3,"CannotReallocInPlace"],[3,"Iter"],[3,"Range"],[3,"IntoIter"],[3,"IterMut"],[3,"IntoIter"],[3,"VacantEntry"],[3,"IntoIter"],[3,"Drain"],[3,"Drain"],[3,"IterMut"],[3,"BinaryHeap"],[3,"Iter"],[3,"Intersection"],[3,"Iter"],[3,"Union"],[3,"PlaceFront"],[3,"Range"],[3,"BinaryHeapPlace"],[3,"BackPlace"],[3,"DrainFilter"],[3,"ValuesMut"],[3,"Drain"],[3,"PlaceBack"],[3,"Difference"],[3,"EncodeUtf16"],[3,"PeekMut"],[3,"IterMut"],[3,"Splice"],[3,"IntoIter"],[3,"OccupiedEntry"],[3,"Weak"],[3,"DrainFilter"],[3,"IntoIter"],[3,"Values"],[3,"PlaceBack"],[3,"SymmetricDifference"],[3,"Drain"],[3,"Iter"],[3,"FrontPlace"],[3,"Iter"],[3,"RangeMut"],[3,"Keys"],[3,"Weak"],[3,"IntoIter"],[3,"Heap"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"SplitWhitespace"],[3,"DecodeUtf16"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"System"],[3,"CString"],[3,"CStr"],[3,"DebugList"],[3,"DebugSet"],[3,"DebugMap"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"IterMut"],[3,"IntoIter"],[3,"ValuesMut"],[3,"Drain"],[3,"EntryPlace"],[3,"RandomState"],[3,"DefaultHasher"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"]]};
searchIndex["sgx_types"] = {"doc":"","items":[[3,"sgx_attributes_t","sgx_types","",null,null],[12,"flags","","",0,null],[12,"xfrm","","",0,null],[3,"sgx_misc_attribute_t","","",null,null],[12,"secs_attr","","",1,null],[12,"misc_select","","",1,null],[3,"sgx_dh_msg1_t","","",null,null],[12,"g_a","","",2,null],[12,"target","","",2,null],[3,"sgx_dh_msg2_t","","",null,null],[12,"g_b","","",3,null],[12,"report","","",3,null],[12,"cmac","","",3,null],[3,"sgx_dh_msg3_body_t","","",null,null],[12,"report","","",4,null],[12,"additional_prop_length","","",4,null],[12,"additional_prop","","",4,null],[3,"sgx_dh_msg3_t","","",null,null],[12,"cmac","","",5,null],[12,"msg3_body","","",5,null],[3,"sgx_dh_session_enclave_identity_t","","",null,null],[12,"cpu_svn","","",6,null],[12,"misc_select","","",6,null],[12,"reserved_1","","",6,null],[12,"attributes","","",6,null],[12,"mr_enclave","","",6,null],[12,"reserved_2","","",6,null],[12,"mr_signer","","",6,null],[12,"reserved_3","","",6,null],[12,"isv_prod_id","","",6,null],[12,"isv_svn","","",6,null],[3,"sgx_dh_session_t","","",null,null],[12,"sgx_dh_session","","",7,null],[3,"ecc_param_t","","",null,null],[12,"eccP","","",8,null],[12,"eccA","","",8,null],[12,"eccB","","",8,null],[12,"eccG","","",8,null],[12,"eccR","","",8,null],[3,"sgx_cpu_svn_t","","",null,null],[12,"svn","","",9,null],[3,"sgx_key_id_t","","",null,null],[12,"id","","",10,null],[3,"sgx_key_request_t","","",null,null],[12,"key_name","","",11,null],[12,"key_policy","","",11,null],[12,"isv_svn","","",11,null],[12,"reserved1","","",11,null],[12,"cpu_svn","","",11,null],[12,"attribute_mask","","",11,null],[12,"key_id","","",11,null],[12,"misc_mask","","",11,null],[12,"reserved2","","",11,null],[3,"sgx_ra_msg1_t","","",null,null],[12,"g_a","","",12,null],[12,"gid","","",12,null],[3,"sgx_ra_msg2_t","","",null,null],[12,"g_b","","",13,null],[12,"spid","","",13,null],[12,"quote_type","","",13,null],[12,"kdf_id","","",13,null],[12,"sign_gb_ga","","",13,null],[12,"mac","","",13,null],[12,"sig_rl_size","","",13,null],[12,"sig_rl","","",13,null],[3,"sgx_ra_msg3_t","","",null,null],[12,"mac","","",14,null],[12,"g_a","","",14,null],[12,"ps_sec_prop","","",14,null],[12,"quote","","",14,null],[3,"sgx_spid_t","","",null,null],[12,"id","","",15,null],[3,"sgx_basename_t","","",null,null],[12,"name","","",16,null],[3,"sgx_quote_nonce_t","","",null,null],[12,"rand","","",17,null],[3,"sgx_update_info_bit_t","","",null,null],[12,"ucodeUpdate","","",18,null],[12,"csmeFwUpdate","","",18,null],[12,"pswUpdate","","",18,null],[3,"sgx_quote_t","","",null,null],[12,"version","","",19,null],[12,"sign_type","","",19,null],[12,"epid_group_id","","",19,null],[12,"qe_svn","","",19,null],[12,"pce_svn","","",19,null],[12,"xeid","","",19,null],[12,"basename","","",19,null],[12,"report_body","","",19,null],[12,"signature_len","","",19,null],[12,"signature","","",19,null],[3,"sgx_platform_info_t","","",null,null],[12,"platform_info","","",20,null],[3,"sgx_measurement_t","","",null,null],[12,"m","","",21,null],[3,"sgx_report_data_t","","",null,null],[12,"d","","",22,null],[3,"sgx_target_info_t","","",null,null],[12,"mr_enclave","","",23,null],[12,"attributes","","",23,null],[12,"reserved1","","",23,null],[12,"misc_select","","",23,null],[12,"reserved2","","",23,null],[3,"sgx_report_body_t","","",null,null],[12,"cpu_svn","","",24,null],[12,"misc_select","","",24,null],[12,"reserved1","","",24,null],[12,"attributes","","",24,null],[12,"mr_enclave","","",24,null],[12,"reserved2","","",24,null],[12,"mr_signer","","",24,null],[12,"reserved3","","",24,null],[12,"isv_prod_id","","",24,null],[12,"isv_svn","","",24,null],[12,"reserved4","","",24,null],[12,"report_data","","",24,null],[3,"sgx_report_t","","",null,null],[12,"body","","",25,null],[12,"key_id","","",25,null],[12,"mac","","",25,null],[3,"sgx_mc_uuid_t","","",null,null],[12,"counter_id","","",26,null],[12,"nonce","","",26,null],[3,"sgx_ps_sec_prop_desc_t","","",null,null],[12,"sgx_ps_sec_prop_desc","","",27,null],[3,"sgx_ps_sec_prop_desc_ex_t","","",null,null],[12,"ps_sec_prop_desc","","",28,null],[12,"pse_mrsigner","","",28,null],[12,"pse_prod_id","","",28,null],[12,"pse_isv_svn","","",28,null],[3,"sgx_ec256_dh_shared_t","","",null,null],[12,"s","","",29,null],[3,"sgx_ec256_private_t","","",null,null],[12,"r","","",30,null],[3,"sgx_ec256_public_t","","",null,null],[12,"gx","","",31,null],[12,"gy","","",31,null],[3,"sgx_ec256_signature_t","","",null,null],[12,"x","","",32,null],[12,"y","","",32,null],[3,"sgx_rsa3072_public_key_t","","",null,null],[12,"modulus","","",33,null],[12,"exponent","","",33,null],[3,"sgx_rsa3072_key_t","","",null,null],[12,"modulus","","",34,null],[12,"d","","",34,null],[12,"e","","",34,null],[3,"sgx_rsa3072_signature_t","","",null,null],[12,"signature","","",35,null],[3,"sgx_thread_queue_t","","",null,null],[12,"m_first","","",36,null],[12,"m_last","","",36,null],[3,"sgx_thread_mutex_t","","",null,null],[12,"m_refcount","","",37,null],[12,"m_control","","",37,null],[12,"m_lock","","",37,null],[12,"m_owner","","",37,null],[12,"m_queue","","",37,null],[3,"sgx_thread_mutexattr_t","","",null,null],[12,"m_dummy","","",38,null],[3,"sgx_thread_condattr_t","","",null,null],[12,"m_dummy","","",39,null],[3,"sgx_thread_cond_t","","",null,null],[12,"m_lock","","",40,null],[12,"m_queue","","",40,null],[3,"sgx_cpu_context_t","","",null,null],[12,"rax","","",41,null],[12,"rcx","","",41,null],[12,"rdx","","",41,null],[12,"rbx","","",41,null],[12,"rsp","","",41,null],[12,"rbp","","",41,null],[12,"rsi","","",41,null],[12,"rdi","","",41,null],[12,"r8","","",41,null],[12,"r9","","",41,null],[12,"r10","","",41,null],[12,"r11","","",41,null],[12,"r12","","",41,null],[12,"r13","","",41,null],[12,"r14","","",41,null],[12,"r15","","",41,null],[12,"rflags","","",41,null],[12,"rip","","",41,null],[3,"sgx_exception_info_t","","",null,null],[12,"cpu_context","","",42,null],[12,"exception_vector","","",42,null],[12,"exception_type","","",42,null],[3,"sgx_aes_gcm_data_t","","",null,null],[12,"payload_size","","",43,null],[12,"reserved","","",43,null],[12,"payload_tag","","",43,null],[12,"payload","","",43,null],[3,"sgx_sealed_data_t","","",null,null],[12,"key_request","","",44,null],[12,"plain_text_offset","","",44,null],[12,"reserved","","",44,null],[12,"aes_data","","",44,null],[3,"sgx_ps_cap_t","","",null,null],[12,"ps_cap0","","",45,null],[12,"ps_cap1","","",45,null],[4,"c_void","","",null,null],[4,"sgx_dh_session_role_t","","",null,null],[13,"SGX_DH_SESSION_INITIATOR","","",46,null],[13,"SGX_DH_SESSION_RESPONDER","","",46,null],[4,"sgx_ra_key_type_t","","",null,null],[13,"SGX_RA_KEY_SK","","",47,null],[13,"SGX_RA_KEY_MK","","",47,null],[13,"SGX_RA_KEY_VK","","",47,null],[4,"sgx_quote_sign_type_t","","",null,null],[13,"SGX_UNLINKABLE_SIGNATURE","","",48,null],[13,"SGX_LINKABLE_SIGNATURE","","",48,null],[4,"sgx_generic_ecresult_t","","",null,null],[13,"SGX_EC_VALID","","",49,null],[13,"SGX_EC_COMPOSITE_BASE","","",49,null],[13,"SGX_EC_COMPLICATED_BASE","","",49,null],[13,"SGX_EC_IS_ZERO_DISCRIMINANT","","",49,null],[13,"SGX_EC_COMPOSITE_ORDER","","",49,null],[13,"SGX_EC_INVALID_ORDER","","",49,null],[13,"SGX_EC_IS_WEAK_MOV","","",49,null],[13,"SGX_EC_IS_WEAK_SSA","","",49,null],[13,"SGX_EC_IS_SUPER_SINGULAR","","",49,null],[13,"SGX_EC_INVALID_PRIVATE_KEY","","",49,null],[13,"SGX_EC_INVALID_PUBLIC_KEY","","",49,null],[13,"SGX_EC_INVALID_KEY_PAIR","","",49,null],[13,"SGX_EC_POINT_OUT_OF_GROUP","","",49,null],[13,"SGX_EC_POINT_IS_AT_INFINITY","","",49,null],[13,"SGX_EC_POINT_IS_NOT_VALID","","",49,null],[13,"SGX_EC_POINT_IS_EQUAL","","",49,null],[13,"SGX_EC_POINT_IS_NOT_EQUAL","","",49,null],[13,"SGX_EC_INVALID_SIGNATURE","","",49,null],[4,"sgx_rsa_result_t","","",null,null],[13,"SGX_RSA_VALID","","",50,null],[13,"SGX_RSA_INVALID_SIGNATURE","","",50,null],[4,"sgx_exception_vector_t","","",null,null],[13,"SGX_EXCEPTION_VECTOR_DE","","",51,null],[13,"SGX_EXCEPTION_VECTOR_DB","","",51,null],[13,"SGX_EXCEPTION_VECTOR_BP","","",51,null],[13,"SGX_EXCEPTION_VECTOR_BR","","",51,null],[13,"SGX_EXCEPTION_VECTOR_UD","","",51,null],[13,"SGX_EXCEPTION_VECTOR_MF","","",51,null],[13,"SGX_EXCEPTION_VECTOR_AC","","",51,null],[13,"SGX_EXCEPTION_VECTOR_XM","","",51,null],[4,"sgx_exception_type_t","","",null,null],[13,"SGX_EXCEPTION_HARDWARE","","",52,null],[13,"SGX_EXCEPTION_SOFTWARE","","",52,null],[4,"sgx_device_status_t","","",null,null],[13,"SGX_ENABLED","","",53,null],[13,"SGX_DISABLED_REBOOT_REQUIRED","","",53,null],[13,"SGX_DISABLED_LEGACY_OS","","",53,null],[13,"SGX_DISABLED","","",53,null],[13,"SGX_DISABLED_SCI_AVAILABLE","","",53,null],[13,"SGX_DISABLED_MANUAL_ENABLE","","",53,null],[13,"SGX_DISABLED_HYPERV_ENABLED","","",53,null],[13,"SGX_DISABLED_UNSUPPORTED_CPU","","",53,null],[4,"sgx_status_t","","",null,null],[13,"SGX_SUCCESS","","",54,null],[13,"SGX_ERROR_UNEXPECTED","","",54,null],[13,"SGX_ERROR_INVALID_PARAMETER","","",54,null],[13,"SGX_ERROR_OUT_OF_MEMORY","","",54,null],[13,"SGX_ERROR_ENCLAVE_LOST","","",54,null],[13,"SGX_ERROR_INVALID_STATE","","",54,null],[13,"SGX_ERROR_INVALID_FUNCTION","","",54,null],[13,"SGX_ERROR_OUT_OF_TCS","","",54,null],[13,"SGX_ERROR_ENCLAVE_CRASHED","","",54,null],[13,"SGX_ERROR_ECALL_NOT_ALLOWED","","",54,null],[13,"SGX_ERROR_OCALL_NOT_ALLOWED","","",54,null],[13,"SGX_ERROR_STACK_OVERRUN","","",54,null],[13,"SGX_ERROR_UNDEFINED_SYMBOL","","",54,null],[13,"SGX_ERROR_INVALID_ENCLAVE","","",54,null],[13,"SGX_ERROR_INVALID_ENCLAVE_ID","","",54,null],[13,"SGX_ERROR_INVALID_SIGNATURE","","",54,null],[13,"SGX_ERROR_NDEBUG_ENCLAVE","","",54,null],[13,"SGX_ERROR_OUT_OF_EPC","","",54,null],[13,"SGX_ERROR_NO_DEVICE","","",54,null],[13,"SGX_ERROR_MEMORY_MAP_CONFLICT","","",54,null],[13,"SGX_ERROR_INVALID_METADATA","","",54,null],[13,"SGX_ERROR_DEVICE_BUSY","","",54,null],[13,"SGX_ERROR_INVALID_VERSION","","",54,null],[13,"SGX_ERROR_MODE_INCOMPATIBLE","","",54,null],[13,"SGX_ERROR_ENCLAVE_FILE_ACCESS","","",54,null],[13,"SGX_ERROR_INVALID_MISC","","",54,null],[13,"SGX_ERROR_INVALID_LAUNCH_TOKEN","","",54,null],[13,"SGX_ERROR_MAC_MISMATCH","","",54,null],[13,"SGX_ERROR_INVALID_ATTRIBUTE","","",54,null],[13,"SGX_ERROR_INVALID_CPUSVN","","",54,null],[13,"SGX_ERROR_INVALID_ISVSVN","","",54,null],[13,"SGX_ERROR_INVALID_KEYNAME","","",54,null],[13,"SGX_ERROR_SERVICE_UNAVAILABLE","","",54,null],[13,"SGX_ERROR_SERVICE_TIMEOUT","","",54,null],[13,"SGX_ERROR_AE_INVALID_EPIDBLOB","","",54,null],[13,"SGX_ERROR_SERVICE_INVALID_PRIVILEGE","","",54,null],[13,"SGX_ERROR_EPID_MEMBER_REVOKED","","",54,null],[13,"SGX_ERROR_UPDATE_NEEDED","","",54,null],[13,"SGX_ERROR_NETWORK_FAILURE","","",54,null],[13,"SGX_ERROR_AE_SESSION_INVALID","","",54,null],[13,"SGX_ERROR_BUSY","","",54,null],[13,"SGX_ERROR_MC_NOT_FOUND","","",54,null],[13,"SGX_ERROR_MC_NO_ACCESS_RIGHT","","",54,null],[13,"SGX_ERROR_MC_USED_UP","","",54,null],[13,"SGX_ERROR_MC_OVER_QUOTA","","",54,null],[13,"SGX_ERROR_KDF_MISMATCH","","",54,null],[13,"SGX_ERROR_UNRECOGNIZED_PLATFORM","","",54,null],[13,"SGX_ERROR_NO_PRIVILEGE","","",54,null],[13,"SGX_ERROR_FILE_BAD_STATUS","","",54,null],[13,"SGX_ERROR_FILE_NO_KEY_ID","","",54,null],[13,"SGX_ERROR_FILE_NAME_MISMATCH","","",54,null],[13,"SGX_ERROR_FILE_NOT_SGX_FILE","","",54,null],[13,"SGX_ERROR_FILE_CANT_OPEN_RECOVERY_FILE","","",54,null],[13,"SGX_ERROR_FILE_CANT_WRITE_RECOVERY_FILE","","",54,null],[13,"SGX_ERROR_FILE_RECOVERY_NEEDED","","",54,null],[13,"SGX_ERROR_FILE_FLUSH_FAILED","","",54,null],[13,"SGX_ERROR_FILE_CLOSE_FAILED","","",54,null],[5,"sgx_cpuid","","",null,null],[5,"sgx_cpuidex","","",null,null],[5,"sgx_spin_lock","","",null,null],[5,"sgx_spin_unlock","","",null,null],[5,"sgx_thread_mutex_init","","",null,null],[5,"sgx_thread_mutex_destroy","","",null,null],[5,"sgx_thread_mutex_lock","","",null,null],[5,"sgx_thread_mutex_trylock","","",null,null],[5,"sgx_thread_mutex_unlock","","",null,null],[5,"sgx_thread_cond_init","","",null,null],[5,"sgx_thread_cond_destroy","","",null,null],[5,"sgx_thread_cond_wait","","",null,null],[5,"sgx_thread_cond_signal","","",null,null],[5,"sgx_thread_cond_broadcast","","",null,null],[5,"sgx_thread_self","","",null,null],[5,"sgx_thread_equal","","",null,null],[5,"sgx_dh_init_session","","",null,null],[5,"sgx_dh_responder_gen_msg1","","",null,null],[5,"sgx_dh_initiator_proc_msg1","","",null,null],[5,"sgx_dh_responder_proc_msg2","","",null,null],[5,"sgx_dh_initiator_proc_msg3","","",null,null],[5,"sgx_create_pse_session","","",null,null],[5,"sgx_close_pse_session","","",null,null],[5,"sgx_get_ps_sec_prop","","",null,null],[5,"sgx_get_ps_sec_prop_ex","","",null,null],[5,"sgx_get_trusted_time","","",null,null],[5,"sgx_create_monotonic_counter_ex","","",null,null],[5,"sgx_create_monotonic_counter","","",null,null],[5,"sgx_destroy_monotonic_counter","","",null,null],[5,"sgx_increment_monotonic_counter","","",null,null],[5,"sgx_read_monotonic_counter","","",null,null],[5,"sgx_calc_sealed_data_size","","",null,null],[5,"sgx_get_add_mac_txt_len","","",null,null],[5,"sgx_get_encrypt_txt_len","","",null,null],[5,"sgx_seal_data","","",null,null],[5,"sgx_seal_data_ex","","",null,null],[5,"sgx_unseal_data","","",null,null],[5,"sgx_mac_aadata","","",null,null],[5,"sgx_mac_aadata_ex","","",null,null],[5,"sgx_unmac_aadata","","",null,null],[5,"sgx_create_report","","",null,null],[5,"sgx_verify_report","","",null,null],[5,"sgx_get_key","","",null,null],[5,"sgx_sha256_msg","","",null,null],[5,"sgx_sha256_init","","",null,null],[5,"sgx_sha256_update","","",null,null],[5,"sgx_sha256_get_hash","","",null,null],[5,"sgx_sha256_close","","",null,null],[5,"sgx_rijndael128GCM_encrypt","","",null,null],[5,"sgx_rijndael128GCM_decrypt","","",null,null],[5,"sgx_rijndael128_cmac_msg","","",null,null],[5,"sgx_cmac128_init","","",null,null],[5,"sgx_cmac128_update","","",null,null],[5,"sgx_cmac128_final","","",null,null],[5,"sgx_cmac128_close","","",null,null],[5,"sgx_aes_ctr_encrypt","","",null,null],[5,"sgx_aes_ctr_decrypt","","",null,null],[5,"sgx_ecc256_open_context","","",null,null],[5,"sgx_ecc256_close_context","","",null,null],[5,"sgx_ecc256_create_key_pair","","",null,null],[5,"sgx_ecc256_check_point","","",null,null],[5,"sgx_ecc256_compute_shared_dhkey","","",null,null],[5,"sgx_ecdsa_sign","","",null,null],[5,"sgx_ecdsa_verify","","",null,null],[5,"sgx_rsa3072_sign","","",null,null],[5,"sgx_rsa3072_verify","","",null,null],[5,"sgx_ra_init","","",null,null],[5,"sgx_ra_init_ex","","",null,null],[5,"sgx_ra_get_keys","","",null,null],[5,"sgx_ra_close","","",null,null],[5,"sgx_is_within_enclave","","",null,null],[5,"sgx_is_outside_enclave","","",null,null],[5,"sgx_read_rand","","",null,null],[5,"sgx_register_exception_handler","","",null,null],[5,"sgx_unregister_exception_handler","","",null,null],[5,"sgx_ocalloc","","",null,null],[5,"sgx_sgx_ocfree","","",null,null],[5,"sgx_init_quote","","",null,null],[5,"sgx_calc_quote_size","","",null,null],[5,"sgx_get_quote_size","","",null,null],[5,"sgx_get_quote","","",null,null],[5,"sgx_get_ps_cap","","",null,null],[5,"sgx_get_whitelist_size","","",null,null],[5,"sgx_get_whitelist","","",null,null],[5,"sgx_get_extended_epid_group_id","","",null,null],[5,"sgx_report_attestation_status","","",null,null],[5,"sgx_ra_get_msg1","","",null,null],[5,"sgx_ra_proc_msg2","","",null,null],[5,"sgx_create_enclave","","",null,null],[5,"sgx_destroy_enclave","","",null,null],[5,"sgx_fopen","","",null,null],[5,"sgx_fopen_auto_key","","",null,null],[5,"sgx_fwrite","","",null,null],[5,"sgx_fread","","",null,null],[5,"sgx_ftell","","",null,null],[5,"sgx_fseek","","",null,null],[5,"sgx_fflush","","",null,null],[5,"sgx_ferror","","",null,null],[5,"sgx_feof","","",null,null],[5,"sgx_clearerr","","",null,null],[5,"sgx_fclose","","",null,null],[5,"sgx_remove","","",null,null],[5,"sgx_fexport_auto_key","","",null,null],[5,"sgx_fimport_auto_key","","",null,null],[5,"sgx_fclear_cache","","",null,null],[5,"sgx_is_capable","","",null,null],[5,"sgx_cap_enable_device","","",null,null],[5,"sgx_cap_get_status","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"sgx_attributes_t"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"sgx_attributes_t"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"sgx_misc_attribute_t"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"sgx_misc_attribute_t"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"sgx_dh_msg1_t"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"sgx_dh_msg1_t"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"sgx_dh_msg2_t"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"sgx_dh_msg3_body_t"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"sgx_dh_msg3_t"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"sgx_dh_session_enclave_identity_t"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"sgx_dh_session_t"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"sgx_dh_msg2_t"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"sgx_dh_msg3_body_t"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"sgx_dh_msg3_t"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"sgx_dh_session_enclave_identity_t"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"sgx_dh_session_t"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"sgx_dh_session_role_t"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"sgx_dh_session_role_t"}],"output":{"name":"bool"}}],[11,"default","","",46,{"inputs":[],"output":{"name":"sgx_dh_session_role_t"}}],[11,"from_repr","","",46,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_key","","",46,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ecc_param_t"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"ecc_param_t"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"sgx_cpu_svn_t"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"sgx_cpu_svn_t"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"sgx_key_id_t"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"sgx_key_id_t"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"sgx_key_request_t"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"sgx_key_request_t"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"sgx_ra_key_type_t"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"sgx_ra_key_type_t"}],"output":{"name":"bool"}}],[11,"default","","",47,{"inputs":[],"output":{"name":"sgx_ra_key_type_t"}}],[11,"from_repr","","",47,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_key","","",47,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"sgx_ra_msg1_t"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"sgx_ra_msg1_t"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"sgx_ra_msg2_t"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"sgx_ra_msg2_t"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"sgx_ra_msg3_t"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"sgx_ra_msg3_t"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sgx_spid_t"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"sgx_spid_t"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"sgx_basename_t"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"sgx_basename_t"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"sgx_quote_nonce_t"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"sgx_quote_nonce_t"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"sgx_update_info_bit_t"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"sgx_update_info_bit_t"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"sgx_quote_sign_type_t"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"sgx_quote_sign_type_t"}],"output":{"name":"bool"}}],[11,"default","","",48,{"inputs":[],"output":{"name":"sgx_quote_sign_type_t"}}],[11,"from_repr","","",48,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_key","","",48,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"sgx_quote_t"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sgx_platform_info_t"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"sgx_quote_t"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"sgx_platform_info_t"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"sgx_measurement_t"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"sgx_measurement_t"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sgx_report_data_t"}}],[11,"default","","",22,{"inputs":[],"output":{"name":"sgx_report_data_t"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sgx_target_info_t"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"sgx_report_body_t"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"sgx_report_t"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"sgx_target_info_t"}}],[11,"default","","",24,{"inputs":[],"output":{"name":"sgx_report_body_t"}}],[11,"default","","",25,{"inputs":[],"output":{"name":"sgx_report_t"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"sgx_mc_uuid_t"}}],[11,"default","","",26,{"inputs":[],"output":{"name":"sgx_mc_uuid_t"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"sgx_ps_sec_prop_desc_t"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"sgx_ps_sec_prop_desc_ex_t"}}],[11,"default","","",27,{"inputs":[],"output":{"name":"sgx_ps_sec_prop_desc_t"}}],[11,"default","","",28,{"inputs":[],"output":{"name":"sgx_ps_sec_prop_desc_ex_t"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"sgx_ec256_dh_shared_t"}}],[11,"default","","",29,{"inputs":[],"output":{"name":"sgx_ec256_dh_shared_t"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"sgx_ec256_private_t"}}],[11,"default","","",30,{"inputs":[],"output":{"name":"sgx_ec256_private_t"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"sgx_ec256_public_t"}}],[11,"default","","",31,{"inputs":[],"output":{"name":"sgx_ec256_public_t"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"sgx_ec256_signature_t"}}],[11,"default","","",32,{"inputs":[],"output":{"name":"sgx_ec256_signature_t"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"sgx_rsa3072_public_key_t"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"sgx_rsa3072_key_t"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"sgx_rsa3072_signature_t"}}],[11,"default","","",33,{"inputs":[],"output":{"name":"sgx_rsa3072_public_key_t"}}],[11,"default","","",34,{"inputs":[],"output":{"name":"sgx_rsa3072_key_t"}}],[11,"default","","",35,{"inputs":[],"output":{"name":"sgx_rsa3072_signature_t"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"sgx_generic_ecresult_t"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"sgx_generic_ecresult_t"}],"output":{"name":"bool"}}],[11,"default","","",49,{"inputs":[],"output":{"name":"sgx_generic_ecresult_t"}}],[11,"from_repr","","",49,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_key","","",49,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"sgx_rsa_result_t"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"sgx_rsa_result_t"}],"output":{"name":"bool"}}],[11,"default","","",50,{"inputs":[],"output":{"name":"sgx_rsa_result_t"}}],[11,"from_repr","","",50,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_key","","",50,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"sgx_thread_mutexattr_t"}}],[11,"default","","",38,{"inputs":[],"output":{"name":"sgx_thread_mutexattr_t"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"sgx_thread_condattr_t"}}],[11,"default","","",39,{"inputs":[],"output":{"name":"sgx_thread_condattr_t"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"sgx_exception_vector_t"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"sgx_exception_vector_t"}],"output":{"name":"bool"}}],[11,"default","","",51,{"inputs":[],"output":{"name":"sgx_exception_vector_t"}}],[11,"from_repr","","",51,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_key","","",51,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"sgx_exception_type_t"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"sgx_exception_type_t"}],"output":{"name":"bool"}}],[11,"default","","",52,{"inputs":[],"output":{"name":"sgx_exception_type_t"}}],[11,"from_repr","","",52,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_key","","",52,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"sgx_cpu_context_t"}}],[11,"default","","",41,{"inputs":[],"output":{"name":"sgx_cpu_context_t"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"sgx_exception_info_t"}}],[11,"default","","",42,{"inputs":[],"output":{"name":"sgx_exception_info_t"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"sgx_aes_gcm_data_t"}}],[11,"default","","",43,{"inputs":[],"output":{"name":"sgx_aes_gcm_data_t"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"sgx_sealed_data_t"}}],[11,"default","","",44,{"inputs":[],"output":{"name":"sgx_sealed_data_t"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"sgx_ps_cap_t"}}],[11,"default","","",45,{"inputs":[],"output":{"name":"sgx_ps_cap_t"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"sgx_device_status_t"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"sgx_device_status_t"}],"output":{"name":"bool"}}],[11,"default","","",53,{"inputs":[],"output":{"name":"sgx_device_status_t"}}],[11,"from_repr","","",53,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_key","","",53,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"sgx_status_t"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"sgx_status_t"}],"output":{"name":"bool"}}],[11,"cmp","","",54,{"inputs":[{"name":"self"},{"name":"sgx_status_t"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",54,{"inputs":[{"name":"self"},{"name":"sgx_status_t"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",54,{"inputs":[],"output":{"name":"sgx_status_t"}}],[11,"from_repr","","",54,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_key","","",54,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"__description","","",54,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_str","","",54,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"marker","","",null,null],[8,"BytewiseEquality","sgx_types::marker","Trait implemented for types that can be compared for equality using their bytewise representation A type can implement BytewiseEquality if all of its components implement BytewiseEquality.",null,null],[8,"ContiguousMemory","","Trait for demonstrating one structure locates in contiguous memory.",null,null],[6,"int8_t","sgx_types","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_char","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"sgx_misc_select_t","","",null,null],[6,"sgx_ec_key_128bit_t","","",null,null],[6,"sgx_enclave_id_t","","",null,null],[6,"sgx_key_128bit_t","","",null,null],[6,"sgx_isv_svn_t","","",null,null],[6,"sgx_ra_context_t","","",null,null],[6,"sgx_ra_key_128_t","","",null,null],[6,"sgx_epid_group_id_t","","",null,null],[6,"sgx_mac_t","","",null,null],[6,"sgx_prod_id_t","","",null,null],[6,"sgx_spinlock_t","","",null,null],[6,"sgx_time_t","","",null,null],[6,"sgx_time_source_nonce_t","","",null,null],[6,"sgx_sha_state_handle_t","","",null,null],[6,"sgx_cmac_state_handle_t","","",null,null],[6,"sgx_ecc_state_handle_t","","",null,null],[6,"sgx_sha256_hash_t","","",null,null],[6,"sgx_aes_gcm_128bit_key_t","","",null,null],[6,"sgx_aes_gcm_128bit_tag_t","","",null,null],[6,"sgx_cmac_128bit_key_t","","",null,null],[6,"sgx_cmac_128bit_tag_t","","",null,null],[6,"sgx_aes_ctr_128bit_key_t","","",null,null],[6,"sgx_thread_t","","",null,null],[6,"sgx_ra_derive_secret_keys_t","","",null,null],[6,"sgx_exception_handler_t","","",null,null],[6,"sgx_ecall_get_ga_trusted_t","","",null,null],[6,"sgx_ecall_proc_msg2_trusted_t","","",null,null],[6,"sgx_ecall_get_msg3_trusted_t","","",null,null],[6,"sgx_launch_token_t","","",null,null],[6,"sgx_cpuinfo_t","","",null,null],[6,"SGX_FILE","","",null,null],[6,"sys_error_t","","",null,null],[6,"SgxResult","","",null,null],[6,"SgxError","","",null,null],[6,"SysResult","","",null,null],[6,"SysError","","",null,null],[17,"SGX_FLAGS_INITTED","","",null,null],[17,"SGX_FLAGS_DEBUG","","",null,null],[17,"SGX_FLAGS_MODE64BIT","","",null,null],[17,"SGX_FLAGS_PROVISION_KEY","","",null,null],[17,"SGX_FLAGS_EINITTOKEN_KEY","","",null,null],[17,"SGX_FLAGS_RESERVED","","",null,null],[17,"SGX_XFRM_LEGACY","","",null,null],[17,"SGX_XFRM_AVX","","",null,null],[17,"SGX_XFRM_AVX512","","",null,null],[17,"SGX_XFRM_MPX","","",null,null],[17,"SGX_XFRM_RESERVED","","",null,null],[17,"SGX_DH_MAC_SIZE","","",null,null],[17,"SGX_DH_SESSION_DATA_SIZE","","",null,null],[17,"SGX_FEBITSIZE","","",null,null],[17,"SGX_KEYSELECT_LICENSE","","",null,null],[17,"SGX_KEYSELECT_PROVISION","","",null,null],[17,"SGX_KEYSELECT_PROVISION_SEAL","","",null,null],[17,"SGX_KEYSELECT_REPORT","","",null,null],[17,"SGX_KEYSELECT_SEAL","","",null,null],[17,"SGX_KEYPOLICY_MRENCLAVE","","",null,null],[17,"SGX_KEYPOLICY_MRSIGNER","","",null,null],[17,"SGX_KEYID_SIZE","","",null,null],[17,"SGX_CPUSVN_SIZE","","",null,null],[17,"SGX_KEY_REQUEST_RESERVED2_BYTES","","",null,null],[17,"SGX_PLATFORM_INFO_SIZE","","",null,null],[17,"SGX_HASH_SIZE","","",null,null],[17,"SGX_MAC_SIZE","","",null,null],[17,"SGX_REPORT_DATA_SIZE","","",null,null],[17,"SGX_TARGET_INFO_RESERVED1_BYTES","","",null,null],[17,"SGX_TARGET_INFO_RESERVED2_BYTES","","",null,null],[17,"SGX_SPINLOCK_INITIALIZER","","",null,null],[17,"SGX_MC_UUID_COUNTER_ID_SIZE","","",null,null],[17,"SGX_MC_UUID_NONCE_SIZE","","",null,null],[17,"SGX_MC_POLICY_SIGNER","","",null,null],[17,"SGX_MC_POLICY_ENCLAVE","","",null,null],[17,"SGX_SHA256_HASH_SIZE","","",null,null],[17,"SGX_ECP256_KEY_SIZE","","",null,null],[17,"SGX_NISTP_ECP256_KEY_SIZE","","",null,null],[17,"SGX_AESGCM_IV_SIZE","","",null,null],[17,"SGX_AESGCM_KEY_SIZE","","",null,null],[17,"SGX_AESGCM_MAC_SIZE","","",null,null],[17,"SGX_CMAC_KEY_SIZE","","",null,null],[17,"SGX_CMAC_MAC_SIZE","","",null,null],[17,"SGX_AESCTR_KEY_SIZE","","",null,null],[17,"SGX_RSA3072_KEY_SIZE","","",null,null],[17,"SGX_RSA3072_PRI_EXP_SIZE","","",null,null],[17,"SGX_RSA3072_PUB_EXP_SIZE","","",null,null],[17,"SE_WORDSIZE","","",null,null],[17,"SGX_THREAD_T_NULL","","",null,null],[17,"SGX_THREAD_MUTEX_NONRECURSIVE","","",null,null],[17,"SGX_THREAD_MUTEX_RECURSIVE","","",null,null],[17,"SGX_THREAD_NONRECURSIVE_MUTEX_INITIALIZER","","",null,null],[17,"SGX_THREAD_RECURSIVE_MUTEX_INITIALIZER","","",null,null],[17,"SGX_THREAD_MUTEX_INITIALIZER","","",null,null],[17,"SGX_THREAD_COND_INITIALIZER","","",null,null],[17,"EXCEPTION_CONTINUE_SEARCH","","",null,null],[17,"EXCEPTION_CONTINUE_EXECUTION","","",null,null],[17,"SGX_SEAL_TAG_SIZE","","",null,null],[17,"SGX_SEAL_IV_SIZE","","",null,null],[17,"PS_CAP_TRUSTED_TIME","","",null,null],[17,"PS_CAP_MONOTONIC_COUNTER","","",null,null],[17,"ENCLAVE_INIT_NOT_STARTED","","",null,null],[17,"ENCLAVE_INIT_IN_PROGRESS","","",null,null],[17,"ENCLAVE_INIT_DONE","","",null,null],[17,"ENCLAVE_CRASHED","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[14,"cfg_if","","",null,null],[14,"__cfg_if_items","","",null,null],[14,"__cfg_if_apply","","",null,null],[14,"__item","","",null,null],[14,"s","","",null,null],[14,"impl_struct","","",null,null],[14,"impl_enum","","",null,null]],"paths":[[3,"sgx_attributes_t"],[3,"sgx_misc_attribute_t"],[3,"sgx_dh_msg1_t"],[3,"sgx_dh_msg2_t"],[3,"sgx_dh_msg3_body_t"],[3,"sgx_dh_msg3_t"],[3,"sgx_dh_session_enclave_identity_t"],[3,"sgx_dh_session_t"],[3,"ecc_param_t"],[3,"sgx_cpu_svn_t"],[3,"sgx_key_id_t"],[3,"sgx_key_request_t"],[3,"sgx_ra_msg1_t"],[3,"sgx_ra_msg2_t"],[3,"sgx_ra_msg3_t"],[3,"sgx_spid_t"],[3,"sgx_basename_t"],[3,"sgx_quote_nonce_t"],[3,"sgx_update_info_bit_t"],[3,"sgx_quote_t"],[3,"sgx_platform_info_t"],[3,"sgx_measurement_t"],[3,"sgx_report_data_t"],[3,"sgx_target_info_t"],[3,"sgx_report_body_t"],[3,"sgx_report_t"],[3,"sgx_mc_uuid_t"],[3,"sgx_ps_sec_prop_desc_t"],[3,"sgx_ps_sec_prop_desc_ex_t"],[3,"sgx_ec256_dh_shared_t"],[3,"sgx_ec256_private_t"],[3,"sgx_ec256_public_t"],[3,"sgx_ec256_signature_t"],[3,"sgx_rsa3072_public_key_t"],[3,"sgx_rsa3072_key_t"],[3,"sgx_rsa3072_signature_t"],[3,"sgx_thread_queue_t"],[3,"sgx_thread_mutex_t"],[3,"sgx_thread_mutexattr_t"],[3,"sgx_thread_condattr_t"],[3,"sgx_thread_cond_t"],[3,"sgx_cpu_context_t"],[3,"sgx_exception_info_t"],[3,"sgx_aes_gcm_data_t"],[3,"sgx_sealed_data_t"],[3,"sgx_ps_cap_t"],[4,"sgx_dh_session_role_t"],[4,"sgx_ra_key_type_t"],[4,"sgx_quote_sign_type_t"],[4,"sgx_generic_ecresult_t"],[4,"sgx_rsa_result_t"],[4,"sgx_exception_vector_t"],[4,"sgx_exception_type_t"],[4,"sgx_device_status_t"],[4,"sgx_status_t"]]};
searchIndex["unwind"] = {"doc":"","items":[[3,"_Unwind_Exception","unwind","",null,null],[12,"exception_class","","",0,null],[12,"exception_cleanup","","",0,null],[12,"private","","",0,null],[4,"_Unwind_Reason_Code","","",null,null],[13,"_URC_NO_REASON","","",1,null],[13,"_URC_FOREIGN_EXCEPTION_CAUGHT","","",1,null],[13,"_URC_FATAL_PHASE2_ERROR","","",1,null],[13,"_URC_FATAL_PHASE1_ERROR","","",1,null],[13,"_URC_NORMAL_STOP","","",1,null],[13,"_URC_END_OF_STACK","","",1,null],[13,"_URC_HANDLER_FOUND","","",1,null],[13,"_URC_INSTALL_CONTEXT","","",1,null],[13,"_URC_CONTINUE_UNWIND","","",1,null],[13,"_URC_FAILURE","","",1,null],[4,"_Unwind_Context","","",null,null],[4,"_Unwind_Action","","",null,null],[13,"_UA_SEARCH_PHASE","","",2,null],[13,"_UA_CLEANUP_PHASE","","",2,null],[13,"_UA_HANDLER_FRAME","","",2,null],[13,"_UA_FORCE_UNWIND","","",2,null],[13,"_UA_END_OF_STACK","","",2,null],[5,"_Unwind_Resume","","",null,null],[5,"_Unwind_DeleteException","","",null,null],[5,"_Unwind_GetLanguageSpecificData","","",null,null],[5,"_Unwind_GetRegionStart","","",null,null],[5,"_Unwind_GetTextRelBase","","",null,null],[5,"_Unwind_GetDataRelBase","","",null,null],[5,"_Unwind_GetGR","","",null,null],[5,"_Unwind_SetGR","","",null,null],[5,"_Unwind_GetIP","","",null,null],[5,"_Unwind_SetIP","","",null,null],[5,"_Unwind_GetIPInfo","","",null,null],[5,"_Unwind_FindEnclosingFunction","","",null,null],[5,"_Unwind_RaiseException","","",null,null],[5,"_Unwind_Backtrace","","",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"_unwind_reason_code"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"_unwind_reason_code"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"_unwind_action"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"_unwind_action"}],"output":{"name":"bool"}}],[6,"_Unwind_Exception_Class","","",null,null],[6,"_Unwind_Word","","",null,null],[6,"_Unwind_Ptr","","",null,null],[6,"_Unwind_Trace_Fn","","",null,null],[6,"_Unwind_Exception_Cleanup_Fn","","",null,null],[17,"unwinder_private_data_size","","",null,null]],"paths":[[3,"_Unwind_Exception"],[4,"_Unwind_Reason_Code"],[4,"_Unwind_Action"]]};
initSearch(searchIndex);
